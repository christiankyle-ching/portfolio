!function(e){var t={};function i(s){if(t[s])return t[s].exports;var a=t[s]={i:s,l:!1,exports:{}};return e[s].call(a.exports,a,a.exports,i),a.l=!0,a.exports}i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)i.d(s,a,function(t){return e[t]}.bind(null,a));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=16)}([function(e,t,i){"use strict";i.r(t),t.default=i.p+"images/ca264c34423474785194bc367f600b78.jpg"},function(e,t,i){"use strict";i.r(t),t.default=i.p+"images/54e450b8d5ac2e37d30a69b6d6a3bcc1.jpg"},function(e,t,i){"use strict";i.r(t),t.default=i.p+"images/3348f82dbc8782671e090e6454a5ffb1.jpg"},function(e,t,i){"use strict";var s,a=function(){return void 0===s&&(s=Boolean(window&&document&&document.all&&!window.atob)),s},n=function(){var e={};return function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}e[t]=i}return e[t]}}(),r=[];function o(e){for(var t=-1,i=0;i<r.length;i++)if(r[i].identifier===e){t=i;break}return t}function l(e,t){for(var i={},s=[],a=0;a<e.length;a++){var n=e[a],l=t.base?n[0]+t.base:n[0],d=i[l]||0,p="".concat(l," ").concat(d);i[l]=d+1;var c=o(p),u={css:n[1],media:n[2],sourceMap:n[3]};-1!==c?(r[c].references++,r[c].updater(u)):r.push({identifier:p,updater:g(u,t),references:1}),s.push(p)}return s}function d(e){var t=document.createElement("style"),s=e.attributes||{};if(void 0===s.nonce){var a=i.nc;a&&(s.nonce=a)}if(Object.keys(s).forEach((function(e){t.setAttribute(e,s[e])})),"function"==typeof e.insert)e.insert(t);else{var r=n(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}return t}var p,c=(p=[],function(e,t){return p[e]=t,p.filter(Boolean).join("\n")});function u(e,t,i,s){var a=i?"":s.media?"@media ".concat(s.media," {").concat(s.css,"}"):s.css;if(e.styleSheet)e.styleSheet.cssText=c(t,a);else{var n=document.createTextNode(a),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(n,r[t]):e.appendChild(n)}}function h(e,t,i){var s=i.css,a=i.media,n=i.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),n&&btoa&&(s+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(n))))," */")),e.styleSheet)e.styleSheet.cssText=s;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(s))}}var m=null,f=0;function g(e,t){var i,s,a;if(t.singleton){var n=f++;i=m||(m=d(t)),s=u.bind(null,i,n,!1),a=u.bind(null,i,n,!0)}else i=d(t),s=h.bind(null,i,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(i)};return s(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;s(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=a());var i=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var s=0;s<i.length;s++){var a=o(i[s]);r[a].references--}for(var n=l(e,t),d=0;d<i.length;d++){var p=o(i[d]);0===r[p].references&&(r[p].updater(),r.splice(p,1))}i=n}}}},function(e,t,i){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var i=function(e,t){var i=e[1]||"",s=e[3];if(!s)return i;if(t&&"function"==typeof btoa){var a=(r=s,o=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),"/*# ".concat(l," */")),n=s.sources.map((function(e){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(e," */")}));return[i].concat(n).concat([a]).join("\n")}var r,o,l;return[i].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(i,"}"):i})).join("")},t.i=function(e,i,s){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(s)for(var n=0;n<this.length;n++){var r=this[n][0];null!=r&&(a[r]=!0)}for(var o=0;o<e.length;o++){var l=[].concat(e[o]);s&&a[l[0]]||(i&&(l[2]?l[2]="".concat(i," and ").concat(l[2]):l[2]=i),t.push(l))}},t}},function(e,t,i){var s=i(3),a=i(6);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var n={insert:"head",singleton:!1};s(a,n);e.exports=a.locals||{}},function(e,t,i){var s=i(4),a=i(7),n=i(8),r=i(0),o=i(1),l=i(2),d=i(9),p=i(10),c=i(11),u=i(12),h=i(13);(t=s(!1)).push([e.i,"@import url(https://fonts.googleapis.com/css?family=Montserrat);"]),t.push([e.i,"@import url(https://fonts.googleapis.com/css?family=Inter);"]);var m=a(n),f=a(r),g=a(o),v=a(l),b=a(d),w=a(p),x=a(c),y=a(u),E=a(h);t.push([e.i,"*{box-sizing:border-box;padding:0;margin:0}.card{width:70%;height:70%;background-size:cover;background-position:top center;position:absolute;bottom:0;margin-left:15%;background-color:#fff;box-shadow:0px -6px 7px rgba(0,0,0,.32);border-radius:10px;transition:all 300ms ease-in-out 0s}.card.card-right{bottom:unset;right:0;background-position:left center;margin-left:0 !important;margin-top:15%;box-shadow:-6px 0px 7px rgba(0,0,0,.32) !important}nav{padding:15px;position:relative}nav .float-left{display:block;position:absolute}nav>h1{text-align:center}nav .back-button{content:url("+m+');max-width:30px}body{font-family:"Montserrat";color:#fff;background-color:#030303}a{text-decoration:none;color:unset}a.disabled{pointer-events:none;cursor:default;opacity:.3}a.underline{display:inline-block;color:#24e0f1}a.underline:after{content:"";width:0px;height:2px;display:block;background:#24e0f1;transition:300ms;animation:expand-full-width 600ms ease-in-out 0s alternate 2}a.underline:hover:after{width:100%}button{color:#24e0f1;font-weight:500;background:none;border:none;font-family:"Montserrat";font-size:.75em;cursor:pointer;padding:0 30px;height:30px;line-height:30px;border-radius:15px;border:2px #24e0f1 solid;outline:none}p{margin-bottom:1em}#index-body{font-size:.7em;background-color:#030303}#index-body .container{width:100%;height:100vh;display:flex;flex-flow:column wrap;overflow:hidden}#index-body a{color:#fff !important}#index-body a:after{animation:expand-full-width 600ms ease-in-out 1500ms 2 alternate !important}#index-body .skillset-info{position:absolute;opacity:.6;width:1.2em;height:1.2em;top:.6em;right:.6em;cursor:pointer}[class*=box-]{width:50%}.box-1{background-color:#1e2fc7;flex:1 1 33%}.box-2{flex:2 2 66%}.box-3{flex:1 1 33%}.box-4{background-color:#24e0f1;flex:1 1 33%}.box-5{background-color:#d47f00;flex:1 1 33%}@media screen and (orientation: landscape){[class*=box-]{width:33.33% !important}.box-1,.box-2,.box-3,.box-4,.box-5{flex:1 1 50%}.box-3{order:3}.box-4{order:2}.box-5{order:4}.box-2{order:5}}#index-body{font-size:.5em !important}@media(min-width: 288px){#index-body{font-size:.6em !important}}@media(min-width: 576px){#index-body{font-size:.8em !important}}@media(min-width: 768px){#index-body{font-size:1em !important}}@media(min-width: 992px){#index-body{font-size:1.25em !important}}@media(min-width: 1200px){#index-body{font-size:1.4em !important}}.box-1{display:flex;justify-content:center;align-items:center;font-size:1.2em}.box-1 .name{font-size:2em}.box-1 .dot{font-size:2em;color:#d47f00}.box-3{display:flex;justify-content:flex-end;align-items:center;position:relative;overflow:hidden}.box-3 .text-desc{padding-right:1em;padding-top:2em}.box-3 .text-desc>h1{text-align:right;font-weight:normal}.box-3 .text-desc>h1 .text-desc-highlight{font-weight:bold;font-size:1.4em}.box-3 .desc-bg{font-size:8em;font-weight:1000;opacity:.15;position:absolute;top:0;right:-10%}.box-4{display:flex;flex-flow:column nowrap;z-index:0;position:relative;cursor:pointer}.box-4 .col{flex:1 1 50%}.box-4 .upper-box{z-index:2;background-color:#044e55;box-shadow:0 -5px 6px rgba(0,0,0,.32);display:flex;justify-content:center;align-items:center}.box-4 .upper-box>h1{font-size:2.4em;letter-spacing:.05em;opacity:.7}.box-4 .card:nth-child(1){bottom:20%;background-image:url('+f+")}.box-4 .card:nth-child(2){bottom:10%;background-image:url("+g+")}.box-4 .card:nth-child(3){bottom:0%;background-image:url("+v+")}.box-4:hover .upper-box>h1{transition:.1s opacity ease-in;opacity:1}.box-4:hover .card:nth-child(1){bottom:50%}.box-4:hover .card:nth-child(2){bottom:30%}.box-4:hover .card:nth-child(3){bottom:10%}.box-5{display:flex;z-index:0;position:relative;cursor:pointer;position:relative}.box-5 .col{flex:1 1 50%}.box-5 .upper-box{z-index:2;background-color:#945a02;box-shadow:-5px 0 6px rgba(0,0,0,.32);writing-mode:vertical-lr;display:flex;justify-content:center}.box-5 .upper-box>h1{font-size:2.4em;letter-spacing:.05em;align-self:center;opacity:.7;transform:rotate(180deg)}.box-5 .card:nth-child(1){right:20%;background-image:url("+b+")}.box-5 .card:nth-child(2){right:10%;background-image:url("+w+");background-size:contain;background-repeat:no-repeat}.box-5 .card:nth-child(3){right:0%;background-image:url("+x+');background-size:contain;background-repeat:no-repeat}.box-5:hover .upper-box>h1{transition:.1s opacity ease-in;opacity:1}.box-5:hover .card:nth-child(1){right:50%}.box-5:hover .card:nth-child(2){right:30%}.box-5:hover .card:nth-child(3){right:10%}.box-2{display:flex;z-index:0;overflow:hidden;position:relative}.box-2 .col-1{writing-mode:vertical-lr;display:flex;justify-content:center;align-items:flex-start}.box-2 .col-1>h1{font-size:2.4em;letter-spacing:.2em;opacity:.7}.box-2 .col-2{flex:1;display:flex;justify-content:center;align-items:center}.box-2 .col-2 ul{list-style:none;width:90%;height:90%;display:flex;flex-direction:column;justify-content:space-evenly}.box-2 .col-2 ul li .skill-name{font-size:1.2em;padding-bottom:.4em}.box-2 .col-2 ul li .skill-name>span{float:right}.box-2 .col-2 ul li .full-bar,.box-2 .col-2 ul li .progress-bar{height:.8em;background-color:#1e2fc7}.box-2 .col-2 ul li .progress-bar-container .progress-bar{background:linear-gradient(to right, #945a02, #d47f00);box-shadow:0 5px 6px rgba(0,0,0,.32)}.box-1 .section-1,.box-1 .section-2{opacity:0}.box-1 .section-1{animation:fade-to-right 500ms forwards .1s ease-out}.box-1 .section-2{animation:fade-to-right 500ms forwards 0s ease-out}.box-3 .desc-bg,.box-3 .text-desc{opacity:0}.box-3 .desc-bg{animation:fade-to-left-2 500ms forwards .1s ease-out}.box-3 .text-desc{animation:fade-to-left 500ms forwards 0s ease-out}.box-4{animation:slide-up 500ms forwards 0s ease-out}.box-4 .upper-box{animation:slide-up 500ms forwards 0s ease-in}.box-5{animation:slide-left 500ms forwards 0s ease-out}.box-5 .upper-box{animation:slide-left 500ms forwards 0s ease-in}.box-2 .col-1{animation:fade-to-right 500ms forwards 0s ease-out}.box-2 .col-2{opacity:0;animation:fade-to-right 500ms forwards .4s ease-out}.box-2 .col-2 .progress-bar{width:0;animation:expand-full-width 600ms forwards 1000ms ease-out}#works-body p,#works-body button,#works-body .img-label{font-family:"Inter"}.w-col{display:flex;flex-direction:column;padding:1em 0}.w-col .w-col-slider{overflow:hidden}.w-col .w-col-slider img{max-width:80vw;max-height:50vh}.w-col .w-col-slider .swiper-wrapper:hover{cursor:grab}.w-col .w-col-slider .swiper-wrapper:active{cursor:grabbing}.w-col .w-col-slider .swiper-container{width:100%;height:100% !important}.w-col .w-col-slider .swiper-slide{text-align:center;padding-bottom:30px;height:unset !important;display:flex;flex-direction:column;align-items:center;justify-content:center}.w-col .w-col-slider .swiper-slide>img{border-radius:20px 50px;background:linear-gradient(145deg, #090909, #070707);box-shadow:20px 20px 60px #070707,-20px -20px 60px #090909;max-width:75vw}.w-col .w-col-slider .swiper-slide .img-label{padding-top:1em}.w-col .w-col-desc{flex:1;padding:1em 2em;overflow:hidden;text-align:center}.w-col .w-col-desc .w-title>a{position:absolute;right:2em}.w-col .w-col-desc .w-stack{display:block;padding:.3em 0}.w-col .w-col-desc .w-p{padding:1em 0;line-height:1.3em;transition:transform .6s ease-in-out;transform:translateX(100%);height:0}.w-col .w-col-desc .w-p>div{transition:opacity .6s ease-out;opacity:0;padding:0 0 1em 0;line-height:1.6em}.w-col .w-col-desc .w-p>div>ul.features-list{padding:0 15%;text-align:left;list-style-position:outside;font-size:.9em}.w-col .w-col-desc .w-p>div>ul.features-list .list-header{padding-bottom:1em;margin-left:-1em}.w-col .w-col-desc .w-p>div>ul.features-list>li{padding-left:1em;padding-bottom:1em;line-height:1.4em}@media(min-width: 768px){.w-col .w-col-desc .w-p>div>ul.features-list{padding:0 10%}}@media(min-width: 768px){.w-col:nth-of-type(even)>.w-col-desc{padding-left:2em !important;padding-right:0 !important}.w-col:nth-of-type(odd)>.w-col-desc{padding-left:0 !important;padding-right:2em !important}}.show-p{transform:translateX(0) !important;height:auto !important}.show-p>div{opacity:1 !important}.swiper-pagination-bullet{background-color:#24e0f1 !important}.w-links{text-align:center;list-style:none}.w-links li{display:inline-block;margin-right:1em}.w-links li:last-child{margin-right:0 !important}.link-icon{width:30px;height:30px}.link-icon-sm{width:20px;height:20px}.github{content:url('+y+")}.open{content:url("+E+')}@media(min-width: 768px){.w-col{flex-direction:row !important}.w-col .w-col-slider{width:50% !important}.w-col .w-col-desc{text-align:left}.w-col .w-links{text-align:left !important}.w-col .swiper-slide{max-width:50vw !important}.w-col .swiper-slide>img{max-width:40vw !important}.w-col:nth-of-type(even) .w-col-slider{order:2}.w-col:nth-of-type(even) .w-col-desc{text-align:right}.w-col:nth-of-type(even) .w-col-desc .w-title>a{right:unset !important;left:2em !important}.w-col:nth-of-type(even) .w-col-desc ul.features-list{direction:rtl;text-align:right !important}.w-col:nth-of-type(even) .w-col-desc ul.features-list li{padding-left:0 !important;padding-right:1em !important}.w-col:nth-of-type(even) .w-col-desc ul.features-list .list-header{margin-left:0;margin-right:-1em}.w-col:nth-of-type(even) .w-links{text-align:right !important}.w-p{transition:none !important;transform:scaleY(1) !important;height:auto !important}.w-p>div{opacity:1 !important}.w-toggle{display:none !important}}#about-body{font-family:"Inter"}#about-body .container{padding:0 10%}#about-body p,#about-body blockquote{padding-bottom:1em}#about-body p{line-height:1.6em}#about-body blockquote{padding-left:.3em;font-family:"Montserrat";font-size:2em;font-style:italic}#about-body blockquote:after{content:"";display:block;width:100%;height:1px;background-color:#fff;opacity:.4;margin-top:.6em}#about-body .swiper-container{width:100%;height:100% !important}#about-body .swiper-container:hover{cursor:grab}#about-body .swiper-container:active{cursor:grabbing}#about-body .swiper-slide{padding-bottom:30px;height:unset;display:flex;align-items:center;justify-content:center}#about-body .swiper-slide img{max-width:80%;max-height:60vh;border-radius:20px 50px}#about-body .contact-links{position:fixed;top:70vh;right:0;background-color:#044e55;border-radius:10px 0 0 10px;padding:10px;text-align:center}#about-body .contact-links strong{display:none}#about-body .contact-links ul{list-style:none;padding:.3em 0 0 0}#about-body .contact-links li{padding-bottom:5px}#about-body .contact-links li>a{display:flex;align-items:center;justify-content:flex-start}#about-body .contact-links .contact-label{padding-left:.3em;display:none}#about-body .contact-links li:last-child{padding-bottom:0 !important}#about-body .contact-links img{width:25px;opacity:1 !important}#about-body .contact-links:hover strong,#about-body .contact-links:hover .contact-label{display:inline}@media(min-width: 768px){#about-body .contact-links strong,#about-body .contact-links .contact-label{display:inline}}.self-swiper{margin-top:1.5em;margin-bottom:1.5em}@keyframes fade-to-right{from{opacity:0;transform:translateX(-2rem)}to{opacity:1;transform:translateX(0)}}@keyframes fade-to-left{from{opacity:0;transform:translateX(2rem)}to{opacity:1;transform:translateX(0)}}@keyframes fade-to-left-2{from{opacity:0;transform:translateX(2rem)}to{opacity:.15;transform:translateX(0)}}@keyframes slide-up{from{opacity:0;transform:translateY(100%)}to{opacity:1;transform:translateY(0)}}@keyframes slide-left{from{transform:translateX(100%)}to{transform:translateX(0)}}@keyframes expand-full-width{from{width:0%}to{width:100%}}',""]),e.exports=t},function(e,t,i){"use strict";e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},function(e,t,i){"use strict";i.r(t),t.default=i.p+"images/3531363a346961b31bde0e8f6e449a50.svg"},function(e,t,i){"use strict";i.r(t),t.default=i.p+"images/f8c22eb0d1af38f42827b80e86becfdd.jpg"},function(e,t,i){"use strict";i.r(t),t.default=i.p+"images/7c250079d58316863d625a95fd55b59e.jpg"},function(e,t,i){"use strict";i.r(t),t.default=i.p+"images/e0e95b044a3825cdc0f0ece5efd3546e.jpg"},function(e,t,i){"use strict";i.r(t),t.default=i.p+"images/575986ca592433d730cd248de1a8733e.svg"},function(e,t,i){"use strict";i.r(t),t.default=i.p+"images/64fef803f0610171ae490cae2bc61d2c.svg"},function(e,t,i){var s=i(3),a=i(15);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var n={insert:"head",singleton:!1};s(a,n);e.exports=a.locals||{}},function(e,t,i){(t=i(4)(!1)).push([e.i,"/**\n * Swiper 5.4.5\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * http://swiperjs.com\n *\n * Copyright 2014-2020 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: June 16, 2020\n */\n\n@font-face{font-family:swiper-icons;src:url(\"data:application/font-woff;charset=utf-8;base64, d09GRgABAAAAAAZgABAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAGRAAAABoAAAAci6qHkUdERUYAAAWgAAAAIwAAACQAYABXR1BPUwAABhQAAAAuAAAANuAY7+xHU1VCAAAFxAAAAFAAAABm2fPczU9TLzIAAAHcAAAASgAAAGBP9V5RY21hcAAAAkQAAACIAAABYt6F0cBjdnQgAAACzAAAAAQAAAAEABEBRGdhc3AAAAWYAAAACAAAAAj//wADZ2x5ZgAAAywAAADMAAAD2MHtryVoZWFkAAABbAAAADAAAAA2E2+eoWhoZWEAAAGcAAAAHwAAACQC9gDzaG10eAAAAigAAAAZAAAArgJkABFsb2NhAAAC0AAAAFoAAABaFQAUGG1heHAAAAG8AAAAHwAAACAAcABAbmFtZQAAA/gAAAE5AAACXvFdBwlwb3N0AAAFNAAAAGIAAACE5s74hXjaY2BkYGAAYpf5Hu/j+W2+MnAzMYDAzaX6QjD6/4//Bxj5GA8AuRwMYGkAPywL13jaY2BkYGA88P8Agx4j+/8fQDYfA1AEBWgDAIB2BOoAeNpjYGRgYNBh4GdgYgABEMnIABJzYNADCQAACWgAsQB42mNgYfzCOIGBlYGB0YcxjYGBwR1Kf2WQZGhhYGBiYGVmgAFGBiQQkOaawtDAoMBQxXjg/wEGPcYDDA4wNUA2CCgwsAAAO4EL6gAAeNpj2M0gyAACqxgGNWBkZ2D4/wMA+xkDdgAAAHjaY2BgYGaAYBkGRgYQiAHyGMF8FgYHIM3DwMHABGQrMOgyWDLEM1T9/w8UBfEMgLzE////P/5//f/V/xv+r4eaAAeMbAxwIUYmIMHEgKYAYjUcsDAwsLKxc3BycfPw8jEQA/gZBASFhEVExcQlJKWkZWTl5BUUlZRVVNXUNTQZBgMAAMR+E+gAEQFEAAAAKgAqACoANAA+AEgAUgBcAGYAcAB6AIQAjgCYAKIArAC2AMAAygDUAN4A6ADyAPwBBgEQARoBJAEuATgBQgFMAVYBYAFqAXQBfgGIAZIBnAGmAbIBzgHsAAB42u2NMQ6CUAyGW568x9AneYYgm4MJbhKFaExIOAVX8ApewSt4Bic4AfeAid3VOBixDxfPYEza5O+Xfi04YADggiUIULCuEJK8VhO4bSvpdnktHI5QCYtdi2sl8ZnXaHlqUrNKzdKcT8cjlq+rwZSvIVczNiezsfnP/uznmfPFBNODM2K7MTQ45YEAZqGP81AmGGcF3iPqOop0r1SPTaTbVkfUe4HXj97wYE+yNwWYxwWu4v1ugWHgo3S1XdZEVqWM7ET0cfnLGxWfkgR42o2PvWrDMBSFj/IHLaF0zKjRgdiVMwScNRAoWUoH78Y2icB/yIY09An6AH2Bdu/UB+yxopYshQiEvnvu0dURgDt8QeC8PDw7Fpji3fEA4z/PEJ6YOB5hKh4dj3EvXhxPqH/SKUY3rJ7srZ4FZnh1PMAtPhwP6fl2PMJMPDgeQ4rY8YT6Gzao0eAEA409DuggmTnFnOcSCiEiLMgxCiTI6Cq5DZUd3Qmp10vO0LaLTd2cjN4fOumlc7lUYbSQcZFkutRG7g6JKZKy0RmdLY680CDnEJ+UMkpFFe1RN7nxdVpXrC4aTtnaurOnYercZg2YVmLN/d/gczfEimrE/fs/bOuq29Zmn8tloORaXgZgGa78yO9/cnXm2BpaGvq25Dv9S4E9+5SIc9PqupJKhYFSSl47+Qcr1mYNAAAAeNptw0cKwkAAAMDZJA8Q7OUJvkLsPfZ6zFVERPy8qHh2YER+3i/BP83vIBLLySsoKimrqKqpa2hp6+jq6RsYGhmbmJqZSy0sraxtbO3sHRydnEMU4uR6yx7JJXveP7WrDycAAAAAAAH//wACeNpjYGRgYOABYhkgZgJCZgZNBkYGLQZtIJsFLMYAAAw3ALgAeNolizEKgDAQBCchRbC2sFER0YD6qVQiBCv/H9ezGI6Z5XBAw8CBK/m5iQQVauVbXLnOrMZv2oLdKFa8Pjuru2hJzGabmOSLzNMzvutpB3N42mNgZGBg4GKQYzBhYMxJLMlj4GBgAYow/P/PAJJhLM6sSoWKfWCAAwDAjgbRAAB42mNgYGBkAIIbCZo5IPrmUn0hGA0AO8EFTQAA\") format(\"woff\");font-weight:400;font-style:normal}:root{--swiper-theme-color:#007aff}.swiper-container{margin-left:auto;margin-right:auto;position:relative;overflow:hidden;list-style:none;padding:0;z-index:1}.swiper-container-vertical>.swiper-wrapper{flex-direction:column}.swiper-wrapper{position:relative;width:100%;height:100%;z-index:1;display:flex;transition-property:transform;box-sizing:content-box}.swiper-container-android .swiper-slide,.swiper-wrapper{transform:translate3d(0px,0,0)}.swiper-container-multirow>.swiper-wrapper{flex-wrap:wrap}.swiper-container-multirow-column>.swiper-wrapper{flex-wrap:wrap;flex-direction:column}.swiper-container-free-mode>.swiper-wrapper{transition-timing-function:ease-out;margin:0 auto}.swiper-slide{flex-shrink:0;width:100%;height:100%;position:relative;transition-property:transform}.swiper-slide-invisible-blank{visibility:hidden}.swiper-container-autoheight,.swiper-container-autoheight .swiper-slide{height:auto}.swiper-container-autoheight .swiper-wrapper{align-items:flex-start;transition-property:transform,height}.swiper-container-3d{perspective:1200px}.swiper-container-3d .swiper-cube-shadow,.swiper-container-3d .swiper-slide,.swiper-container-3d .swiper-slide-shadow-bottom,.swiper-container-3d .swiper-slide-shadow-left,.swiper-container-3d .swiper-slide-shadow-right,.swiper-container-3d .swiper-slide-shadow-top,.swiper-container-3d .swiper-wrapper{transform-style:preserve-3d}.swiper-container-3d .swiper-slide-shadow-bottom,.swiper-container-3d .swiper-slide-shadow-left,.swiper-container-3d .swiper-slide-shadow-right,.swiper-container-3d .swiper-slide-shadow-top{position:absolute;left:0;top:0;width:100%;height:100%;pointer-events:none;z-index:10}.swiper-container-3d .swiper-slide-shadow-left{background-image:linear-gradient(to left,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-3d .swiper-slide-shadow-right{background-image:linear-gradient(to right,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-3d .swiper-slide-shadow-top{background-image:linear-gradient(to top,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-3d .swiper-slide-shadow-bottom{background-image:linear-gradient(to bottom,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-css-mode>.swiper-wrapper{overflow:auto;scrollbar-width:none;-ms-overflow-style:none}.swiper-container-css-mode>.swiper-wrapper::-webkit-scrollbar{display:none}.swiper-container-css-mode>.swiper-wrapper>.swiper-slide{scroll-snap-align:start start}.swiper-container-horizontal.swiper-container-css-mode>.swiper-wrapper{scroll-snap-type:x mandatory}.swiper-container-vertical.swiper-container-css-mode>.swiper-wrapper{scroll-snap-type:y mandatory}:root{--swiper-navigation-size:44px}.swiper-button-next,.swiper-button-prev{position:absolute;top:50%;width:calc(var(--swiper-navigation-size)/ 44 * 27);height:var(--swiper-navigation-size);margin-top:calc(-1 * var(--swiper-navigation-size)/ 2);z-index:10;cursor:pointer;display:flex;align-items:center;justify-content:center;color:var(--swiper-navigation-color,var(--swiper-theme-color))}.swiper-button-next.swiper-button-disabled,.swiper-button-prev.swiper-button-disabled{opacity:.35;cursor:auto;pointer-events:none}.swiper-button-next:after,.swiper-button-prev:after{font-family:swiper-icons;font-size:var(--swiper-navigation-size);text-transform:none!important;letter-spacing:0;text-transform:none;font-variant:initial;line-height:1}.swiper-button-prev,.swiper-container-rtl .swiper-button-next{left:10px;right:auto}.swiper-button-prev:after,.swiper-container-rtl .swiper-button-next:after{content:'prev'}.swiper-button-next,.swiper-container-rtl .swiper-button-prev{right:10px;left:auto}.swiper-button-next:after,.swiper-container-rtl .swiper-button-prev:after{content:'next'}.swiper-button-next.swiper-button-white,.swiper-button-prev.swiper-button-white{--swiper-navigation-color:#ffffff}.swiper-button-next.swiper-button-black,.swiper-button-prev.swiper-button-black{--swiper-navigation-color:#000000}.swiper-button-lock{display:none}.swiper-pagination{position:absolute;text-align:center;transition:.3s opacity;transform:translate3d(0,0,0);z-index:10}.swiper-pagination.swiper-pagination-hidden{opacity:0}.swiper-container-horizontal>.swiper-pagination-bullets,.swiper-pagination-custom,.swiper-pagination-fraction{bottom:10px;left:0;width:100%}.swiper-pagination-bullets-dynamic{overflow:hidden;font-size:0}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transform:scale(.33);position:relative}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active{transform:scale(1)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-main{transform:scale(1)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev{transform:scale(.66)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev-prev{transform:scale(.33)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next{transform:scale(.66)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next-next{transform:scale(.33)}.swiper-pagination-bullet{width:8px;height:8px;display:inline-block;border-radius:100%;background:#000;opacity:.2}button.swiper-pagination-bullet{border:none;margin:0;padding:0;box-shadow:none;-webkit-appearance:none;-moz-appearance:none;appearance:none}.swiper-pagination-clickable .swiper-pagination-bullet{cursor:pointer}.swiper-pagination-bullet-active{opacity:1;background:var(--swiper-pagination-color,var(--swiper-theme-color))}.swiper-container-vertical>.swiper-pagination-bullets{right:10px;top:50%;transform:translate3d(0px,-50%,0)}.swiper-container-vertical>.swiper-pagination-bullets .swiper-pagination-bullet{margin:6px 0;display:block}.swiper-container-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic{top:50%;transform:translateY(-50%);width:8px}.swiper-container-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{display:inline-block;transition:.2s transform,.2s top}.swiper-container-horizontal>.swiper-pagination-bullets .swiper-pagination-bullet{margin:0 4px}.swiper-container-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic{left:50%;transform:translateX(-50%);white-space:nowrap}.swiper-container-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transition:.2s transform,.2s left}.swiper-container-horizontal.swiper-container-rtl>.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transition:.2s transform,.2s right}.swiper-pagination-progressbar{background:rgba(0,0,0,.25);position:absolute}.swiper-pagination-progressbar .swiper-pagination-progressbar-fill{background:var(--swiper-pagination-color,var(--swiper-theme-color));position:absolute;left:0;top:0;width:100%;height:100%;transform:scale(0);transform-origin:left top}.swiper-container-rtl .swiper-pagination-progressbar .swiper-pagination-progressbar-fill{transform-origin:right top}.swiper-container-horizontal>.swiper-pagination-progressbar,.swiper-container-vertical>.swiper-pagination-progressbar.swiper-pagination-progressbar-opposite{width:100%;height:4px;left:0;top:0}.swiper-container-horizontal>.swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,.swiper-container-vertical>.swiper-pagination-progressbar{width:4px;height:100%;left:0;top:0}.swiper-pagination-white{--swiper-pagination-color:#ffffff}.swiper-pagination-black{--swiper-pagination-color:#000000}.swiper-pagination-lock{display:none}.swiper-scrollbar{border-radius:10px;position:relative;-ms-touch-action:none;background:rgba(0,0,0,.1)}.swiper-container-horizontal>.swiper-scrollbar{position:absolute;left:1%;bottom:3px;z-index:50;height:5px;width:98%}.swiper-container-vertical>.swiper-scrollbar{position:absolute;right:3px;top:1%;z-index:50;width:5px;height:98%}.swiper-scrollbar-drag{height:100%;width:100%;position:relative;background:rgba(0,0,0,.5);border-radius:10px;left:0;top:0}.swiper-scrollbar-cursor-drag{cursor:move}.swiper-scrollbar-lock{display:none}.swiper-zoom-container{width:100%;height:100%;display:flex;justify-content:center;align-items:center;text-align:center}.swiper-zoom-container>canvas,.swiper-zoom-container>img,.swiper-zoom-container>svg{max-width:100%;max-height:100%;object-fit:contain}.swiper-slide-zoomed{cursor:move}.swiper-lazy-preloader{width:42px;height:42px;position:absolute;left:50%;top:50%;margin-left:-21px;margin-top:-21px;z-index:10;transform-origin:50%;animation:swiper-preloader-spin 1s infinite linear;box-sizing:border-box;border:4px solid var(--swiper-preloader-color,var(--swiper-theme-color));border-radius:50%;border-top-color:transparent}.swiper-lazy-preloader-white{--swiper-preloader-color:#fff}.swiper-lazy-preloader-black{--swiper-preloader-color:#000}@keyframes swiper-preloader-spin{100%{transform:rotate(360deg)}}.swiper-container .swiper-notification{position:absolute;left:0;top:0;pointer-events:none;opacity:0;z-index:-1000}.swiper-container-fade.swiper-container-free-mode .swiper-slide{transition-timing-function:ease-out}.swiper-container-fade .swiper-slide{pointer-events:none;transition-property:opacity}.swiper-container-fade .swiper-slide .swiper-slide{pointer-events:none}.swiper-container-fade .swiper-slide-active,.swiper-container-fade .swiper-slide-active .swiper-slide-active{pointer-events:auto}.swiper-container-cube{overflow:visible}.swiper-container-cube .swiper-slide{pointer-events:none;-webkit-backface-visibility:hidden;backface-visibility:hidden;z-index:1;visibility:hidden;transform-origin:0 0;width:100%;height:100%}.swiper-container-cube .swiper-slide .swiper-slide{pointer-events:none}.swiper-container-cube.swiper-container-rtl .swiper-slide{transform-origin:100% 0}.swiper-container-cube .swiper-slide-active,.swiper-container-cube .swiper-slide-active .swiper-slide-active{pointer-events:auto}.swiper-container-cube .swiper-slide-active,.swiper-container-cube .swiper-slide-next,.swiper-container-cube .swiper-slide-next+.swiper-slide,.swiper-container-cube .swiper-slide-prev{pointer-events:auto;visibility:visible}.swiper-container-cube .swiper-slide-shadow-bottom,.swiper-container-cube .swiper-slide-shadow-left,.swiper-container-cube .swiper-slide-shadow-right,.swiper-container-cube .swiper-slide-shadow-top{z-index:0;-webkit-backface-visibility:hidden;backface-visibility:hidden}.swiper-container-cube .swiper-cube-shadow{position:absolute;left:0;bottom:0px;width:100%;height:100%;background:#000;opacity:.6;-webkit-filter:blur(50px);filter:blur(50px);z-index:0}.swiper-container-flip{overflow:visible}.swiper-container-flip .swiper-slide{pointer-events:none;-webkit-backface-visibility:hidden;backface-visibility:hidden;z-index:1}.swiper-container-flip .swiper-slide .swiper-slide{pointer-events:none}.swiper-container-flip .swiper-slide-active,.swiper-container-flip .swiper-slide-active .swiper-slide-active{pointer-events:auto}.swiper-container-flip .swiper-slide-shadow-bottom,.swiper-container-flip .swiper-slide-shadow-left,.swiper-container-flip .swiper-slide-shadow-right,.swiper-container-flip .swiper-slide-shadow-top{z-index:0;-webkit-backface-visibility:hidden;backface-visibility:hidden}",""]),e.exports=t},function(e,t,i){"use strict";i.r(t);i(5);function s(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function a(e,t){void 0===e&&(e={}),void 0===t&&(t={}),Object.keys(t).forEach((function(i){void 0===e[i]?e[i]=t[i]:s(t[i])&&s(e[i])&&Object.keys(t[i]).length>0&&a(e[i],t[i])}))}var n="undefined"!=typeof document?document:{},r={body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},createElementNS:function(){return{}},importNode:function(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};a(n,r);var o="undefined"!=typeof window?window:{};a(o,{document:r,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState:function(){},pushState:function(){},go:function(){},back:function(){}},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){},matchMedia:function(){return{}}});class l{constructor(e){const t=this;for(let i=0;i<e.length;i+=1)t[i]=e[i];return t.length=e.length,this}}function d(e,t){const i=[];let s=0;if(e&&!t&&e instanceof l)return e;if(e)if("string"==typeof e){let a,r;const o=e.trim();if(o.indexOf("<")>=0&&o.indexOf(">")>=0){let e="div";for(0===o.indexOf("<li")&&(e="ul"),0===o.indexOf("<tr")&&(e="tbody"),0!==o.indexOf("<td")&&0!==o.indexOf("<th")||(e="tr"),0===o.indexOf("<tbody")&&(e="table"),0===o.indexOf("<option")&&(e="select"),r=n.createElement(e),r.innerHTML=o,s=0;s<r.childNodes.length;s+=1)i.push(r.childNodes[s])}else for(a=t||"#"!==e[0]||e.match(/[ .<>:~]/)?(t||n).querySelectorAll(e.trim()):[n.getElementById(e.trim().split("#")[1])],s=0;s<a.length;s+=1)a[s]&&i.push(a[s])}else if(e.nodeType||e===o||e===n)i.push(e);else if(e.length>0&&e[0].nodeType)for(s=0;s<e.length;s+=1)i.push(e[s]);return new l(i)}function p(e){const t=[];for(let i=0;i<e.length;i+=1)-1===t.indexOf(e[i])&&t.push(e[i]);return t}d.fn=l.prototype,d.Class=l,d.Dom7=l;"resize scroll".split(" ");const c={addClass:function(e){if(void 0===e)return this;const t=e.split(" ");for(let e=0;e<t.length;e+=1)for(let i=0;i<this.length;i+=1)void 0!==this[i]&&void 0!==this[i].classList&&this[i].classList.add(t[e]);return this},removeClass:function(e){const t=e.split(" ");for(let e=0;e<t.length;e+=1)for(let i=0;i<this.length;i+=1)void 0!==this[i]&&void 0!==this[i].classList&&this[i].classList.remove(t[e]);return this},hasClass:function(e){return!!this[0]&&this[0].classList.contains(e)},toggleClass:function(e){const t=e.split(" ");for(let e=0;e<t.length;e+=1)for(let i=0;i<this.length;i+=1)void 0!==this[i]&&void 0!==this[i].classList&&this[i].classList.toggle(t[e]);return this},attr:function(e,t){if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(let i=0;i<this.length;i+=1)if(2===arguments.length)this[i].setAttribute(e,t);else for(const t in e)this[i][t]=e[t],this[i].setAttribute(t,e[t]);return this},removeAttr:function(e){for(let t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},data:function(e,t){let i;if(void 0!==t){for(let s=0;s<this.length;s+=1)i=this[s],i.dom7ElementDataStorage||(i.dom7ElementDataStorage={}),i.dom7ElementDataStorage[e]=t;return this}if(i=this[0],i){if(i.dom7ElementDataStorage&&e in i.dom7ElementDataStorage)return i.dom7ElementDataStorage[e];const t=i.getAttribute("data-"+e);return t||void 0}},transform:function(e){for(let t=0;t<this.length;t+=1){const i=this[t].style;i.webkitTransform=e,i.transform=e}return this},transition:function(e){"string"!=typeof e&&(e+="ms");for(let t=0;t<this.length;t+=1){const i=this[t].style;i.webkitTransitionDuration=e,i.transitionDuration=e}return this},on:function(...e){let[t,i,s,a]=e;function n(e){const t=e.target;if(!t)return;const a=e.target.dom7EventData||[];if(a.indexOf(e)<0&&a.unshift(e),d(t).is(i))s.apply(t,a);else{const e=d(t).parents();for(let t=0;t<e.length;t+=1)d(e[t]).is(i)&&s.apply(e[t],a)}}function r(e){const t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),s.apply(this,t)}"function"==typeof e[1]&&([t,s,a]=e,i=void 0),a||(a=!1);const o=t.split(" ");let l;for(let e=0;e<this.length;e+=1){const t=this[e];if(i)for(l=0;l<o.length;l+=1){const e=o[l];t.dom7LiveListeners||(t.dom7LiveListeners={}),t.dom7LiveListeners[e]||(t.dom7LiveListeners[e]=[]),t.dom7LiveListeners[e].push({listener:s,proxyListener:n}),t.addEventListener(e,n,a)}else for(l=0;l<o.length;l+=1){const e=o[l];t.dom7Listeners||(t.dom7Listeners={}),t.dom7Listeners[e]||(t.dom7Listeners[e]=[]),t.dom7Listeners[e].push({listener:s,proxyListener:r}),t.addEventListener(e,r,a)}}return this},off:function(...e){let[t,i,s,a]=e;"function"==typeof e[1]&&([t,s,a]=e,i=void 0),a||(a=!1);const n=t.split(" ");for(let e=0;e<n.length;e+=1){const t=n[e];for(let e=0;e<this.length;e+=1){const n=this[e];let r;if(!i&&n.dom7Listeners?r=n.dom7Listeners[t]:i&&n.dom7LiveListeners&&(r=n.dom7LiveListeners[t]),r&&r.length)for(let e=r.length-1;e>=0;e-=1){const i=r[e];s&&i.listener===s||s&&i.listener&&i.listener.dom7proxy&&i.listener.dom7proxy===s?(n.removeEventListener(t,i.proxyListener,a),r.splice(e,1)):s||(n.removeEventListener(t,i.proxyListener,a),r.splice(e,1))}}}return this},trigger:function(...e){const t=e[0].split(" "),i=e[1];for(let s=0;s<t.length;s+=1){const a=t[s];for(let t=0;t<this.length;t+=1){const s=this[t];let r;try{r=new o.CustomEvent(a,{detail:i,bubbles:!0,cancelable:!0})}catch(e){r=n.createEvent("Event"),r.initEvent(a,!0,!0),r.detail=i}s.dom7EventData=e.filter((e,t)=>t>0),s.dispatchEvent(r),s.dom7EventData=[],delete s.dom7EventData}}return this},transitionEnd:function(e){const t=["webkitTransitionEnd","transitionend"],i=this;let s;function a(n){if(n.target===this)for(e.call(this,n),s=0;s<t.length;s+=1)i.off(t[s],a)}if(e)for(s=0;s<t.length;s+=1)i.on(t[s],a);return this},outerWidth:function(e){if(this.length>0){if(e){const e=this.styles();return this[0].offsetWidth+parseFloat(e.getPropertyValue("margin-right"))+parseFloat(e.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(this.length>0){if(e){const e=this.styles();return this[0].offsetHeight+parseFloat(e.getPropertyValue("margin-top"))+parseFloat(e.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},offset:function(){if(this.length>0){const e=this[0],t=e.getBoundingClientRect(),i=n.body,s=e.clientTop||i.clientTop||0,a=e.clientLeft||i.clientLeft||0,r=e===o?o.scrollY:e.scrollTop,l=e===o?o.scrollX:e.scrollLeft;return{top:t.top+r-s,left:t.left+l-a}}return null},css:function(e,t){let i;if(1===arguments.length){if("string"!=typeof e){for(i=0;i<this.length;i+=1)for(let t in e)this[i].style[t]=e[t];return this}if(this[0])return o.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e){for(i=0;i<this.length;i+=1)this[i].style[e]=t;return this}return this},each:function(e){if(!e)return this;for(let t=0;t<this.length;t+=1)if(!1===e.call(this[t],t,this[t]))return this;return this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:void 0;for(let t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(let t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){const t=this[0];let i,s;if(!t||void 0===e)return!1;if("string"==typeof e){if(t.matches)return t.matches(e);if(t.webkitMatchesSelector)return t.webkitMatchesSelector(e);if(t.msMatchesSelector)return t.msMatchesSelector(e);for(i=d(e),s=0;s<i.length;s+=1)if(i[s]===t)return!0;return!1}if(e===n)return t===n;if(e===o)return t===o;if(e.nodeType||e instanceof l){for(i=e.nodeType?[e]:e,s=0;s<i.length;s+=1)if(i[s]===t)return!0;return!1}return!1},index:function(){let e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;const t=this.length;let i;return e>t-1?new l([]):e<0?(i=t+e,new l(i<0?[]:[this[i]])):new l([this[e]])},append:function(...e){let t;for(let i=0;i<e.length;i+=1){t=e[i];for(let e=0;e<this.length;e+=1)if("string"==typeof t){const i=n.createElement("div");for(i.innerHTML=t;i.firstChild;)this[e].appendChild(i.firstChild)}else if(t instanceof l)for(let i=0;i<t.length;i+=1)this[e].appendChild(t[i]);else this[e].appendChild(t)}return this},prepend:function(e){let t,i;for(t=0;t<this.length;t+=1)if("string"==typeof e){const s=n.createElement("div");for(s.innerHTML=e,i=s.childNodes.length-1;i>=0;i-=1)this[t].insertBefore(s.childNodes[i],this[t].childNodes[0])}else if(e instanceof l)for(i=0;i<e.length;i+=1)this[t].insertBefore(e[i],this[t].childNodes[0]);else this[t].insertBefore(e,this[t].childNodes[0]);return this},next:function(e){return this.length>0?e?this[0].nextElementSibling&&d(this[0].nextElementSibling).is(e)?new l([this[0].nextElementSibling]):new l([]):this[0].nextElementSibling?new l([this[0].nextElementSibling]):new l([]):new l([])},nextAll:function(e){const t=[];let i=this[0];if(!i)return new l([]);for(;i.nextElementSibling;){const s=i.nextElementSibling;e?d(s).is(e)&&t.push(s):t.push(s),i=s}return new l(t)},prev:function(e){if(this.length>0){const t=this[0];return e?t.previousElementSibling&&d(t.previousElementSibling).is(e)?new l([t.previousElementSibling]):new l([]):t.previousElementSibling?new l([t.previousElementSibling]):new l([])}return new l([])},prevAll:function(e){const t=[];let i=this[0];if(!i)return new l([]);for(;i.previousElementSibling;){const s=i.previousElementSibling;e?d(s).is(e)&&t.push(s):t.push(s),i=s}return new l(t)},parent:function(e){const t=[];for(let i=0;i<this.length;i+=1)null!==this[i].parentNode&&(e?d(this[i].parentNode).is(e)&&t.push(this[i].parentNode):t.push(this[i].parentNode));return d(p(t))},parents:function(e){const t=[];for(let i=0;i<this.length;i+=1){let s=this[i].parentNode;for(;s;)e?d(s).is(e)&&t.push(s):t.push(s),s=s.parentNode}return d(p(t))},closest:function(e){let t=this;return void 0===e?new l([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){const t=[];for(let i=0;i<this.length;i+=1){const s=this[i].querySelectorAll(e);for(let e=0;e<s.length;e+=1)t.push(s[e])}return new l(t)},children:function(e){const t=[];for(let i=0;i<this.length;i+=1){const s=this[i].childNodes;for(let i=0;i<s.length;i+=1)e?1===s[i].nodeType&&d(s[i]).is(e)&&t.push(s[i]):1===s[i].nodeType&&t.push(s[i])}return new l(p(t))},filter:function(e){const t=[],i=this;for(let s=0;s<i.length;s+=1)e.call(i[s],s,i[s])&&t.push(i[s]);return new l(t)},remove:function(){for(let e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this},add:function(...e){const t=this;let i,s;for(i=0;i<e.length;i+=1){const a=d(e[i]);for(s=0;s<a.length;s+=1)t[t.length]=a[s],t.length+=1}return t},styles:function(){return this[0]?o.getComputedStyle(this[0],null):{}}};Object.keys(c).forEach(e=>{d.fn[e]=d.fn[e]||c[e]});const u={deleteProps(e){const t=e;Object.keys(t).forEach(e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}})},nextTick:(e,t=0)=>setTimeout(e,t),now:()=>Date.now(),getTranslate(e,t="x"){let i,s,a;const n=o.getComputedStyle(e,null);return o.WebKitCSSMatrix?(s=n.transform||n.webkitTransform,s.split(",").length>6&&(s=s.split(", ").map(e=>e.replace(",",".")).join(", ")),a=new o.WebKitCSSMatrix("none"===s?"":s)):(a=n.MozTransform||n.OTransform||n.MsTransform||n.msTransform||n.transform||n.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),i=a.toString().split(",")),"x"===t&&(s=o.WebKitCSSMatrix?a.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(s=o.WebKitCSSMatrix?a.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),s||0},parseUrlQuery(e){const t={};let i,s,a,n,r=e||o.location.href;if("string"==typeof r&&r.length)for(r=r.indexOf("?")>-1?r.replace(/\S*\?/,""):"",s=r.split("&").filter(e=>""!==e),n=s.length,i=0;i<n;i+=1)a=s[i].replace(/#\S+/g,"").split("="),t[decodeURIComponent(a[0])]=void 0===a[1]?void 0:decodeURIComponent(a[1])||"";return t},isObject:e=>"object"==typeof e&&null!==e&&e.constructor&&e.constructor===Object,extend(...e){const t=Object(e[0]);for(let i=1;i<e.length;i+=1){const s=e[i];if(null!=s){const e=Object.keys(Object(s));for(let i=0,a=e.length;i<a;i+=1){const a=e[i],n=Object.getOwnPropertyDescriptor(s,a);void 0!==n&&n.enumerable&&(u.isObject(t[a])&&u.isObject(s[a])?u.extend(t[a],s[a]):!u.isObject(t[a])&&u.isObject(s[a])?(t[a]={},u.extend(t[a],s[a])):t[a]=s[a])}}}return t}},h={touch:!!("ontouchstart"in o||o.DocumentTouch&&n instanceof o.DocumentTouch),pointerEvents:!!o.PointerEvent&&"maxTouchPoints"in o.navigator&&o.navigator.maxTouchPoints>=0,observer:"MutationObserver"in o||"WebkitMutationObserver"in o,passiveListener:function(){let e=!1;try{const t=Object.defineProperty({},"passive",{get(){e=!0}});o.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:"ongesturestart"in o};class m{constructor(e={}){const t=this;t.params=e,t.eventsListeners={},t.params&&t.params.on&&Object.keys(t.params.on).forEach(e=>{t.on(e,t.params.on[e])})}on(e,t,i){const s=this;if("function"!=typeof t)return s;const a=i?"unshift":"push";return e.split(" ").forEach(e=>{s.eventsListeners[e]||(s.eventsListeners[e]=[]),s.eventsListeners[e][a](t)}),s}once(e,t,i){const s=this;if("function"!=typeof t)return s;function a(...i){s.off(e,a),a.f7proxy&&delete a.f7proxy,t.apply(s,i)}return a.f7proxy=t,s.on(e,a,i)}off(e,t){const i=this;return i.eventsListeners?(e.split(" ").forEach(e=>{void 0===t?i.eventsListeners[e]=[]:i.eventsListeners[e]&&i.eventsListeners[e].length&&i.eventsListeners[e].forEach((s,a)=>{(s===t||s.f7proxy&&s.f7proxy===t)&&i.eventsListeners[e].splice(a,1)})}),i):i}emit(...e){const t=this;if(!t.eventsListeners)return t;let i,s,a;"string"==typeof e[0]||Array.isArray(e[0])?(i=e[0],s=e.slice(1,e.length),a=t):(i=e[0].events,s=e[0].data,a=e[0].context||t);return(Array.isArray(i)?i:i.split(" ")).forEach(e=>{if(t.eventsListeners&&t.eventsListeners[e]){const i=[];t.eventsListeners[e].forEach(e=>{i.push(e)}),i.forEach(e=>{e.apply(a,s)})}}),t}useModulesParams(e){const t=this;t.modules&&Object.keys(t.modules).forEach(i=>{const s=t.modules[i];s.params&&u.extend(e,s.params)})}useModules(e={}){const t=this;t.modules&&Object.keys(t.modules).forEach(i=>{const s=t.modules[i],a=e[i]||{};s.instance&&Object.keys(s.instance).forEach(e=>{const i=s.instance[e];t[e]="function"==typeof i?i.bind(t):i}),s.on&&t.on&&Object.keys(s.on).forEach(e=>{t.on(e,s.on[e])}),s.create&&s.create.bind(t)(a)})}static set components(e){this.use&&this.use(e)}static installModule(e,...t){const i=this;i.prototype.modules||(i.prototype.modules={});const s=e.name||`${Object.keys(i.prototype.modules).length}_${u.now()}`;return i.prototype.modules[s]=e,e.proto&&Object.keys(e.proto).forEach(t=>{i.prototype[t]=e.proto[t]}),e.static&&Object.keys(e.static).forEach(t=>{i[t]=e.static[t]}),e.install&&e.install.apply(i,t),i}static use(e,...t){const i=this;return Array.isArray(e)?(e.forEach(e=>i.installModule(e)),i):i.installModule(e,...t)}}var f={updateSize:function(){const e=this;let t,i;const s=e.$el;t=void 0!==e.params.width?e.params.width:s[0].clientWidth,i=void 0!==e.params.height?e.params.height:s[0].clientHeight,0===t&&e.isHorizontal()||0===i&&e.isVertical()||(t=t-parseInt(s.css("padding-left"),10)-parseInt(s.css("padding-right"),10),i=i-parseInt(s.css("padding-top"),10)-parseInt(s.css("padding-bottom"),10),u.extend(e,{width:t,height:i,size:e.isHorizontal()?t:i}))},updateSlides:function(){const e=this,t=e.params,{$wrapperEl:i,size:s,rtlTranslate:a,wrongRTL:n}=e,r=e.virtual&&t.virtual.enabled,l=r?e.virtual.slides.length:e.slides.length,d=i.children("."+e.params.slideClass),p=r?e.virtual.slides.length:d.length;let c=[];const h=[],m=[];function f(e){return!t.cssMode||e!==d.length-1}let g=t.slidesOffsetBefore;"function"==typeof g&&(g=t.slidesOffsetBefore.call(e));let v=t.slidesOffsetAfter;"function"==typeof v&&(v=t.slidesOffsetAfter.call(e));const b=e.snapGrid.length,w=e.snapGrid.length;let x,y,E=t.spaceBetween,T=-g,S=0,C=0;if(void 0===s)return;"string"==typeof E&&E.indexOf("%")>=0&&(E=parseFloat(E.replace("%",""))/100*s),e.virtualSize=-E,a?d.css({marginLeft:"",marginTop:""}):d.css({marginRight:"",marginBottom:""}),t.slidesPerColumn>1&&(x=Math.floor(p/t.slidesPerColumn)===p/e.params.slidesPerColumn?p:Math.ceil(p/t.slidesPerColumn)*t.slidesPerColumn,"auto"!==t.slidesPerView&&"row"===t.slidesPerColumnFill&&(x=Math.max(x,t.slidesPerView*t.slidesPerColumn)));const A=t.slidesPerColumn,M=x/A,k=Math.floor(p/t.slidesPerColumn);for(let i=0;i<p;i+=1){y=0;const a=d.eq(i);if(t.slidesPerColumn>1){let s,n,r;if("row"===t.slidesPerColumnFill&&t.slidesPerGroup>1){const e=Math.floor(i/(t.slidesPerGroup*t.slidesPerColumn)),o=i-t.slidesPerColumn*t.slidesPerGroup*e,l=0===e?t.slidesPerGroup:Math.min(Math.ceil((p-e*A*t.slidesPerGroup)/A),t.slidesPerGroup);r=Math.floor(o/l),n=o-r*l+e*t.slidesPerGroup,s=n+r*x/A,a.css({"-webkit-box-ordinal-group":s,"-moz-box-ordinal-group":s,"-ms-flex-order":s,"-webkit-order":s,order:s})}else"column"===t.slidesPerColumnFill?(n=Math.floor(i/A),r=i-n*A,(n>k||n===k&&r===A-1)&&(r+=1,r>=A&&(r=0,n+=1))):(r=Math.floor(i/M),n=i-r*M);a.css("margin-"+(e.isHorizontal()?"top":"left"),0!==r&&t.spaceBetween&&t.spaceBetween+"px")}if("none"!==a.css("display")){if("auto"===t.slidesPerView){const i=o.getComputedStyle(a[0],null),s=a[0].style.transform,n=a[0].style.webkitTransform;if(s&&(a[0].style.transform="none"),n&&(a[0].style.webkitTransform="none"),t.roundLengths)y=e.isHorizontal()?a.outerWidth(!0):a.outerHeight(!0);else if(e.isHorizontal()){const e=parseFloat(i.getPropertyValue("width")),t=parseFloat(i.getPropertyValue("padding-left")),s=parseFloat(i.getPropertyValue("padding-right")),a=parseFloat(i.getPropertyValue("margin-left")),n=parseFloat(i.getPropertyValue("margin-right")),r=i.getPropertyValue("box-sizing");y=r&&"border-box"===r?e+a+n:e+t+s+a+n}else{const e=parseFloat(i.getPropertyValue("height")),t=parseFloat(i.getPropertyValue("padding-top")),s=parseFloat(i.getPropertyValue("padding-bottom")),a=parseFloat(i.getPropertyValue("margin-top")),n=parseFloat(i.getPropertyValue("margin-bottom")),r=i.getPropertyValue("box-sizing");y=r&&"border-box"===r?e+a+n:e+t+s+a+n}s&&(a[0].style.transform=s),n&&(a[0].style.webkitTransform=n),t.roundLengths&&(y=Math.floor(y))}else y=(s-(t.slidesPerView-1)*E)/t.slidesPerView,t.roundLengths&&(y=Math.floor(y)),d[i]&&(e.isHorizontal()?d[i].style.width=y+"px":d[i].style.height=y+"px");d[i]&&(d[i].swiperSlideSize=y),m.push(y),t.centeredSlides?(T=T+y/2+S/2+E,0===S&&0!==i&&(T=T-s/2-E),0===i&&(T=T-s/2-E),Math.abs(T)<.001&&(T=0),t.roundLengths&&(T=Math.floor(T)),C%t.slidesPerGroup==0&&c.push(T),h.push(T)):(t.roundLengths&&(T=Math.floor(T)),(C-Math.min(e.params.slidesPerGroupSkip,C))%e.params.slidesPerGroup==0&&c.push(T),h.push(T),T=T+y+E),e.virtualSize+=y+E,S=y,C+=1}}let $;if(e.virtualSize=Math.max(e.virtualSize,s)+v,a&&n&&("slide"===t.effect||"coverflow"===t.effect)&&i.css({width:e.virtualSize+t.spaceBetween+"px"}),t.setWrapperSize&&(e.isHorizontal()?i.css({width:e.virtualSize+t.spaceBetween+"px"}):i.css({height:e.virtualSize+t.spaceBetween+"px"})),t.slidesPerColumn>1&&(e.virtualSize=(y+t.spaceBetween)*x,e.virtualSize=Math.ceil(e.virtualSize/t.slidesPerColumn)-t.spaceBetween,e.isHorizontal()?i.css({width:e.virtualSize+t.spaceBetween+"px"}):i.css({height:e.virtualSize+t.spaceBetween+"px"}),t.centeredSlides)){$=[];for(let i=0;i<c.length;i+=1){let s=c[i];t.roundLengths&&(s=Math.floor(s)),c[i]<e.virtualSize+c[0]&&$.push(s)}c=$}if(!t.centeredSlides){$=[];for(let i=0;i<c.length;i+=1){let a=c[i];t.roundLengths&&(a=Math.floor(a)),c[i]<=e.virtualSize-s&&$.push(a)}c=$,Math.floor(e.virtualSize-s)-Math.floor(c[c.length-1])>1&&c.push(e.virtualSize-s)}if(0===c.length&&(c=[0]),0!==t.spaceBetween&&(e.isHorizontal()?a?d.filter(f).css({marginLeft:E+"px"}):d.filter(f).css({marginRight:E+"px"}):d.filter(f).css({marginBottom:E+"px"})),t.centeredSlides&&t.centeredSlidesBounds){let e=0;m.forEach(i=>{e+=i+(t.spaceBetween?t.spaceBetween:0)}),e-=t.spaceBetween;const i=e-s;c=c.map(e=>e<0?-g:e>i?i+v:e)}if(t.centerInsufficientSlides){let e=0;if(m.forEach(i=>{e+=i+(t.spaceBetween?t.spaceBetween:0)}),e-=t.spaceBetween,e<s){const t=(s-e)/2;c.forEach((e,i)=>{c[i]=e-t}),h.forEach((e,i)=>{h[i]=e+t})}}u.extend(e,{slides:d,snapGrid:c,slidesGrid:h,slidesSizesGrid:m}),p!==l&&e.emit("slidesLengthChange"),c.length!==b&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),h.length!==w&&e.emit("slidesGridLengthChange"),(t.watchSlidesProgress||t.watchSlidesVisibility)&&e.updateSlidesOffset()},updateAutoHeight:function(e){const t=this,i=[];let s,a=0;if("number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed),"auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)t.visibleSlides.each((e,t)=>{i.push(t)});else for(s=0;s<Math.ceil(t.params.slidesPerView);s+=1){const e=t.activeIndex+s;if(e>t.slides.length)break;i.push(t.slides.eq(e)[0])}else i.push(t.slides.eq(t.activeIndex)[0]);for(s=0;s<i.length;s+=1)if(void 0!==i[s]){const e=i[s].offsetHeight;a=e>a?e:a}a&&t.$wrapperEl.css("height",a+"px")},updateSlidesOffset:function(){const e=this,t=e.slides;for(let i=0;i<t.length;i+=1)t[i].swiperSlideOffset=e.isHorizontal()?t[i].offsetLeft:t[i].offsetTop},updateSlidesProgress:function(e=this&&this.translate||0){const t=this,i=t.params,{slides:s,rtlTranslate:a}=t;if(0===s.length)return;void 0===s[0].swiperSlideOffset&&t.updateSlidesOffset();let n=-e;a&&(n=e),s.removeClass(i.slideVisibleClass),t.visibleSlidesIndexes=[],t.visibleSlides=[];for(let e=0;e<s.length;e+=1){const r=s[e],o=(n+(i.centeredSlides?t.minTranslate():0)-r.swiperSlideOffset)/(r.swiperSlideSize+i.spaceBetween);if(i.watchSlidesVisibility||i.centeredSlides&&i.autoHeight){const a=-(n-r.swiperSlideOffset),o=a+t.slidesSizesGrid[e];(a>=0&&a<t.size-1||o>1&&o<=t.size||a<=0&&o>=t.size)&&(t.visibleSlides.push(r),t.visibleSlidesIndexes.push(e),s.eq(e).addClass(i.slideVisibleClass))}r.progress=a?-o:o}t.visibleSlides=d(t.visibleSlides)},updateProgress:function(e){const t=this;if(void 0===e){const i=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*i||0}const i=t.params,s=t.maxTranslate()-t.minTranslate();let{progress:a,isBeginning:n,isEnd:r}=t;const o=n,l=r;0===s?(a=0,n=!0,r=!0):(a=(e-t.minTranslate())/s,n=a<=0,r=a>=1),u.extend(t,{progress:a,isBeginning:n,isEnd:r}),(i.watchSlidesProgress||i.watchSlidesVisibility||i.centeredSlides&&i.autoHeight)&&t.updateSlidesProgress(e),n&&!o&&t.emit("reachBeginning toEdge"),r&&!l&&t.emit("reachEnd toEdge"),(o&&!n||l&&!r)&&t.emit("fromEdge"),t.emit("progress",a)},updateSlidesClasses:function(){const e=this,{slides:t,params:i,$wrapperEl:s,activeIndex:a,realIndex:n}=e,r=e.virtual&&i.virtual.enabled;let o;t.removeClass(`${i.slideActiveClass} ${i.slideNextClass} ${i.slidePrevClass} ${i.slideDuplicateActiveClass} ${i.slideDuplicateNextClass} ${i.slideDuplicatePrevClass}`),o=r?e.$wrapperEl.find(`.${i.slideClass}[data-swiper-slide-index="${a}"]`):t.eq(a),o.addClass(i.slideActiveClass),i.loop&&(o.hasClass(i.slideDuplicateClass)?s.children(`.${i.slideClass}:not(.${i.slideDuplicateClass})[data-swiper-slide-index="${n}"]`).addClass(i.slideDuplicateActiveClass):s.children(`.${i.slideClass}.${i.slideDuplicateClass}[data-swiper-slide-index="${n}"]`).addClass(i.slideDuplicateActiveClass));let l=o.nextAll("."+i.slideClass).eq(0).addClass(i.slideNextClass);i.loop&&0===l.length&&(l=t.eq(0),l.addClass(i.slideNextClass));let d=o.prevAll("."+i.slideClass).eq(0).addClass(i.slidePrevClass);i.loop&&0===d.length&&(d=t.eq(-1),d.addClass(i.slidePrevClass)),i.loop&&(l.hasClass(i.slideDuplicateClass)?s.children(`.${i.slideClass}:not(.${i.slideDuplicateClass})[data-swiper-slide-index="${l.attr("data-swiper-slide-index")}"]`).addClass(i.slideDuplicateNextClass):s.children(`.${i.slideClass}.${i.slideDuplicateClass}[data-swiper-slide-index="${l.attr("data-swiper-slide-index")}"]`).addClass(i.slideDuplicateNextClass),d.hasClass(i.slideDuplicateClass)?s.children(`.${i.slideClass}:not(.${i.slideDuplicateClass})[data-swiper-slide-index="${d.attr("data-swiper-slide-index")}"]`).addClass(i.slideDuplicatePrevClass):s.children(`.${i.slideClass}.${i.slideDuplicateClass}[data-swiper-slide-index="${d.attr("data-swiper-slide-index")}"]`).addClass(i.slideDuplicatePrevClass))},updateActiveIndex:function(e){const t=this,i=t.rtlTranslate?t.translate:-t.translate,{slidesGrid:s,snapGrid:a,params:n,activeIndex:r,realIndex:o,snapIndex:l}=t;let d,p=e;if(void 0===p){for(let e=0;e<s.length;e+=1)void 0!==s[e+1]?i>=s[e]&&i<s[e+1]-(s[e+1]-s[e])/2?p=e:i>=s[e]&&i<s[e+1]&&(p=e+1):i>=s[e]&&(p=e);n.normalizeSlideIndex&&(p<0||void 0===p)&&(p=0)}if(a.indexOf(i)>=0)d=a.indexOf(i);else{const e=Math.min(n.slidesPerGroupSkip,p);d=e+Math.floor((p-e)/n.slidesPerGroup)}if(d>=a.length&&(d=a.length-1),p===r)return void(d!==l&&(t.snapIndex=d,t.emit("snapIndexChange")));const c=parseInt(t.slides.eq(p).attr("data-swiper-slide-index")||p,10);u.extend(t,{snapIndex:d,realIndex:c,previousIndex:r,activeIndex:p}),t.emit("activeIndexChange"),t.emit("snapIndexChange"),o!==c&&t.emit("realIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&t.emit("slideChange")},updateClickedSlide:function(e){const t=this,i=t.params,s=d(e.target).closest("."+i.slideClass)[0];let a=!1;if(s)for(let e=0;e<t.slides.length;e+=1)t.slides[e]===s&&(a=!0);if(!s||!a)return t.clickedSlide=void 0,void(t.clickedIndex=void 0);t.clickedSlide=s,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt(d(s).attr("data-swiper-slide-index"),10):t.clickedIndex=d(s).index(),i.slideToClickedSlide&&void 0!==t.clickedIndex&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()}};var g={getTranslate:function(e=(this.isHorizontal()?"x":"y")){const{params:t,rtlTranslate:i,translate:s,$wrapperEl:a}=this;if(t.virtualTranslate)return i?-s:s;if(t.cssMode)return s;let n=u.getTranslate(a[0],e);return i&&(n=-n),n||0},setTranslate:function(e,t){const i=this,{rtlTranslate:s,params:a,$wrapperEl:n,wrapperEl:r,progress:o}=i;let l,d=0,p=0;i.isHorizontal()?d=s?-e:e:p=e,a.roundLengths&&(d=Math.floor(d),p=Math.floor(p)),a.cssMode?r[i.isHorizontal()?"scrollLeft":"scrollTop"]=i.isHorizontal()?-d:-p:a.virtualTranslate||n.transform(`translate3d(${d}px, ${p}px, 0px)`),i.previousTranslate=i.translate,i.translate=i.isHorizontal()?d:p;const c=i.maxTranslate()-i.minTranslate();l=0===c?0:(e-i.minTranslate())/c,l!==o&&i.updateProgress(e),i.emit("setTranslate",i.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e=0,t=this.params.speed,i=!0,s=!0,a){const n=this,{params:r,wrapperEl:o}=n;if(n.animating&&r.preventInteractionOnTransition)return!1;const l=n.minTranslate(),d=n.maxTranslate();let p;if(p=s&&e>l?l:s&&e<d?d:e,n.updateProgress(p),r.cssMode){const e=n.isHorizontal();return 0===t?o[e?"scrollLeft":"scrollTop"]=-p:o.scrollTo?o.scrollTo({[e?"left":"top"]:-p,behavior:"smooth"}):o[e?"scrollLeft":"scrollTop"]=-p,!0}return 0===t?(n.setTransition(0),n.setTranslate(p),i&&(n.emit("beforeTransitionStart",t,a),n.emit("transitionEnd"))):(n.setTransition(t),n.setTranslate(p),i&&(n.emit("beforeTransitionStart",t,a),n.emit("transitionStart")),n.animating||(n.animating=!0,n.onTranslateToWrapperTransitionEnd||(n.onTranslateToWrapperTransitionEnd=function(e){n&&!n.destroyed&&e.target===this&&(n.$wrapperEl[0].removeEventListener("transitionend",n.onTranslateToWrapperTransitionEnd),n.$wrapperEl[0].removeEventListener("webkitTransitionEnd",n.onTranslateToWrapperTransitionEnd),n.onTranslateToWrapperTransitionEnd=null,delete n.onTranslateToWrapperTransitionEnd,i&&n.emit("transitionEnd"))}),n.$wrapperEl[0].addEventListener("transitionend",n.onTranslateToWrapperTransitionEnd),n.$wrapperEl[0].addEventListener("webkitTransitionEnd",n.onTranslateToWrapperTransitionEnd))),!0}};var v={setTransition:function(e,t){const i=this;i.params.cssMode||i.$wrapperEl.transition(e),i.emit("setTransition",e,t)},transitionStart:function(e=!0,t){const i=this,{activeIndex:s,params:a,previousIndex:n}=i;if(a.cssMode)return;a.autoHeight&&i.updateAutoHeight();let r=t;if(r||(r=s>n?"next":s<n?"prev":"reset"),i.emit("transitionStart"),e&&s!==n){if("reset"===r)return void i.emit("slideResetTransitionStart");i.emit("slideChangeTransitionStart"),"next"===r?i.emit("slideNextTransitionStart"):i.emit("slidePrevTransitionStart")}},transitionEnd:function(e=!0,t){const i=this,{activeIndex:s,previousIndex:a,params:n}=i;if(i.animating=!1,n.cssMode)return;i.setTransition(0);let r=t;if(r||(r=s>a?"next":s<a?"prev":"reset"),i.emit("transitionEnd"),e&&s!==a){if("reset"===r)return void i.emit("slideResetTransitionEnd");i.emit("slideChangeTransitionEnd"),"next"===r?i.emit("slideNextTransitionEnd"):i.emit("slidePrevTransitionEnd")}}};var b={slideTo:function(e=0,t=this.params.speed,i=!0,s){const a=this;let n=e;n<0&&(n=0);const{params:r,snapGrid:o,slidesGrid:l,previousIndex:d,activeIndex:p,rtlTranslate:c,wrapperEl:u}=a;if(a.animating&&r.preventInteractionOnTransition)return!1;const h=Math.min(a.params.slidesPerGroupSkip,n);let m=h+Math.floor((n-h)/a.params.slidesPerGroup);m>=o.length&&(m=o.length-1),(p||r.initialSlide||0)===(d||0)&&i&&a.emit("beforeSlideChangeStart");const f=-o[m];if(a.updateProgress(f),r.normalizeSlideIndex)for(let e=0;e<l.length;e+=1)-Math.floor(100*f)>=Math.floor(100*l[e])&&(n=e);if(a.initialized&&n!==p){if(!a.allowSlideNext&&f<a.translate&&f<a.minTranslate())return!1;if(!a.allowSlidePrev&&f>a.translate&&f>a.maxTranslate()&&(p||0)!==n)return!1}let g;if(g=n>p?"next":n<p?"prev":"reset",c&&-f===a.translate||!c&&f===a.translate)return a.updateActiveIndex(n),r.autoHeight&&a.updateAutoHeight(),a.updateSlidesClasses(),"slide"!==r.effect&&a.setTranslate(f),"reset"!==g&&(a.transitionStart(i,g),a.transitionEnd(i,g)),!1;if(r.cssMode){const e=a.isHorizontal();let i=-f;return c&&(i=u.scrollWidth-u.offsetWidth-i),0===t?u[e?"scrollLeft":"scrollTop"]=i:u.scrollTo?u.scrollTo({[e?"left":"top"]:i,behavior:"smooth"}):u[e?"scrollLeft":"scrollTop"]=i,!0}return 0===t?(a.setTransition(0),a.setTranslate(f),a.updateActiveIndex(n),a.updateSlidesClasses(),a.emit("beforeTransitionStart",t,s),a.transitionStart(i,g),a.transitionEnd(i,g)):(a.setTransition(t),a.setTranslate(f),a.updateActiveIndex(n),a.updateSlidesClasses(),a.emit("beforeTransitionStart",t,s),a.transitionStart(i,g),a.animating||(a.animating=!0,a.onSlideToWrapperTransitionEnd||(a.onSlideToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.$wrapperEl[0].removeEventListener("transitionend",a.onSlideToWrapperTransitionEnd),a.$wrapperEl[0].removeEventListener("webkitTransitionEnd",a.onSlideToWrapperTransitionEnd),a.onSlideToWrapperTransitionEnd=null,delete a.onSlideToWrapperTransitionEnd,a.transitionEnd(i,g))}),a.$wrapperEl[0].addEventListener("transitionend",a.onSlideToWrapperTransitionEnd),a.$wrapperEl[0].addEventListener("webkitTransitionEnd",a.onSlideToWrapperTransitionEnd))),!0},slideToLoop:function(e=0,t=this.params.speed,i=!0,s){const a=this;let n=e;return a.params.loop&&(n+=a.loopedSlides),a.slideTo(n,t,i,s)},slideNext:function(e=this.params.speed,t=!0,i){const s=this,{params:a,animating:n}=s,r=s.activeIndex<a.slidesPerGroupSkip?1:a.slidesPerGroup;if(a.loop){if(n)return!1;s.loopFix(),s._clientLeft=s.$wrapperEl[0].clientLeft}return s.slideTo(s.activeIndex+r,e,t,i)},slidePrev:function(e=this.params.speed,t=!0,i){const s=this,{params:a,animating:n,snapGrid:r,slidesGrid:o,rtlTranslate:l}=s;if(a.loop){if(n)return!1;s.loopFix(),s._clientLeft=s.$wrapperEl[0].clientLeft}function d(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const p=d(l?s.translate:-s.translate),c=r.map(e=>d(e));o.map(e=>d(e)),r[c.indexOf(p)];let u,h=r[c.indexOf(p)-1];return void 0===h&&a.cssMode&&r.forEach(e=>{!h&&p>=e&&(h=e)}),void 0!==h&&(u=o.indexOf(h),u<0&&(u=s.activeIndex-1)),s.slideTo(u,e,t,i)},slideReset:function(e=this.params.speed,t=!0,i){return this.slideTo(this.activeIndex,e,t,i)},slideToClosest:function(e=this.params.speed,t=!0,i,s=.5){const a=this;let n=a.activeIndex;const r=Math.min(a.params.slidesPerGroupSkip,n),o=r+Math.floor((n-r)/a.params.slidesPerGroup),l=a.rtlTranslate?a.translate:-a.translate;if(l>=a.snapGrid[o]){const e=a.snapGrid[o];l-e>(a.snapGrid[o+1]-e)*s&&(n+=a.params.slidesPerGroup)}else{const e=a.snapGrid[o-1];l-e<=(a.snapGrid[o]-e)*s&&(n-=a.params.slidesPerGroup)}return n=Math.max(n,0),n=Math.min(n,a.slidesGrid.length-1),a.slideTo(n,e,t,i)},slideToClickedSlide:function(){const e=this,{params:t,$wrapperEl:i}=e,s="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let a,n=e.clickedIndex;if(t.loop){if(e.animating)return;a=parseInt(d(e.clickedSlide).attr("data-swiper-slide-index"),10),t.centeredSlides?n<e.loopedSlides-s/2||n>e.slides.length-e.loopedSlides+s/2?(e.loopFix(),n=i.children(`.${t.slideClass}[data-swiper-slide-index="${a}"]:not(.${t.slideDuplicateClass})`).eq(0).index(),u.nextTick(()=>{e.slideTo(n)})):e.slideTo(n):n>e.slides.length-s?(e.loopFix(),n=i.children(`.${t.slideClass}[data-swiper-slide-index="${a}"]:not(.${t.slideDuplicateClass})`).eq(0).index(),u.nextTick(()=>{e.slideTo(n)})):e.slideTo(n)}else e.slideTo(n)}};var w={loopCreate:function(){const e=this,{params:t,$wrapperEl:i}=e;i.children(`.${t.slideClass}.${t.slideDuplicateClass}`).remove();let s=i.children("."+t.slideClass);if(t.loopFillGroupWithBlank){const e=t.slidesPerGroup-s.length%t.slidesPerGroup;if(e!==t.slidesPerGroup){for(let s=0;s<e;s+=1){const e=d(n.createElement("div")).addClass(`${t.slideClass} ${t.slideBlankClass}`);i.append(e)}s=i.children("."+t.slideClass)}}"auto"!==t.slidesPerView||t.loopedSlides||(t.loopedSlides=s.length),e.loopedSlides=Math.ceil(parseFloat(t.loopedSlides||t.slidesPerView,10)),e.loopedSlides+=t.loopAdditionalSlides,e.loopedSlides>s.length&&(e.loopedSlides=s.length);const a=[],r=[];s.each((t,i)=>{const n=d(i);t<e.loopedSlides&&r.push(i),t<s.length&&t>=s.length-e.loopedSlides&&a.push(i),n.attr("data-swiper-slide-index",t)});for(let e=0;e<r.length;e+=1)i.append(d(r[e].cloneNode(!0)).addClass(t.slideDuplicateClass));for(let e=a.length-1;e>=0;e-=1)i.prepend(d(a[e].cloneNode(!0)).addClass(t.slideDuplicateClass))},loopFix:function(){const e=this;e.emit("beforeLoopFix");const{activeIndex:t,slides:i,loopedSlides:s,allowSlidePrev:a,allowSlideNext:n,snapGrid:r,rtlTranslate:o}=e;let l;e.allowSlidePrev=!0,e.allowSlideNext=!0;const d=-r[t]-e.getTranslate();if(t<s){l=i.length-3*s+t,l+=s;e.slideTo(l,0,!1,!0)&&0!==d&&e.setTranslate((o?-e.translate:e.translate)-d)}else if(t>=i.length-s){l=-i.length+t+s,l+=s;e.slideTo(l,0,!1,!0)&&0!==d&&e.setTranslate((o?-e.translate:e.translate)-d)}e.allowSlidePrev=a,e.allowSlideNext=n,e.emit("loopFix")},loopDestroy:function(){const{$wrapperEl:e,params:t,slides:i}=this;e.children(`.${t.slideClass}.${t.slideDuplicateClass},.${t.slideClass}.${t.slideBlankClass}`).remove(),i.removeAttr("data-swiper-slide-index")}};var x={setGrabCursor:function(e){if(h.touch||!this.params.simulateTouch||this.params.watchOverflow&&this.isLocked||this.params.cssMode)return;const t=this.el;t.style.cursor="move",t.style.cursor=e?"-webkit-grabbing":"-webkit-grab",t.style.cursor=e?"-moz-grabbin":"-moz-grab",t.style.cursor=e?"grabbing":"grab"},unsetGrabCursor:function(){h.touch||this.params.watchOverflow&&this.isLocked||this.params.cssMode||(this.el.style.cursor="")}};var y={appendSlide:function(e){const t=this,{$wrapperEl:i,params:s}=t;if(s.loop&&t.loopDestroy(),"object"==typeof e&&"length"in e)for(let t=0;t<e.length;t+=1)e[t]&&i.append(e[t]);else i.append(e);s.loop&&t.loopCreate(),s.observer&&h.observer||t.update()},prependSlide:function(e){const t=this,{params:i,$wrapperEl:s,activeIndex:a}=t;i.loop&&t.loopDestroy();let n=a+1;if("object"==typeof e&&"length"in e){for(let t=0;t<e.length;t+=1)e[t]&&s.prepend(e[t]);n=a+e.length}else s.prepend(e);i.loop&&t.loopCreate(),i.observer&&h.observer||t.update(),t.slideTo(n,0,!1)},addSlide:function(e,t){const i=this,{$wrapperEl:s,params:a,activeIndex:n}=i;let r=n;a.loop&&(r-=i.loopedSlides,i.loopDestroy(),i.slides=s.children("."+a.slideClass));const o=i.slides.length;if(e<=0)return void i.prependSlide(t);if(e>=o)return void i.appendSlide(t);let l=r>e?r+1:r;const d=[];for(let t=o-1;t>=e;t-=1){const e=i.slides.eq(t);e.remove(),d.unshift(e)}if("object"==typeof t&&"length"in t){for(let e=0;e<t.length;e+=1)t[e]&&s.append(t[e]);l=r>e?r+t.length:r}else s.append(t);for(let e=0;e<d.length;e+=1)s.append(d[e]);a.loop&&i.loopCreate(),a.observer&&h.observer||i.update(),a.loop?i.slideTo(l+i.loopedSlides,0,!1):i.slideTo(l,0,!1)},removeSlide:function(e){const t=this,{params:i,$wrapperEl:s,activeIndex:a}=t;let n=a;i.loop&&(n-=t.loopedSlides,t.loopDestroy(),t.slides=s.children("."+i.slideClass));let r,o=n;if("object"==typeof e&&"length"in e){for(let i=0;i<e.length;i+=1)r=e[i],t.slides[r]&&t.slides.eq(r).remove(),r<o&&(o-=1);o=Math.max(o,0)}else r=e,t.slides[r]&&t.slides.eq(r).remove(),r<o&&(o-=1),o=Math.max(o,0);i.loop&&t.loopCreate(),i.observer&&h.observer||t.update(),i.loop?t.slideTo(o+t.loopedSlides,0,!1):t.slideTo(o,0,!1)},removeAllSlides:function(){const e=this,t=[];for(let i=0;i<e.slides.length;i+=1)t.push(i);e.removeSlide(t)}};const E=function(){const e=o.navigator.platform,t=o.navigator.userAgent,i={ios:!1,android:!1,androidChrome:!1,desktop:!1,iphone:!1,ipod:!1,ipad:!1,edge:!1,ie:!1,firefox:!1,macos:!1,windows:!1,cordova:!(!o.cordova&&!o.phonegap),phonegap:!(!o.cordova&&!o.phonegap),electron:!1},s=o.screen.width,a=o.screen.height,n=t.match(/(Android);?[\s\/]+([\d.]+)?/);let r=t.match(/(iPad).*OS\s([\d_]+)/);const l=t.match(/(iPod)(.*OS\s([\d_]+))?/),d=!r&&t.match(/(iPhone\sOS|iOS)\s([\d_]+)/),p=t.indexOf("MSIE ")>=0||t.indexOf("Trident/")>=0,c=t.indexOf("Edge/")>=0,u=t.indexOf("Gecko/")>=0&&t.indexOf("Firefox/")>=0,m="Win32"===e,f=t.toLowerCase().indexOf("electron")>=0;let g="MacIntel"===e;return!r&&g&&h.touch&&(1024===s&&1366===a||834===s&&1194===a||834===s&&1112===a||768===s&&1024===a)&&(r=t.match(/(Version)\/([\d.]+)/),g=!1),i.ie=p,i.edge=c,i.firefox=u,n&&!m&&(i.os="android",i.osVersion=n[2],i.android=!0,i.androidChrome=t.toLowerCase().indexOf("chrome")>=0),(r||d||l)&&(i.os="ios",i.ios=!0),d&&!l&&(i.osVersion=d[2].replace(/_/g,"."),i.iphone=!0),r&&(i.osVersion=r[2].replace(/_/g,"."),i.ipad=!0),l&&(i.osVersion=l[3]?l[3].replace(/_/g,"."):null,i.ipod=!0),i.ios&&i.osVersion&&t.indexOf("Version/")>=0&&"10"===i.osVersion.split(".")[0]&&(i.osVersion=t.toLowerCase().split("version/")[1].split(" ")[0]),i.webView=!(!(d||r||l)||!t.match(/.*AppleWebKit(?!.*Safari)/i)&&!o.navigator.standalone)||o.matchMedia&&o.matchMedia("(display-mode: standalone)").matches,i.webview=i.webView,i.standalone=i.webView,i.desktop=!(i.ios||i.android)||f,i.desktop&&(i.electron=f,i.macos=g,i.windows=m,i.macos&&(i.os="macos"),i.windows&&(i.os="windows")),i.pixelRatio=o.devicePixelRatio||1,i}();function T(e){const t=this,i=t.touchEventsData,{params:s,touches:a}=t;if(t.animating&&s.preventInteractionOnTransition)return;let r=e;r.originalEvent&&(r=r.originalEvent);const l=d(r.target);if("wrapper"===s.touchEventsTarget&&!l.closest(t.wrapperEl).length)return;if(i.isTouchEvent="touchstart"===r.type,!i.isTouchEvent&&"which"in r&&3===r.which)return;if(!i.isTouchEvent&&"button"in r&&r.button>0)return;if(i.isTouched&&i.isMoved)return;if(s.noSwiping&&l.closest(s.noSwipingSelector?s.noSwipingSelector:"."+s.noSwipingClass)[0])return void(t.allowClick=!0);if(s.swipeHandler&&!l.closest(s.swipeHandler)[0])return;a.currentX="touchstart"===r.type?r.targetTouches[0].pageX:r.pageX,a.currentY="touchstart"===r.type?r.targetTouches[0].pageY:r.pageY;const p=a.currentX,c=a.currentY,h=s.edgeSwipeDetection||s.iOSEdgeSwipeDetection,m=s.edgeSwipeThreshold||s.iOSEdgeSwipeThreshold;if(!h||!(p<=m||p>=o.screen.width-m)){if(u.extend(i,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),a.startX=p,a.startY=c,i.touchStartTime=u.now(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,s.threshold>0&&(i.allowThresholdMove=!1),"touchstart"!==r.type){let e=!0;l.is(i.formElements)&&(e=!1),n.activeElement&&d(n.activeElement).is(i.formElements)&&n.activeElement!==l[0]&&n.activeElement.blur();const a=e&&t.allowTouchMove&&s.touchStartPreventDefault;(s.touchStartForcePreventDefault||a)&&r.preventDefault()}t.emit("touchStart",r)}}function S(e){const t=this,i=t.touchEventsData,{params:s,touches:a,rtlTranslate:r}=t;let o=e;if(o.originalEvent&&(o=o.originalEvent),!i.isTouched)return void(i.startMoving&&i.isScrolling&&t.emit("touchMoveOpposite",o));if(i.isTouchEvent&&"touchmove"!==o.type)return;const l="touchmove"===o.type&&o.targetTouches&&(o.targetTouches[0]||o.changedTouches[0]),p="touchmove"===o.type?l.pageX:o.pageX,c="touchmove"===o.type?l.pageY:o.pageY;if(o.preventedByNestedSwiper)return a.startX=p,void(a.startY=c);if(!t.allowTouchMove)return t.allowClick=!1,void(i.isTouched&&(u.extend(a,{startX:p,startY:c,currentX:p,currentY:c}),i.touchStartTime=u.now()));if(i.isTouchEvent&&s.touchReleaseOnEdges&&!s.loop)if(t.isVertical()){if(c<a.startY&&t.translate<=t.maxTranslate()||c>a.startY&&t.translate>=t.minTranslate())return i.isTouched=!1,void(i.isMoved=!1)}else if(p<a.startX&&t.translate<=t.maxTranslate()||p>a.startX&&t.translate>=t.minTranslate())return;if(i.isTouchEvent&&n.activeElement&&o.target===n.activeElement&&d(o.target).is(i.formElements))return i.isMoved=!0,void(t.allowClick=!1);if(i.allowTouchCallbacks&&t.emit("touchMove",o),o.targetTouches&&o.targetTouches.length>1)return;a.currentX=p,a.currentY=c;const h=a.currentX-a.startX,m=a.currentY-a.startY;if(t.params.threshold&&Math.sqrt(h**2+m**2)<t.params.threshold)return;if(void 0===i.isScrolling){let e;t.isHorizontal()&&a.currentY===a.startY||t.isVertical()&&a.currentX===a.startX?i.isScrolling=!1:h*h+m*m>=25&&(e=180*Math.atan2(Math.abs(m),Math.abs(h))/Math.PI,i.isScrolling=t.isHorizontal()?e>s.touchAngle:90-e>s.touchAngle)}if(i.isScrolling&&t.emit("touchMoveOpposite",o),void 0===i.startMoving&&(a.currentX===a.startX&&a.currentY===a.startY||(i.startMoving=!0)),i.isScrolling)return void(i.isTouched=!1);if(!i.startMoving)return;t.allowClick=!1,!s.cssMode&&o.cancelable&&o.preventDefault(),s.touchMoveStopPropagation&&!s.nested&&o.stopPropagation(),i.isMoved||(s.loop&&t.loopFix(),i.startTranslate=t.getTranslate(),t.setTransition(0),t.animating&&t.$wrapperEl.trigger("webkitTransitionEnd transitionend"),i.allowMomentumBounce=!1,!s.grabCursor||!0!==t.allowSlideNext&&!0!==t.allowSlidePrev||t.setGrabCursor(!0),t.emit("sliderFirstMove",o)),t.emit("sliderMove",o),i.isMoved=!0;let f=t.isHorizontal()?h:m;a.diff=f,f*=s.touchRatio,r&&(f=-f),t.swipeDirection=f>0?"prev":"next",i.currentTranslate=f+i.startTranslate;let g=!0,v=s.resistanceRatio;if(s.touchReleaseOnEdges&&(v=0),f>0&&i.currentTranslate>t.minTranslate()?(g=!1,s.resistance&&(i.currentTranslate=t.minTranslate()-1+(-t.minTranslate()+i.startTranslate+f)**v)):f<0&&i.currentTranslate<t.maxTranslate()&&(g=!1,s.resistance&&(i.currentTranslate=t.maxTranslate()+1-(t.maxTranslate()-i.startTranslate-f)**v)),g&&(o.preventedByNestedSwiper=!0),!t.allowSlideNext&&"next"===t.swipeDirection&&i.currentTranslate<i.startTranslate&&(i.currentTranslate=i.startTranslate),!t.allowSlidePrev&&"prev"===t.swipeDirection&&i.currentTranslate>i.startTranslate&&(i.currentTranslate=i.startTranslate),s.threshold>0){if(!(Math.abs(f)>s.threshold||i.allowThresholdMove))return void(i.currentTranslate=i.startTranslate);if(!i.allowThresholdMove)return i.allowThresholdMove=!0,a.startX=a.currentX,a.startY=a.currentY,i.currentTranslate=i.startTranslate,void(a.diff=t.isHorizontal()?a.currentX-a.startX:a.currentY-a.startY)}s.followFinger&&!s.cssMode&&((s.freeMode||s.watchSlidesProgress||s.watchSlidesVisibility)&&(t.updateActiveIndex(),t.updateSlidesClasses()),s.freeMode&&(0===i.velocities.length&&i.velocities.push({position:a[t.isHorizontal()?"startX":"startY"],time:i.touchStartTime}),i.velocities.push({position:a[t.isHorizontal()?"currentX":"currentY"],time:u.now()})),t.updateProgress(i.currentTranslate),t.setTranslate(i.currentTranslate))}function C(e){const t=this,i=t.touchEventsData,{params:s,touches:a,rtlTranslate:n,$wrapperEl:r,slidesGrid:o,snapGrid:l}=t;let d=e;if(d.originalEvent&&(d=d.originalEvent),i.allowTouchCallbacks&&t.emit("touchEnd",d),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&s.grabCursor&&t.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);s.grabCursor&&i.isMoved&&i.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const p=u.now(),c=p-i.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(d),t.emit("tap click",d),c<300&&p-i.lastClickTime<300&&t.emit("doubleTap doubleClick",d)),i.lastClickTime=u.now(),u.nextTick(()=>{t.destroyed||(t.allowClick=!0)}),!i.isTouched||!i.isMoved||!t.swipeDirection||0===a.diff||i.currentTranslate===i.startTranslate)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);let h;if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,h=s.followFinger?n?t.translate:-t.translate:-i.currentTranslate,s.cssMode)return;if(s.freeMode){if(h<-t.minTranslate())return void t.slideTo(t.activeIndex);if(h>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(s.freeModeMomentum){if(i.velocities.length>1){const e=i.velocities.pop(),a=i.velocities.pop(),n=e.position-a.position,r=e.time-a.time;t.velocity=n/r,t.velocity/=2,Math.abs(t.velocity)<s.freeModeMinimumVelocity&&(t.velocity=0),(r>150||u.now()-e.time>300)&&(t.velocity=0)}else t.velocity=0;t.velocity*=s.freeModeMomentumVelocityRatio,i.velocities.length=0;let e=1e3*s.freeModeMomentumRatio;const a=t.velocity*e;let o=t.translate+a;n&&(o=-o);let d,p=!1;const c=20*Math.abs(t.velocity)*s.freeModeMomentumBounceRatio;let h;if(o<t.maxTranslate())s.freeModeMomentumBounce?(o+t.maxTranslate()<-c&&(o=t.maxTranslate()-c),d=t.maxTranslate(),p=!0,i.allowMomentumBounce=!0):o=t.maxTranslate(),s.loop&&s.centeredSlides&&(h=!0);else if(o>t.minTranslate())s.freeModeMomentumBounce?(o-t.minTranslate()>c&&(o=t.minTranslate()+c),d=t.minTranslate(),p=!0,i.allowMomentumBounce=!0):o=t.minTranslate(),s.loop&&s.centeredSlides&&(h=!0);else if(s.freeModeSticky){let e;for(let t=0;t<l.length;t+=1)if(l[t]>-o){e=t;break}o=Math.abs(l[e]-o)<Math.abs(l[e-1]-o)||"next"===t.swipeDirection?l[e]:l[e-1],o=-o}if(h&&t.once("transitionEnd",()=>{t.loopFix()}),0!==t.velocity){if(e=n?Math.abs((-o-t.translate)/t.velocity):Math.abs((o-t.translate)/t.velocity),s.freeModeSticky){const i=Math.abs((n?-o:o)-t.translate),a=t.slidesSizesGrid[t.activeIndex];e=i<a?s.speed:i<2*a?1.5*s.speed:2.5*s.speed}}else if(s.freeModeSticky)return void t.slideToClosest();s.freeModeMomentumBounce&&p?(t.updateProgress(d),t.setTransition(e),t.setTranslate(o),t.transitionStart(!0,t.swipeDirection),t.animating=!0,r.transitionEnd(()=>{t&&!t.destroyed&&i.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(s.speed),setTimeout(()=>{t.setTranslate(d),r.transitionEnd(()=>{t&&!t.destroyed&&t.transitionEnd()})},0))})):t.velocity?(t.updateProgress(o),t.setTransition(e),t.setTranslate(o),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,r.transitionEnd(()=>{t&&!t.destroyed&&t.transitionEnd()}))):t.updateProgress(o),t.updateActiveIndex(),t.updateSlidesClasses()}else if(s.freeModeSticky)return void t.slideToClosest();return void((!s.freeModeMomentum||c>=s.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses()))}let m=0,f=t.slidesSizesGrid[0];for(let e=0;e<o.length;e+=e<s.slidesPerGroupSkip?1:s.slidesPerGroup){const t=e<s.slidesPerGroupSkip-1?1:s.slidesPerGroup;void 0!==o[e+t]?h>=o[e]&&h<o[e+t]&&(m=e,f=o[e+t]-o[e]):h>=o[e]&&(m=e,f=o[o.length-1]-o[o.length-2])}const g=(h-o[m])/f,v=m<s.slidesPerGroupSkip-1?1:s.slidesPerGroup;if(c>s.longSwipesMs){if(!s.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(g>=s.longSwipesRatio?t.slideTo(m+v):t.slideTo(m)),"prev"===t.swipeDirection&&(g>1-s.longSwipesRatio?t.slideTo(m+v):t.slideTo(m))}else{if(!s.shortSwipes)return void t.slideTo(t.activeIndex);t.navigation&&(d.target===t.navigation.nextEl||d.target===t.navigation.prevEl)?d.target===t.navigation.nextEl?t.slideTo(m+v):t.slideTo(m):("next"===t.swipeDirection&&t.slideTo(m+v),"prev"===t.swipeDirection&&t.slideTo(m))}}function A(){const e=this,{params:t,el:i}=e;if(i&&0===i.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:s,allowSlidePrev:a,snapGrid:n}=e;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses(),("auto"===t.slidesPerView||t.slidesPerView>1)&&e.isEnd&&!e.isBeginning&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.run(),e.allowSlidePrev=a,e.allowSlideNext=s,e.params.watchOverflow&&n!==e.snapGrid&&e.checkOverflow()}function M(e){const t=this;t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}function k(){const e=this,{wrapperEl:t,rtlTranslate:i}=e;let s;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=i?t.scrollWidth-t.offsetWidth-t.scrollLeft:-t.scrollLeft:e.translate=-t.scrollTop,-0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const a=e.maxTranslate()-e.minTranslate();s=0===a?0:(e.translate-e.minTranslate())/a,s!==e.progress&&e.updateProgress(i?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}let $=!1;function z(){}var P={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,preventInteractionOnTransition:!1,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,slidesPerGroupSkip:0,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0};const L={update:f,translate:g,transition:v,slide:b,loop:w,grabCursor:x,manipulation:y,events:{attachEvents:function(){const e=this,{params:t,touchEvents:i,el:s,wrapperEl:a}=e;e.onTouchStart=T.bind(e),e.onTouchMove=S.bind(e),e.onTouchEnd=C.bind(e),t.cssMode&&(e.onScroll=k.bind(e)),e.onClick=M.bind(e);const r=!!t.nested;if(!h.touch&&h.pointerEvents)s.addEventListener(i.start,e.onTouchStart,!1),n.addEventListener(i.move,e.onTouchMove,r),n.addEventListener(i.end,e.onTouchEnd,!1);else{if(h.touch){const a=!("touchstart"!==i.start||!h.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};s.addEventListener(i.start,e.onTouchStart,a),s.addEventListener(i.move,e.onTouchMove,h.passiveListener?{passive:!1,capture:r}:r),s.addEventListener(i.end,e.onTouchEnd,a),i.cancel&&s.addEventListener(i.cancel,e.onTouchEnd,a),$||(n.addEventListener("touchstart",z),$=!0)}(t.simulateTouch&&!E.ios&&!E.android||t.simulateTouch&&!h.touch&&E.ios)&&(s.addEventListener("mousedown",e.onTouchStart,!1),n.addEventListener("mousemove",e.onTouchMove,r),n.addEventListener("mouseup",e.onTouchEnd,!1))}(t.preventClicks||t.preventClicksPropagation)&&s.addEventListener("click",e.onClick,!0),t.cssMode&&a.addEventListener("scroll",e.onScroll),t.updateOnWindowResize?e.on(E.ios||E.android?"resize orientationchange observerUpdate":"resize observerUpdate",A,!0):e.on("observerUpdate",A,!0)},detachEvents:function(){const e=this,{params:t,touchEvents:i,el:s,wrapperEl:a}=e,r=!!t.nested;if(!h.touch&&h.pointerEvents)s.removeEventListener(i.start,e.onTouchStart,!1),n.removeEventListener(i.move,e.onTouchMove,r),n.removeEventListener(i.end,e.onTouchEnd,!1);else{if(h.touch){const a=!("onTouchStart"!==i.start||!h.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};s.removeEventListener(i.start,e.onTouchStart,a),s.removeEventListener(i.move,e.onTouchMove,r),s.removeEventListener(i.end,e.onTouchEnd,a),i.cancel&&s.removeEventListener(i.cancel,e.onTouchEnd,a)}(t.simulateTouch&&!E.ios&&!E.android||t.simulateTouch&&!h.touch&&E.ios)&&(s.removeEventListener("mousedown",e.onTouchStart,!1),n.removeEventListener("mousemove",e.onTouchMove,r),n.removeEventListener("mouseup",e.onTouchEnd,!1))}(t.preventClicks||t.preventClicksPropagation)&&s.removeEventListener("click",e.onClick,!0),t.cssMode&&a.removeEventListener("scroll",e.onScroll),e.off(E.ios||E.android?"resize orientationchange observerUpdate":"resize observerUpdate",A)}},breakpoints:{setBreakpoint:function(){const e=this,{activeIndex:t,initialized:i,loopedSlides:s=0,params:a,$el:n}=e,r=a.breakpoints;if(!r||r&&0===Object.keys(r).length)return;const o=e.getBreakpoint(r);if(o&&e.currentBreakpoint!==o){const l=o in r?r[o]:void 0;l&&["slidesPerView","spaceBetween","slidesPerGroup","slidesPerGroupSkip","slidesPerColumn"].forEach(e=>{const t=l[e];void 0!==t&&(l[e]="slidesPerView"!==e||"AUTO"!==t&&"auto"!==t?"slidesPerView"===e?parseFloat(t):parseInt(t,10):"auto")});const d=l||e.originalParams,p=a.slidesPerColumn>1,c=d.slidesPerColumn>1;p&&!c?n.removeClass(`${a.containerModifierClass}multirow ${a.containerModifierClass}multirow-column`):!p&&c&&(n.addClass(a.containerModifierClass+"multirow"),"column"===d.slidesPerColumnFill&&n.addClass(a.containerModifierClass+"multirow-column"));const h=d.direction&&d.direction!==a.direction,m=a.loop&&(d.slidesPerView!==a.slidesPerView||h);h&&i&&e.changeDirection(),u.extend(e.params,d),u.extend(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),e.currentBreakpoint=o,m&&i&&(e.loopDestroy(),e.loopCreate(),e.updateSlides(),e.slideTo(t-s+e.loopedSlides,0,!1)),e.emit("breakpoint",d)}},getBreakpoint:function(e){if(!e)return;let t=!1;const i=Object.keys(e).map(e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:o.innerHeight*t,point:e}}return{value:e,point:e}});i.sort((e,t)=>parseInt(e.value,10)-parseInt(t.value,10));for(let e=0;e<i.length;e+=1){const{point:s,value:a}=i[e];a<=o.innerWidth&&(t=s)}return t||"max"}},checkOverflow:{checkOverflow:function(){const e=this,t=e.params,i=e.isLocked,s=e.slides.length>0&&t.slidesOffsetBefore+t.spaceBetween*(e.slides.length-1)+e.slides[0].offsetWidth*e.slides.length;t.slidesOffsetBefore&&t.slidesOffsetAfter&&s?e.isLocked=s<=e.size:e.isLocked=1===e.snapGrid.length,e.allowSlideNext=!e.isLocked,e.allowSlidePrev=!e.isLocked,i!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock"),i&&i!==e.isLocked&&(e.isEnd=!1,e.navigation&&e.navigation.update())}},classes:{addClasses:function(){const{classNames:e,params:t,rtl:i,$el:s}=this,a=[];a.push("initialized"),a.push(t.direction),t.freeMode&&a.push("free-mode"),t.autoHeight&&a.push("autoheight"),i&&a.push("rtl"),t.slidesPerColumn>1&&(a.push("multirow"),"column"===t.slidesPerColumnFill&&a.push("multirow-column")),E.android&&a.push("android"),E.ios&&a.push("ios"),t.cssMode&&a.push("css-mode"),a.forEach(i=>{e.push(t.containerModifierClass+i)}),s.addClass(e.join(" "))},removeClasses:function(){const{$el:e,classNames:t}=this;e.removeClass(t.join(" "))}},images:{loadImage:function(e,t,i,s,a,n){let r;function l(){n&&n()}d(e).parent("picture")[0]||e.complete&&a?l():t?(r=new o.Image,r.onload=l,r.onerror=l,s&&(r.sizes=s),i&&(r.srcset=i),t&&(r.src=t)):l()},preloadImages:function(){const e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(let i=0;i<e.imagesToLoad.length;i+=1){const s=e.imagesToLoad[i];e.loadImage(s,s.currentSrc||s.getAttribute("src"),s.srcset||s.getAttribute("srcset"),s.sizes||s.getAttribute("sizes"),!0,t)}}}},I={};class D extends m{constructor(...e){let t,i;1===e.length&&e[0].constructor&&e[0].constructor===Object?i=e[0]:[t,i]=e,i||(i={}),i=u.extend({},i),t&&!i.el&&(i.el=t),super(i),Object.keys(L).forEach(e=>{Object.keys(L[e]).forEach(t=>{D.prototype[t]||(D.prototype[t]=L[e][t])})});const s=this;void 0===s.modules&&(s.modules={}),Object.keys(s.modules).forEach(e=>{const t=s.modules[e];if(t.params){const e=Object.keys(t.params)[0],s=t.params[e];if("object"!=typeof s||null===s)return;if(!(e in i)||!("enabled"in s))return;!0===i[e]&&(i[e]={enabled:!0}),"object"!=typeof i[e]||"enabled"in i[e]||(i[e].enabled=!0),i[e]||(i[e]={enabled:!1})}});const a=u.extend({},P);s.useModulesParams(a),s.params=u.extend({},a,I,i),s.originalParams=u.extend({},s.params),s.passedParams=u.extend({},i),s.$=d;const n=d(s.params.el);if(t=n[0],!t)return;if(n.length>1){const e=[];return n.each((t,s)=>{const a=u.extend({},i,{el:s});e.push(new D(a))}),e}let r;return t.swiper=s,n.data("swiper",s),t&&t.shadowRoot&&t.shadowRoot.querySelector?(r=d(t.shadowRoot.querySelector("."+s.params.wrapperClass)),r.children=e=>n.children(e)):r=n.children("."+s.params.wrapperClass),u.extend(s,{$el:n,el:t,$wrapperEl:r,wrapperEl:r[0],classNames:[],slides:d(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===s.params.direction,isVertical:()=>"vertical"===s.params.direction,rtl:"rtl"===t.dir.toLowerCase()||"rtl"===n.css("direction"),rtlTranslate:"horizontal"===s.params.direction&&("rtl"===t.dir.toLowerCase()||"rtl"===n.css("direction")),wrongRTL:"-webkit-box"===r.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:s.params.allowSlideNext,allowSlidePrev:s.params.allowSlidePrev,touchEvents:function(){const e=["touchstart","touchmove","touchend","touchcancel"];let t=["mousedown","mousemove","mouseup"];return h.pointerEvents&&(t=["pointerdown","pointermove","pointerup"]),s.touchEventsTouch={start:e[0],move:e[1],end:e[2],cancel:e[3]},s.touchEventsDesktop={start:t[0],move:t[1],end:t[2]},h.touch||!s.params.simulateTouch?s.touchEventsTouch:s.touchEventsDesktop}(),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video, label",lastClickTime:u.now(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:s.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),s.useModules(),s.params.init&&s.init(),s}slidesPerViewDynamic(){const{params:e,slides:t,slidesGrid:i,size:s,activeIndex:a}=this;let n=1;if(e.centeredSlides){let e,i=t[a].swiperSlideSize;for(let r=a+1;r<t.length;r+=1)t[r]&&!e&&(i+=t[r].swiperSlideSize,n+=1,i>s&&(e=!0));for(let r=a-1;r>=0;r-=1)t[r]&&!e&&(i+=t[r].swiperSlideSize,n+=1,i>s&&(e=!0))}else for(let e=a+1;e<t.length;e+=1)i[e]-i[a]<s&&(n+=1);return n}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:i}=e;function s(){const t=e.rtlTranslate?-1*e.translate:e.translate,i=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(i),e.updateActiveIndex(),e.updateSlidesClasses()}let a;i.breakpoints&&e.setBreakpoint(),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.params.freeMode?(s(),e.params.autoHeight&&e.updateAutoHeight()):(a=("auto"===e.params.slidesPerView||e.params.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0),a||s()),i.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t=!0){const i=this,s=i.params.direction;return e||(e="horizontal"===s?"vertical":"horizontal"),e===s||"horizontal"!==e&&"vertical"!==e||(i.$el.removeClass(`${i.params.containerModifierClass}${s}`).addClass(`${i.params.containerModifierClass}${e}`),i.params.direction=e,i.slides.each((t,i)=>{"vertical"===e?i.style.width="":i.style.height=""}),i.emit("changeDirection"),t&&i.update()),i}init(){const e=this;e.initialized||(e.emit("beforeInit"),e.params.breakpoints&&e.setBreakpoint(),e.addClasses(),e.params.loop&&e.loopCreate(),e.updateSize(),e.updateSlides(),e.params.watchOverflow&&e.checkOverflow(),e.params.grabCursor&&e.setGrabCursor(),e.params.preloadImages&&e.preloadImages(),e.params.loop?e.slideTo(e.params.initialSlide+e.loopedSlides,0,e.params.runCallbacksOnInit):e.slideTo(e.params.initialSlide,0,e.params.runCallbacksOnInit),e.attachEvents(),e.initialized=!0,e.emit("init"))}destroy(e=!0,t=!0){const i=this,{params:s,$el:a,$wrapperEl:n,slides:r}=i;return void 0===i.params||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),s.loop&&i.loopDestroy(),t&&(i.removeClasses(),a.removeAttr("style"),n.removeAttr("style"),r&&r.length&&r.removeClass([s.slideVisibleClass,s.slideActiveClass,s.slideNextClass,s.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")),i.emit("destroy"),Object.keys(i.eventsListeners).forEach(e=>{i.off(e)}),!1!==e&&(i.$el[0].swiper=null,i.$el.data("swiper",null),u.deleteProps(i)),i.destroyed=!0),null}static extendDefaults(e){u.extend(I,e)}static get extendedDefaults(){return I}static get defaults(){return P}static get Class(){return m}static get $(){return d}}var O={name:"device",proto:{device:E},static:{device:E}},B={name:"support",proto:{support:h},static:{support:h}};const G={isEdge:!!o.navigator.userAgent.match(/Edge/g),isSafari:function(){const e=o.navigator.userAgent.toLowerCase();return e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0}(),isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(o.navigator.userAgent)};var Y={name:"browser",proto:{browser:G},static:{browser:G}},N={name:"resize",create(){const e=this;u.extend(e,{resize:{resizeHandler(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init(){o.addEventListener("resize",this.resize.resizeHandler),o.addEventListener("orientationchange",this.resize.orientationChangeHandler)},destroy(){o.removeEventListener("resize",this.resize.resizeHandler),o.removeEventListener("orientationchange",this.resize.orientationChangeHandler)}}};const H={func:o.MutationObserver||o.WebkitMutationObserver,attach(e,t={}){const i=this,s=new(0,H.func)(e=>{if(1===e.length)return void i.emit("observerUpdate",e[0]);const t=function(){i.emit("observerUpdate",e[0])};o.requestAnimationFrame?o.requestAnimationFrame(t):o.setTimeout(t,0)});s.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),i.observer.observers.push(s)},init(){const e=this;if(h.observer&&e.params.observer){if(e.params.observeParents){const t=e.$el.parents();for(let i=0;i<t.length;i+=1)e.observer.attach(t[i])}e.observer.attach(e.$el[0],{childList:e.params.observeSlideChildren}),e.observer.attach(e.$wrapperEl[0],{attributes:!1})}},destroy(){this.observer.observers.forEach(e=>{e.disconnect()}),this.observer.observers=[]}};var j={name:"observer",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create(){u.extend(this,{observer:{init:H.init.bind(this),attach:H.attach.bind(this),destroy:H.destroy.bind(this),observers:[]}})},on:{init(){this.observer.init()},destroy(){this.observer.destroy()}}};const X={update(e){const t=this,{slidesPerView:i,slidesPerGroup:s,centeredSlides:a}=t.params,{addSlidesBefore:n,addSlidesAfter:r}=t.params.virtual,{from:o,to:l,slides:d,slidesGrid:p,renderSlide:c,offset:h}=t.virtual;t.updateActiveIndex();const m=t.activeIndex||0;let f,g,v;f=t.rtlTranslate?"right":t.isHorizontal()?"left":"top",a?(g=Math.floor(i/2)+s+n,v=Math.floor(i/2)+s+r):(g=i+(s-1)+n,v=s+r);const b=Math.max((m||0)-v,0),w=Math.min((m||0)+g,d.length-1),x=(t.slidesGrid[b]||0)-(t.slidesGrid[0]||0);function y(){t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.lazy&&t.params.lazy.enabled&&t.lazy.load()}if(u.extend(t.virtual,{from:b,to:w,offset:x,slidesGrid:t.slidesGrid}),o===b&&l===w&&!e)return t.slidesGrid!==p&&x!==h&&t.slides.css(f,x+"px"),void t.updateProgress();if(t.params.virtual.renderExternal)return t.params.virtual.renderExternal.call(t,{offset:x,from:b,to:w,slides:function(){const e=[];for(let t=b;t<=w;t+=1)e.push(d[t]);return e}()}),void y();const E=[],T=[];if(e)t.$wrapperEl.find("."+t.params.slideClass).remove();else for(let e=o;e<=l;e+=1)(e<b||e>w)&&t.$wrapperEl.find(`.${t.params.slideClass}[data-swiper-slide-index="${e}"]`).remove();for(let t=0;t<d.length;t+=1)t>=b&&t<=w&&(void 0===l||e?T.push(t):(t>l&&T.push(t),t<o&&E.push(t)));T.forEach(e=>{t.$wrapperEl.append(c(d[e],e))}),E.sort((e,t)=>t-e).forEach(e=>{t.$wrapperEl.prepend(c(d[e],e))}),t.$wrapperEl.children(".swiper-slide").css(f,x+"px"),y()},renderSlide(e,t){const i=this,s=i.params.virtual;if(s.cache&&i.virtual.cache[t])return i.virtual.cache[t];const a=s.renderSlide?d(s.renderSlide.call(i,e,t)):d(`<div class="${i.params.slideClass}" data-swiper-slide-index="${t}">${e}</div>`);return a.attr("data-swiper-slide-index")||a.attr("data-swiper-slide-index",t),s.cache&&(i.virtual.cache[t]=a),a},appendSlide(e){const t=this;if("object"==typeof e&&"length"in e)for(let i=0;i<e.length;i+=1)e[i]&&t.virtual.slides.push(e[i]);else t.virtual.slides.push(e);t.virtual.update(!0)},prependSlide(e){const t=this,i=t.activeIndex;let s=i+1,a=1;if(Array.isArray(e)){for(let i=0;i<e.length;i+=1)e[i]&&t.virtual.slides.unshift(e[i]);s=i+e.length,a=e.length}else t.virtual.slides.unshift(e);if(t.params.virtual.cache){const e=t.virtual.cache,i={};Object.keys(e).forEach(t=>{const s=e[t],n=s.attr("data-swiper-slide-index");n&&s.attr("data-swiper-slide-index",parseInt(n,10)+1),i[parseInt(t,10)+a]=s}),t.virtual.cache=i}t.virtual.update(!0),t.slideTo(s,0)},removeSlide(e){const t=this;if(null==e)return;let i=t.activeIndex;if(Array.isArray(e))for(let s=e.length-1;s>=0;s-=1)t.virtual.slides.splice(e[s],1),t.params.virtual.cache&&delete t.virtual.cache[e[s]],e[s]<i&&(i-=1),i=Math.max(i,0);else t.virtual.slides.splice(e,1),t.params.virtual.cache&&delete t.virtual.cache[e],e<i&&(i-=1),i=Math.max(i,0);t.virtual.update(!0),t.slideTo(i,0)},removeAllSlides(){const e=this;e.virtual.slides=[],e.params.virtual.cache&&(e.virtual.cache={}),e.virtual.update(!0),e.slideTo(0,0)}};var F={name:"virtual",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,addSlidesBefore:0,addSlidesAfter:0}},create(){u.extend(this,{virtual:{update:X.update.bind(this),appendSlide:X.appendSlide.bind(this),prependSlide:X.prependSlide.bind(this),removeSlide:X.removeSlide.bind(this),removeAllSlides:X.removeAllSlides.bind(this),renderSlide:X.renderSlide.bind(this),slides:this.params.virtual.slides,cache:{}}})},on:{beforeInit(){const e=this;if(!e.params.virtual.enabled)return;e.classNames.push(e.params.containerModifierClass+"virtual");const t={watchSlidesProgress:!0};u.extend(e.params,t),u.extend(e.originalParams,t),e.params.initialSlide||e.virtual.update()},setTranslate(){this.params.virtual.enabled&&this.virtual.update()}}};const V={handle(e){const t=this,{rtlTranslate:i}=t;let s=e;s.originalEvent&&(s=s.originalEvent);const a=s.keyCode||s.charCode,r=t.params.keyboard.pageUpDown,l=r&&33===a,d=r&&34===a,p=37===a,c=39===a,u=38===a,h=40===a;if(!t.allowSlideNext&&(t.isHorizontal()&&c||t.isVertical()&&h||d))return!1;if(!t.allowSlidePrev&&(t.isHorizontal()&&p||t.isVertical()&&u||l))return!1;if(!(s.shiftKey||s.altKey||s.ctrlKey||s.metaKey||n.activeElement&&n.activeElement.nodeName&&("input"===n.activeElement.nodeName.toLowerCase()||"textarea"===n.activeElement.nodeName.toLowerCase()))){if(t.params.keyboard.onlyInViewport&&(l||d||p||c||u||h)){let e=!1;if(t.$el.parents("."+t.params.slideClass).length>0&&0===t.$el.parents("."+t.params.slideActiveClass).length)return;const s=o.innerWidth,a=o.innerHeight,n=t.$el.offset();i&&(n.left-=t.$el[0].scrollLeft);const r=[[n.left,n.top],[n.left+t.width,n.top],[n.left,n.top+t.height],[n.left+t.width,n.top+t.height]];for(let t=0;t<r.length;t+=1){const i=r[t];i[0]>=0&&i[0]<=s&&i[1]>=0&&i[1]<=a&&(e=!0)}if(!e)return}t.isHorizontal()?((l||d||p||c)&&(s.preventDefault?s.preventDefault():s.returnValue=!1),((d||c)&&!i||(l||p)&&i)&&t.slideNext(),((l||p)&&!i||(d||c)&&i)&&t.slidePrev()):((l||d||u||h)&&(s.preventDefault?s.preventDefault():s.returnValue=!1),(d||h)&&t.slideNext(),(l||u)&&t.slidePrev()),t.emit("keyPress",a)}},enable(){this.keyboard.enabled||(d(n).on("keydown",this.keyboard.handle),this.keyboard.enabled=!0)},disable(){this.keyboard.enabled&&(d(n).off("keydown",this.keyboard.handle),this.keyboard.enabled=!1)}};var q={name:"keyboard",params:{keyboard:{enabled:!1,onlyInViewport:!0,pageUpDown:!0}},create(){u.extend(this,{keyboard:{enabled:!1,enable:V.enable.bind(this),disable:V.disable.bind(this),handle:V.handle.bind(this)}})},on:{init(){const e=this;e.params.keyboard.enabled&&e.keyboard.enable()},destroy(){const e=this;e.keyboard.enabled&&e.keyboard.disable()}}};const R={lastScrollTime:u.now(),lastEventBeforeSnap:void 0,recentWheelEvents:[],event:()=>o.navigator.userAgent.indexOf("firefox")>-1?"DOMMouseScroll":function(){let e="onwheel"in n;if(!e){const t=n.createElement("div");t.setAttribute("onwheel","return;"),e="function"==typeof t.onwheel}return!e&&n.implementation&&n.implementation.hasFeature&&!0!==n.implementation.hasFeature("","")&&(e=n.implementation.hasFeature("Events.wheel","3.0")),e}()?"wheel":"mousewheel",normalize(e){let t=0,i=0,s=0,a=0;return"detail"in e&&(i=e.detail),"wheelDelta"in e&&(i=-e.wheelDelta/120),"wheelDeltaY"in e&&(i=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=i,i=0),s=10*t,a=10*i,"deltaY"in e&&(a=e.deltaY),"deltaX"in e&&(s=e.deltaX),e.shiftKey&&!s&&(s=a,a=0),(s||a)&&e.deltaMode&&(1===e.deltaMode?(s*=40,a*=40):(s*=800,a*=800)),s&&!t&&(t=s<1?-1:1),a&&!i&&(i=a<1?-1:1),{spinX:t,spinY:i,pixelX:s,pixelY:a}},handleMouseEnter(){this.mouseEntered=!0},handleMouseLeave(){this.mouseEntered=!1},handle(e){let t=e;const i=this,s=i.params.mousewheel;i.params.cssMode&&t.preventDefault();let a=i.$el;if("container"!==i.params.mousewheel.eventsTarged&&(a=d(i.params.mousewheel.eventsTarged)),!i.mouseEntered&&!a[0].contains(t.target)&&!s.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);let n=0;const r=i.rtlTranslate?-1:1,o=R.normalize(t);if(s.forceToAxis)if(i.isHorizontal()){if(!(Math.abs(o.pixelX)>Math.abs(o.pixelY)))return!0;n=-o.pixelX*r}else{if(!(Math.abs(o.pixelY)>Math.abs(o.pixelX)))return!0;n=-o.pixelY}else n=Math.abs(o.pixelX)>Math.abs(o.pixelY)?-o.pixelX*r:-o.pixelY;if(0===n)return!0;if(s.invert&&(n=-n),i.params.freeMode){const e={time:u.now(),delta:Math.abs(n),direction:Math.sign(n)},{lastEventBeforeSnap:a}=i.mousewheel,r=a&&e.time<a.time+500&&e.delta<=a.delta&&e.direction===a.direction;if(!r){i.mousewheel.lastEventBeforeSnap=void 0,i.params.loop&&i.loopFix();let a=i.getTranslate()+n*s.sensitivity;const o=i.isBeginning,l=i.isEnd;if(a>=i.minTranslate()&&(a=i.minTranslate()),a<=i.maxTranslate()&&(a=i.maxTranslate()),i.setTransition(0),i.setTranslate(a),i.updateProgress(),i.updateActiveIndex(),i.updateSlidesClasses(),(!o&&i.isBeginning||!l&&i.isEnd)&&i.updateSlidesClasses(),i.params.freeModeSticky){clearTimeout(i.mousewheel.timeout),i.mousewheel.timeout=void 0;const t=i.mousewheel.recentWheelEvents;t.length>=15&&t.shift();const s=t.length?t[t.length-1]:void 0,a=t[0];if(t.push(e),s&&(e.delta>s.delta||e.direction!==s.direction))t.splice(0);else if(t.length>=15&&e.time-a.time<500&&a.delta-e.delta>=1&&e.delta<=6){const s=n>0?.8:.2;i.mousewheel.lastEventBeforeSnap=e,t.splice(0),i.mousewheel.timeout=u.nextTick(()=>{i.slideToClosest(i.params.speed,!0,void 0,s)},0)}i.mousewheel.timeout||(i.mousewheel.timeout=u.nextTick(()=>{i.mousewheel.lastEventBeforeSnap=e,t.splice(0),i.slideToClosest(i.params.speed,!0,void 0,.5)},500))}if(r||i.emit("scroll",t),i.params.autoplay&&i.params.autoplayDisableOnInteraction&&i.autoplay.stop(),a===i.minTranslate()||a===i.maxTranslate())return!0}}else{const t={time:u.now(),delta:Math.abs(n),direction:Math.sign(n),raw:e},s=i.mousewheel.recentWheelEvents;s.length>=2&&s.shift();const a=s.length?s[s.length-1]:void 0;if(s.push(t),a?(t.direction!==a.direction||t.delta>a.delta||t.time>a.time+150)&&i.mousewheel.animateSlider(t):i.mousewheel.animateSlider(t),i.mousewheel.releaseScroll(t))return!0}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},animateSlider(e){const t=this;return e.delta>=6&&u.now()-t.mousewheel.lastScrollTime<60||(e.direction<0?t.isEnd&&!t.params.loop||t.animating||(t.slideNext(),t.emit("scroll",e.raw)):t.isBeginning&&!t.params.loop||t.animating||(t.slidePrev(),t.emit("scroll",e.raw)),t.mousewheel.lastScrollTime=(new o.Date).getTime(),!1)},releaseScroll(e){const t=this,i=t.params.mousewheel;if(e.direction<0){if(t.isEnd&&!t.params.loop&&i.releaseOnEdges)return!0}else if(t.isBeginning&&!t.params.loop&&i.releaseOnEdges)return!0;return!1},enable(){const e=this,t=R.event();if(e.params.cssMode)return e.wrapperEl.removeEventListener(t,e.mousewheel.handle),!0;if(!t)return!1;if(e.mousewheel.enabled)return!1;let i=e.$el;return"container"!==e.params.mousewheel.eventsTarged&&(i=d(e.params.mousewheel.eventsTarged)),i.on("mouseenter",e.mousewheel.handleMouseEnter),i.on("mouseleave",e.mousewheel.handleMouseLeave),i.on(t,e.mousewheel.handle),e.mousewheel.enabled=!0,!0},disable(){const e=this,t=R.event();if(e.params.cssMode)return e.wrapperEl.addEventListener(t,e.mousewheel.handle),!0;if(!t)return!1;if(!e.mousewheel.enabled)return!1;let i=e.$el;return"container"!==e.params.mousewheel.eventsTarged&&(i=d(e.params.mousewheel.eventsTarged)),i.off(t,e.mousewheel.handle),e.mousewheel.enabled=!1,!0}};const W={update(){const e=this,t=e.params.navigation;if(e.params.loop)return;const{$nextEl:i,$prevEl:s}=e.navigation;s&&s.length>0&&(e.isBeginning?s.addClass(t.disabledClass):s.removeClass(t.disabledClass),s[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](t.lockClass)),i&&i.length>0&&(e.isEnd?i.addClass(t.disabledClass):i.removeClass(t.disabledClass),i[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](t.lockClass))},onPrevClick(e){e.preventDefault(),this.isBeginning&&!this.params.loop||this.slidePrev()},onNextClick(e){e.preventDefault(),this.isEnd&&!this.params.loop||this.slideNext()},init(){const e=this,t=e.params.navigation;if(!t.nextEl&&!t.prevEl)return;let i,s;t.nextEl&&(i=d(t.nextEl),e.params.uniqueNavElements&&"string"==typeof t.nextEl&&i.length>1&&1===e.$el.find(t.nextEl).length&&(i=e.$el.find(t.nextEl))),t.prevEl&&(s=d(t.prevEl),e.params.uniqueNavElements&&"string"==typeof t.prevEl&&s.length>1&&1===e.$el.find(t.prevEl).length&&(s=e.$el.find(t.prevEl))),i&&i.length>0&&i.on("click",e.navigation.onNextClick),s&&s.length>0&&s.on("click",e.navigation.onPrevClick),u.extend(e.navigation,{$nextEl:i,nextEl:i&&i[0],$prevEl:s,prevEl:s&&s[0]})},destroy(){const e=this,{$nextEl:t,$prevEl:i}=e.navigation;t&&t.length&&(t.off("click",e.navigation.onNextClick),t.removeClass(e.params.navigation.disabledClass)),i&&i.length&&(i.off("click",e.navigation.onPrevClick),i.removeClass(e.params.navigation.disabledClass))}};const U={update(){const e=this,t=e.rtl,i=e.params.pagination;if(!i.el||!e.pagination.el||!e.pagination.$el||0===e.pagination.$el.length)return;const s=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,a=e.pagination.$el;let n;const r=e.params.loop?Math.ceil((s-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?(n=Math.ceil((e.activeIndex-e.loopedSlides)/e.params.slidesPerGroup),n>s-1-2*e.loopedSlides&&(n-=s-2*e.loopedSlides),n>r-1&&(n-=r),n<0&&"bullets"!==e.params.paginationType&&(n=r+n)):n=void 0!==e.snapIndex?e.snapIndex:e.activeIndex||0,"bullets"===i.type&&e.pagination.bullets&&e.pagination.bullets.length>0){const s=e.pagination.bullets;let r,o,l;if(i.dynamicBullets&&(e.pagination.bulletSize=s.eq(0)[e.isHorizontal()?"outerWidth":"outerHeight"](!0),a.css(e.isHorizontal()?"width":"height",e.pagination.bulletSize*(i.dynamicMainBullets+4)+"px"),i.dynamicMainBullets>1&&void 0!==e.previousIndex&&(e.pagination.dynamicBulletIndex+=n-e.previousIndex,e.pagination.dynamicBulletIndex>i.dynamicMainBullets-1?e.pagination.dynamicBulletIndex=i.dynamicMainBullets-1:e.pagination.dynamicBulletIndex<0&&(e.pagination.dynamicBulletIndex=0)),r=n-e.pagination.dynamicBulletIndex,o=r+(Math.min(s.length,i.dynamicMainBullets)-1),l=(o+r)/2),s.removeClass(`${i.bulletActiveClass} ${i.bulletActiveClass}-next ${i.bulletActiveClass}-next-next ${i.bulletActiveClass}-prev ${i.bulletActiveClass}-prev-prev ${i.bulletActiveClass}-main`),a.length>1)s.each((e,t)=>{const s=d(t),a=s.index();a===n&&s.addClass(i.bulletActiveClass),i.dynamicBullets&&(a>=r&&a<=o&&s.addClass(i.bulletActiveClass+"-main"),a===r&&s.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),a===o&&s.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next"))});else{const t=s.eq(n),a=t.index();if(t.addClass(i.bulletActiveClass),i.dynamicBullets){const t=s.eq(r),n=s.eq(o);for(let e=r;e<=o;e+=1)s.eq(e).addClass(i.bulletActiveClass+"-main");if(e.params.loop)if(a>=s.length-i.dynamicMainBullets){for(let e=i.dynamicMainBullets;e>=0;e-=1)s.eq(s.length-e).addClass(i.bulletActiveClass+"-main");s.eq(s.length-i.dynamicMainBullets-1).addClass(i.bulletActiveClass+"-prev")}else t.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),n.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next");else t.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),n.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next")}}if(i.dynamicBullets){const a=Math.min(s.length,i.dynamicMainBullets+4),n=(e.pagination.bulletSize*a-e.pagination.bulletSize)/2-l*e.pagination.bulletSize,r=t?"right":"left";s.css(e.isHorizontal()?r:"top",n+"px")}}if("fraction"===i.type&&(a.find("."+i.currentClass).text(i.formatFractionCurrent(n+1)),a.find("."+i.totalClass).text(i.formatFractionTotal(r))),"progressbar"===i.type){let t;t=i.progressbarOpposite?e.isHorizontal()?"vertical":"horizontal":e.isHorizontal()?"horizontal":"vertical";const s=(n+1)/r;let o=1,l=1;"horizontal"===t?o=s:l=s,a.find("."+i.progressbarFillClass).transform(`translate3d(0,0,0) scaleX(${o}) scaleY(${l})`).transition(e.params.speed)}"custom"===i.type&&i.renderCustom?(a.html(i.renderCustom(e,n+1,r)),e.emit("paginationRender",e,a[0])):e.emit("paginationUpdate",e,a[0]),a[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](i.lockClass)},render(){const e=this,t=e.params.pagination;if(!t.el||!e.pagination.el||!e.pagination.$el||0===e.pagination.$el.length)return;const i=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,s=e.pagination.$el;let a="";if("bullets"===t.type){const n=e.params.loop?Math.ceil((i-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;for(let i=0;i<n;i+=1)t.renderBullet?a+=t.renderBullet.call(e,i,t.bulletClass):a+=`<${t.bulletElement} class="${t.bulletClass}"></${t.bulletElement}>`;s.html(a),e.pagination.bullets=s.find("."+t.bulletClass)}"fraction"===t.type&&(a=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):`<span class="${t.currentClass}"></span> / <span class="${t.totalClass}"></span>`,s.html(a)),"progressbar"===t.type&&(a=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):`<span class="${t.progressbarFillClass}"></span>`,s.html(a)),"custom"!==t.type&&e.emit("paginationRender",e.pagination.$el[0])},init(){const e=this,t=e.params.pagination;if(!t.el)return;let i=d(t.el);0!==i.length&&(e.params.uniqueNavElements&&"string"==typeof t.el&&i.length>1&&(i=e.$el.find(t.el)),"bullets"===t.type&&t.clickable&&i.addClass(t.clickableClass),i.addClass(t.modifierClass+t.type),"bullets"===t.type&&t.dynamicBullets&&(i.addClass(`${t.modifierClass}${t.type}-dynamic`),e.pagination.dynamicBulletIndex=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&i.addClass(t.progressbarOppositeClass),t.clickable&&i.on("click","."+t.bulletClass,(function(t){t.preventDefault();let i=d(this).index()*e.params.slidesPerGroup;e.params.loop&&(i+=e.loopedSlides),e.slideTo(i)})),u.extend(e.pagination,{$el:i,el:i[0]}))},destroy(){const e=this.params.pagination;if(!e.el||!this.pagination.el||!this.pagination.$el||0===this.pagination.$el.length)return;const t=this.pagination.$el;t.removeClass(e.hiddenClass),t.removeClass(e.modifierClass+e.type),this.pagination.bullets&&this.pagination.bullets.removeClass(e.bulletActiveClass),e.clickable&&t.off("click","."+e.bulletClass)}};const Q={setTranslate(){const e=this;if(!e.params.scrollbar.el||!e.scrollbar.el)return;const{scrollbar:t,rtlTranslate:i,progress:s}=e,{dragSize:a,trackSize:n,$dragEl:r,$el:o}=t,l=e.params.scrollbar;let d=a,p=(n-a)*s;i?(p=-p,p>0?(d=a-p,p=0):-p+a>n&&(d=n+p)):p<0?(d=a+p,p=0):p+a>n&&(d=n-p),e.isHorizontal()?(r.transform(`translate3d(${p}px, 0, 0)`),r[0].style.width=d+"px"):(r.transform(`translate3d(0px, ${p}px, 0)`),r[0].style.height=d+"px"),l.hide&&(clearTimeout(e.scrollbar.timeout),o[0].style.opacity=1,e.scrollbar.timeout=setTimeout(()=>{o[0].style.opacity=0,o.transition(400)},1e3))},setTransition(e){this.params.scrollbar.el&&this.scrollbar.el&&this.scrollbar.$dragEl.transition(e)},updateSize(){const e=this;if(!e.params.scrollbar.el||!e.scrollbar.el)return;const{scrollbar:t}=e,{$dragEl:i,$el:s}=t;i[0].style.width="",i[0].style.height="";const a=e.isHorizontal()?s[0].offsetWidth:s[0].offsetHeight,n=e.size/e.virtualSize,r=n*(a/e.size);let o;o="auto"===e.params.scrollbar.dragSize?a*n:parseInt(e.params.scrollbar.dragSize,10),e.isHorizontal()?i[0].style.width=o+"px":i[0].style.height=o+"px",s[0].style.display=n>=1?"none":"",e.params.scrollbar.hide&&(s[0].style.opacity=0),u.extend(t,{trackSize:a,divider:n,moveDivider:r,dragSize:o}),t.$el[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](e.params.scrollbar.lockClass)},getPointerPosition(e){return this.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientX:e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientY:e.clientY},setDragPosition(e){const{scrollbar:t,rtlTranslate:i}=this,{$el:s,dragSize:a,trackSize:n,dragStartPos:r}=t;let o;o=(t.getPointerPosition(e)-s.offset()[this.isHorizontal()?"left":"top"]-(null!==r?r:a/2))/(n-a),o=Math.max(Math.min(o,1),0),i&&(o=1-o);const l=this.minTranslate()+(this.maxTranslate()-this.minTranslate())*o;this.updateProgress(l),this.setTranslate(l),this.updateActiveIndex(),this.updateSlidesClasses()},onDragStart(e){const t=this,i=t.params.scrollbar,{scrollbar:s,$wrapperEl:a}=t,{$el:n,$dragEl:r}=s;t.scrollbar.isTouched=!0,t.scrollbar.dragStartPos=e.target===r[0]||e.target===r?s.getPointerPosition(e)-e.target.getBoundingClientRect()[t.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),a.transition(100),r.transition(100),s.setDragPosition(e),clearTimeout(t.scrollbar.dragTimeout),n.transition(0),i.hide&&n.css("opacity",1),t.params.cssMode&&t.$wrapperEl.css("scroll-snap-type","none"),t.emit("scrollbarDragStart",e)},onDragMove(e){const{scrollbar:t,$wrapperEl:i}=this,{$el:s,$dragEl:a}=t;this.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),i.transition(0),s.transition(0),a.transition(0),this.emit("scrollbarDragMove",e))},onDragEnd(e){const t=this,i=t.params.scrollbar,{scrollbar:s,$wrapperEl:a}=t,{$el:n}=s;t.scrollbar.isTouched&&(t.scrollbar.isTouched=!1,t.params.cssMode&&(t.$wrapperEl.css("scroll-snap-type",""),a.transition("")),i.hide&&(clearTimeout(t.scrollbar.dragTimeout),t.scrollbar.dragTimeout=u.nextTick(()=>{n.css("opacity",0),n.transition(400)},1e3)),t.emit("scrollbarDragEnd",e),i.snapOnRelease&&t.slideToClosest())},enableDraggable(){const e=this;if(!e.params.scrollbar.el)return;const{scrollbar:t,touchEventsTouch:i,touchEventsDesktop:s,params:a}=e,r=t.$el[0],o=!(!h.passiveListener||!a.passiveListeners)&&{passive:!1,capture:!1},l=!(!h.passiveListener||!a.passiveListeners)&&{passive:!0,capture:!1};h.touch?(r.addEventListener(i.start,e.scrollbar.onDragStart,o),r.addEventListener(i.move,e.scrollbar.onDragMove,o),r.addEventListener(i.end,e.scrollbar.onDragEnd,l)):(r.addEventListener(s.start,e.scrollbar.onDragStart,o),n.addEventListener(s.move,e.scrollbar.onDragMove,o),n.addEventListener(s.end,e.scrollbar.onDragEnd,l))},disableDraggable(){const e=this;if(!e.params.scrollbar.el)return;const{scrollbar:t,touchEventsTouch:i,touchEventsDesktop:s,params:a}=e,r=t.$el[0],o=!(!h.passiveListener||!a.passiveListeners)&&{passive:!1,capture:!1},l=!(!h.passiveListener||!a.passiveListeners)&&{passive:!0,capture:!1};h.touch?(r.removeEventListener(i.start,e.scrollbar.onDragStart,o),r.removeEventListener(i.move,e.scrollbar.onDragMove,o),r.removeEventListener(i.end,e.scrollbar.onDragEnd,l)):(r.removeEventListener(s.start,e.scrollbar.onDragStart,o),n.removeEventListener(s.move,e.scrollbar.onDragMove,o),n.removeEventListener(s.end,e.scrollbar.onDragEnd,l))},init(){const e=this;if(!e.params.scrollbar.el)return;const{scrollbar:t,$el:i}=e,s=e.params.scrollbar;let a=d(s.el);e.params.uniqueNavElements&&"string"==typeof s.el&&a.length>1&&1===i.find(s.el).length&&(a=i.find(s.el));let n=a.find("."+e.params.scrollbar.dragClass);0===n.length&&(n=d(`<div class="${e.params.scrollbar.dragClass}"></div>`),a.append(n)),u.extend(t,{$el:a,el:a[0],$dragEl:n,dragEl:n[0]}),s.draggable&&t.enableDraggable()},destroy(){this.scrollbar.disableDraggable()}};const K={setTransform(e,t){const{rtl:i}=this,s=d(e),a=i?-1:1,n=s.attr("data-swiper-parallax")||"0";let r=s.attr("data-swiper-parallax-x"),o=s.attr("data-swiper-parallax-y");const l=s.attr("data-swiper-parallax-scale"),p=s.attr("data-swiper-parallax-opacity");if(r||o?(r=r||"0",o=o||"0"):this.isHorizontal()?(r=n,o="0"):(o=n,r="0"),r=r.indexOf("%")>=0?parseInt(r,10)*t*a+"%":r*t*a+"px",o=o.indexOf("%")>=0?parseInt(o,10)*t+"%":o*t+"px",null!=p){const e=p-(p-1)*(1-Math.abs(t));s[0].style.opacity=e}if(null==l)s.transform(`translate3d(${r}, ${o}, 0px)`);else{const e=l-(l-1)*(1-Math.abs(t));s.transform(`translate3d(${r}, ${o}, 0px) scale(${e})`)}},setTranslate(){const e=this,{$el:t,slides:i,progress:s,snapGrid:a}=e;t.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((t,i)=>{e.parallax.setTransform(i,s)}),i.each((t,i)=>{let n=i.progress;e.params.slidesPerGroup>1&&"auto"!==e.params.slidesPerView&&(n+=Math.ceil(t/2)-s*(a.length-1)),n=Math.min(Math.max(n,-1),1),d(i).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((t,i)=>{e.parallax.setTransform(i,n)})})},setTransition(e=this.params.speed){const{$el:t}=this;t.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((t,i)=>{const s=d(i);let a=parseInt(s.attr("data-swiper-parallax-duration"),10)||e;0===e&&(a=0),s.transition(a)})}};const Z={getDistanceBetweenTouches(e){if(e.targetTouches.length<2)return 1;const t=e.targetTouches[0].pageX,i=e.targetTouches[0].pageY,s=e.targetTouches[1].pageX,a=e.targetTouches[1].pageY;return Math.sqrt((s-t)**2+(a-i)**2)},onGestureStart(e){const t=this,i=t.params.zoom,s=t.zoom,{gesture:a}=s;if(s.fakeGestureTouched=!1,s.fakeGestureMoved=!1,!h.gestures){if("touchstart"!==e.type||"touchstart"===e.type&&e.targetTouches.length<2)return;s.fakeGestureTouched=!0,a.scaleStart=Z.getDistanceBetweenTouches(e)}a.$slideEl&&a.$slideEl.length||(a.$slideEl=d(e.target).closest("."+t.params.slideClass),0===a.$slideEl.length&&(a.$slideEl=t.slides.eq(t.activeIndex)),a.$imageEl=a.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),a.$imageWrapEl=a.$imageEl.parent("."+i.containerClass),a.maxRatio=a.$imageWrapEl.attr("data-swiper-zoom")||i.maxRatio,0!==a.$imageWrapEl.length)?(a.$imageEl&&a.$imageEl.transition(0),t.zoom.isScaling=!0):a.$imageEl=void 0},onGestureChange(e){const t=this.params.zoom,i=this.zoom,{gesture:s}=i;if(!h.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;i.fakeGestureMoved=!0,s.scaleMove=Z.getDistanceBetweenTouches(e)}s.$imageEl&&0!==s.$imageEl.length&&(i.scale=h.gestures?e.scale*i.currentScale:s.scaleMove/s.scaleStart*i.currentScale,i.scale>s.maxRatio&&(i.scale=s.maxRatio-1+(i.scale-s.maxRatio+1)**.5),i.scale<t.minRatio&&(i.scale=t.minRatio+1-(t.minRatio-i.scale+1)**.5),s.$imageEl.transform(`translate3d(0,0,0) scale(${i.scale})`))},onGestureEnd(e){const t=this.params.zoom,i=this.zoom,{gesture:s}=i;if(!h.gestures){if(!i.fakeGestureTouched||!i.fakeGestureMoved)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!E.android)return;i.fakeGestureTouched=!1,i.fakeGestureMoved=!1}s.$imageEl&&0!==s.$imageEl.length&&(i.scale=Math.max(Math.min(i.scale,s.maxRatio),t.minRatio),s.$imageEl.transition(this.params.speed).transform(`translate3d(0,0,0) scale(${i.scale})`),i.currentScale=i.scale,i.isScaling=!1,1===i.scale&&(s.$slideEl=void 0))},onTouchStart(e){const t=this.zoom,{gesture:i,image:s}=t;i.$imageEl&&0!==i.$imageEl.length&&(s.isTouched||(E.android&&e.cancelable&&e.preventDefault(),s.isTouched=!0,s.touchesStart.x="touchstart"===e.type?e.targetTouches[0].pageX:e.pageX,s.touchesStart.y="touchstart"===e.type?e.targetTouches[0].pageY:e.pageY))},onTouchMove(e){const t=this,i=t.zoom,{gesture:s,image:a,velocity:n}=i;if(!s.$imageEl||0===s.$imageEl.length)return;if(t.allowClick=!1,!a.isTouched||!s.$slideEl)return;a.isMoved||(a.width=s.$imageEl[0].offsetWidth,a.height=s.$imageEl[0].offsetHeight,a.startX=u.getTranslate(s.$imageWrapEl[0],"x")||0,a.startY=u.getTranslate(s.$imageWrapEl[0],"y")||0,s.slideWidth=s.$slideEl[0].offsetWidth,s.slideHeight=s.$slideEl[0].offsetHeight,s.$imageWrapEl.transition(0),t.rtl&&(a.startX=-a.startX,a.startY=-a.startY));const r=a.width*i.scale,o=a.height*i.scale;if(!(r<s.slideWidth&&o<s.slideHeight)){if(a.minX=Math.min(s.slideWidth/2-r/2,0),a.maxX=-a.minX,a.minY=Math.min(s.slideHeight/2-o/2,0),a.maxY=-a.minY,a.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,a.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!a.isMoved&&!i.isScaling){if(t.isHorizontal()&&(Math.floor(a.minX)===Math.floor(a.startX)&&a.touchesCurrent.x<a.touchesStart.x||Math.floor(a.maxX)===Math.floor(a.startX)&&a.touchesCurrent.x>a.touchesStart.x))return void(a.isTouched=!1);if(!t.isHorizontal()&&(Math.floor(a.minY)===Math.floor(a.startY)&&a.touchesCurrent.y<a.touchesStart.y||Math.floor(a.maxY)===Math.floor(a.startY)&&a.touchesCurrent.y>a.touchesStart.y))return void(a.isTouched=!1)}e.cancelable&&e.preventDefault(),e.stopPropagation(),a.isMoved=!0,a.currentX=a.touchesCurrent.x-a.touchesStart.x+a.startX,a.currentY=a.touchesCurrent.y-a.touchesStart.y+a.startY,a.currentX<a.minX&&(a.currentX=a.minX+1-(a.minX-a.currentX+1)**.8),a.currentX>a.maxX&&(a.currentX=a.maxX-1+(a.currentX-a.maxX+1)**.8),a.currentY<a.minY&&(a.currentY=a.minY+1-(a.minY-a.currentY+1)**.8),a.currentY>a.maxY&&(a.currentY=a.maxY-1+(a.currentY-a.maxY+1)**.8),n.prevPositionX||(n.prevPositionX=a.touchesCurrent.x),n.prevPositionY||(n.prevPositionY=a.touchesCurrent.y),n.prevTime||(n.prevTime=Date.now()),n.x=(a.touchesCurrent.x-n.prevPositionX)/(Date.now()-n.prevTime)/2,n.y=(a.touchesCurrent.y-n.prevPositionY)/(Date.now()-n.prevTime)/2,Math.abs(a.touchesCurrent.x-n.prevPositionX)<2&&(n.x=0),Math.abs(a.touchesCurrent.y-n.prevPositionY)<2&&(n.y=0),n.prevPositionX=a.touchesCurrent.x,n.prevPositionY=a.touchesCurrent.y,n.prevTime=Date.now(),s.$imageWrapEl.transform(`translate3d(${a.currentX}px, ${a.currentY}px,0)`)}},onTouchEnd(){const e=this.zoom,{gesture:t,image:i,velocity:s}=e;if(!t.$imageEl||0===t.$imageEl.length)return;if(!i.isTouched||!i.isMoved)return i.isTouched=!1,void(i.isMoved=!1);i.isTouched=!1,i.isMoved=!1;let a=300,n=300;const r=s.x*a,o=i.currentX+r,l=s.y*n,d=i.currentY+l;0!==s.x&&(a=Math.abs((o-i.currentX)/s.x)),0!==s.y&&(n=Math.abs((d-i.currentY)/s.y));const p=Math.max(a,n);i.currentX=o,i.currentY=d;const c=i.width*e.scale,u=i.height*e.scale;i.minX=Math.min(t.slideWidth/2-c/2,0),i.maxX=-i.minX,i.minY=Math.min(t.slideHeight/2-u/2,0),i.maxY=-i.minY,i.currentX=Math.max(Math.min(i.currentX,i.maxX),i.minX),i.currentY=Math.max(Math.min(i.currentY,i.maxY),i.minY),t.$imageWrapEl.transition(p).transform(`translate3d(${i.currentX}px, ${i.currentY}px,0)`)},onTransitionEnd(){const e=this.zoom,{gesture:t}=e;t.$slideEl&&this.previousIndex!==this.activeIndex&&(t.$imageEl&&t.$imageEl.transform("translate3d(0,0,0) scale(1)"),t.$imageWrapEl&&t.$imageWrapEl.transform("translate3d(0,0,0)"),e.scale=1,e.currentScale=1,t.$slideEl=void 0,t.$imageEl=void 0,t.$imageWrapEl=void 0)},toggle(e){const t=this.zoom;t.scale&&1!==t.scale?t.out():t.in(e)},in(e){const t=this,i=t.zoom,s=t.params.zoom,{gesture:a,image:n}=i;if(a.$slideEl||(t.params.virtual&&t.params.virtual.enabled&&t.virtual?a.$slideEl=t.$wrapperEl.children("."+t.params.slideActiveClass):a.$slideEl=t.slides.eq(t.activeIndex),a.$imageEl=a.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),a.$imageWrapEl=a.$imageEl.parent("."+s.containerClass)),!a.$imageEl||0===a.$imageEl.length)return;let r,o,l,d,p,c,u,h,m,f,g,v,b,w,x,y,E,T;a.$slideEl.addClass(""+s.zoomedSlideClass),void 0===n.touchesStart.x&&e?(r="touchend"===e.type?e.changedTouches[0].pageX:e.pageX,o="touchend"===e.type?e.changedTouches[0].pageY:e.pageY):(r=n.touchesStart.x,o=n.touchesStart.y),i.scale=a.$imageWrapEl.attr("data-swiper-zoom")||s.maxRatio,i.currentScale=a.$imageWrapEl.attr("data-swiper-zoom")||s.maxRatio,e?(E=a.$slideEl[0].offsetWidth,T=a.$slideEl[0].offsetHeight,l=a.$slideEl.offset().left,d=a.$slideEl.offset().top,p=l+E/2-r,c=d+T/2-o,m=a.$imageEl[0].offsetWidth,f=a.$imageEl[0].offsetHeight,g=m*i.scale,v=f*i.scale,b=Math.min(E/2-g/2,0),w=Math.min(T/2-v/2,0),x=-b,y=-w,u=p*i.scale,h=c*i.scale,u<b&&(u=b),u>x&&(u=x),h<w&&(h=w),h>y&&(h=y)):(u=0,h=0),a.$imageWrapEl.transition(300).transform(`translate3d(${u}px, ${h}px,0)`),a.$imageEl.transition(300).transform(`translate3d(0,0,0) scale(${i.scale})`)},out(){const e=this,t=e.zoom,i=e.params.zoom,{gesture:s}=t;s.$slideEl||(e.params.virtual&&e.params.virtual.enabled&&e.virtual?s.$slideEl=e.$wrapperEl.children("."+e.params.slideActiveClass):s.$slideEl=e.slides.eq(e.activeIndex),s.$imageEl=s.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),s.$imageWrapEl=s.$imageEl.parent("."+i.containerClass)),s.$imageEl&&0!==s.$imageEl.length&&(t.scale=1,t.currentScale=1,s.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),s.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),s.$slideEl.removeClass(""+i.zoomedSlideClass),s.$slideEl=void 0)},enable(){const e=this,t=e.zoom;if(t.enabled)return;t.enabled=!0;const i=!("touchstart"!==e.touchEvents.start||!h.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1},s=!h.passiveListener||{passive:!1,capture:!0},a="."+e.params.slideClass;h.gestures?(e.$wrapperEl.on("gesturestart",a,t.onGestureStart,i),e.$wrapperEl.on("gesturechange",a,t.onGestureChange,i),e.$wrapperEl.on("gestureend",a,t.onGestureEnd,i)):"touchstart"===e.touchEvents.start&&(e.$wrapperEl.on(e.touchEvents.start,a,t.onGestureStart,i),e.$wrapperEl.on(e.touchEvents.move,a,t.onGestureChange,s),e.$wrapperEl.on(e.touchEvents.end,a,t.onGestureEnd,i),e.touchEvents.cancel&&e.$wrapperEl.on(e.touchEvents.cancel,a,t.onGestureEnd,i)),e.$wrapperEl.on(e.touchEvents.move,"."+e.params.zoom.containerClass,t.onTouchMove,s)},disable(){const e=this,t=e.zoom;if(!t.enabled)return;e.zoom.enabled=!1;const i=!("touchstart"!==e.touchEvents.start||!h.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1},s=!h.passiveListener||{passive:!1,capture:!0},a="."+e.params.slideClass;h.gestures?(e.$wrapperEl.off("gesturestart",a,t.onGestureStart,i),e.$wrapperEl.off("gesturechange",a,t.onGestureChange,i),e.$wrapperEl.off("gestureend",a,t.onGestureEnd,i)):"touchstart"===e.touchEvents.start&&(e.$wrapperEl.off(e.touchEvents.start,a,t.onGestureStart,i),e.$wrapperEl.off(e.touchEvents.move,a,t.onGestureChange,s),e.$wrapperEl.off(e.touchEvents.end,a,t.onGestureEnd,i),e.touchEvents.cancel&&e.$wrapperEl.off(e.touchEvents.cancel,a,t.onGestureEnd,i)),e.$wrapperEl.off(e.touchEvents.move,"."+e.params.zoom.containerClass,t.onTouchMove,s)}};const J={loadInSlide(e,t=!0){const i=this,s=i.params.lazy;if(void 0===e)return;if(0===i.slides.length)return;const a=i.virtual&&i.params.virtual.enabled?i.$wrapperEl.children(`.${i.params.slideClass}[data-swiper-slide-index="${e}"]`):i.slides.eq(e);let n=a.find(`.${s.elementClass}:not(.${s.loadedClass}):not(.${s.loadingClass})`);!a.hasClass(s.elementClass)||a.hasClass(s.loadedClass)||a.hasClass(s.loadingClass)||(n=n.add(a[0])),0!==n.length&&n.each((e,n)=>{const r=d(n);r.addClass(s.loadingClass);const o=r.attr("data-background"),l=r.attr("data-src"),p=r.attr("data-srcset"),c=r.attr("data-sizes"),u=r.parent("picture");i.loadImage(r[0],l||o,p,c,!1,()=>{if(null!=i&&i&&(!i||i.params)&&!i.destroyed){if(o?(r.css("background-image",`url("${o}")`),r.removeAttr("data-background")):(p&&(r.attr("srcset",p),r.removeAttr("data-srcset")),c&&(r.attr("sizes",c),r.removeAttr("data-sizes")),u.length&&u.children("source").each((e,t)=>{const i=d(t);i.attr("data-srcset")&&(i.attr("srcset",i.attr("data-srcset")),i.removeAttr("data-srcset"))}),l&&(r.attr("src",l),r.removeAttr("data-src"))),r.addClass(s.loadedClass).removeClass(s.loadingClass),a.find("."+s.preloaderClass).remove(),i.params.loop&&t){const e=a.attr("data-swiper-slide-index");if(a.hasClass(i.params.slideDuplicateClass)){const t=i.$wrapperEl.children(`[data-swiper-slide-index="${e}"]:not(.${i.params.slideDuplicateClass})`);i.lazy.loadInSlide(t.index(),!1)}else{const t=i.$wrapperEl.children(`.${i.params.slideDuplicateClass}[data-swiper-slide-index="${e}"]`);i.lazy.loadInSlide(t.index(),!1)}}i.emit("lazyImageReady",a[0],r[0]),i.params.autoHeight&&i.updateAutoHeight()}}),i.emit("lazyImageLoad",a[0],r[0])})},load(){const e=this,{$wrapperEl:t,params:i,slides:s,activeIndex:a}=e,n=e.virtual&&i.virtual.enabled,r=i.lazy;let o=i.slidesPerView;function l(e){if(n){if(t.children(`.${i.slideClass}[data-swiper-slide-index="${e}"]`).length)return!0}else if(s[e])return!0;return!1}function p(e){return n?d(e).attr("data-swiper-slide-index"):d(e).index()}if("auto"===o&&(o=0),e.lazy.initialImageLoaded||(e.lazy.initialImageLoaded=!0),e.params.watchSlidesVisibility)t.children("."+i.slideVisibleClass).each((t,i)=>{const s=n?d(i).attr("data-swiper-slide-index"):d(i).index();e.lazy.loadInSlide(s)});else if(o>1)for(let t=a;t<a+o;t+=1)l(t)&&e.lazy.loadInSlide(t);else e.lazy.loadInSlide(a);if(r.loadPrevNext)if(o>1||r.loadPrevNextAmount&&r.loadPrevNextAmount>1){const t=r.loadPrevNextAmount,i=o,n=Math.min(a+i+Math.max(t,i),s.length),d=Math.max(a-Math.max(i,t),0);for(let t=a+o;t<n;t+=1)l(t)&&e.lazy.loadInSlide(t);for(let t=d;t<a;t+=1)l(t)&&e.lazy.loadInSlide(t)}else{const s=t.children("."+i.slideNextClass);s.length>0&&e.lazy.loadInSlide(p(s));const a=t.children("."+i.slidePrevClass);a.length>0&&e.lazy.loadInSlide(p(a))}}};const _={LinearSpline:function(e,t){const i=function(){let e,t,i;return(s,a)=>{for(t=-1,e=s.length;e-t>1;)i=e+t>>1,s[i]<=a?t=i:e=i;return e}}();let s,a;return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(a=i(this.x,e),s=a-1,(e-this.x[s])*(this.y[a]-this.y[s])/(this.x[a]-this.x[s])+this.y[s]):0},this},getInterpolateFunction(e){const t=this;t.controller.spline||(t.controller.spline=t.params.loop?new _.LinearSpline(t.slidesGrid,e.slidesGrid):new _.LinearSpline(t.snapGrid,e.snapGrid))},setTranslate(e,t){const i=this,s=i.controller.control;let a,n;function r(e){const t=i.rtlTranslate?-i.translate:i.translate;"slide"===i.params.controller.by&&(i.controller.getInterpolateFunction(e),n=-i.controller.spline.interpolate(-t)),n&&"container"!==i.params.controller.by||(a=(e.maxTranslate()-e.minTranslate())/(i.maxTranslate()-i.minTranslate()),n=(t-i.minTranslate())*a+e.minTranslate()),i.params.controller.inverse&&(n=e.maxTranslate()-n),e.updateProgress(n),e.setTranslate(n,i),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(s))for(let e=0;e<s.length;e+=1)s[e]!==t&&s[e]instanceof D&&r(s[e]);else s instanceof D&&t!==s&&r(s)},setTransition(e,t){const i=this,s=i.controller.control;let a;function n(t){t.setTransition(e,i),0!==e&&(t.transitionStart(),t.params.autoHeight&&u.nextTick(()=>{t.updateAutoHeight()}),t.$wrapperEl.transitionEnd(()=>{s&&(t.params.loop&&"slide"===i.params.controller.by&&t.loopFix(),t.transitionEnd())}))}if(Array.isArray(s))for(a=0;a<s.length;a+=1)s[a]!==t&&s[a]instanceof D&&n(s[a]);else s instanceof D&&t!==s&&n(s)}};const ee={makeElFocusable:e=>(e.attr("tabIndex","0"),e),makeElNotFocusable:e=>(e.attr("tabIndex","-1"),e),addElRole:(e,t)=>(e.attr("role",t),e),addElLabel:(e,t)=>(e.attr("aria-label",t),e),disableEl:e=>(e.attr("aria-disabled",!0),e),enableEl:e=>(e.attr("aria-disabled",!1),e),onEnterKey(e){const t=this,i=t.params.a11y;if(13!==e.keyCode)return;const s=d(e.target);t.navigation&&t.navigation.$nextEl&&s.is(t.navigation.$nextEl)&&(t.isEnd&&!t.params.loop||t.slideNext(),t.isEnd?t.a11y.notify(i.lastSlideMessage):t.a11y.notify(i.nextSlideMessage)),t.navigation&&t.navigation.$prevEl&&s.is(t.navigation.$prevEl)&&(t.isBeginning&&!t.params.loop||t.slidePrev(),t.isBeginning?t.a11y.notify(i.firstSlideMessage):t.a11y.notify(i.prevSlideMessage)),t.pagination&&s.is("."+t.params.pagination.bulletClass)&&s[0].click()},notify(e){const t=this.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},updateNavigation(){const e=this;if(e.params.loop||!e.navigation)return;const{$nextEl:t,$prevEl:i}=e.navigation;i&&i.length>0&&(e.isBeginning?(e.a11y.disableEl(i),e.a11y.makeElNotFocusable(i)):(e.a11y.enableEl(i),e.a11y.makeElFocusable(i))),t&&t.length>0&&(e.isEnd?(e.a11y.disableEl(t),e.a11y.makeElNotFocusable(t)):(e.a11y.enableEl(t),e.a11y.makeElFocusable(t)))},updatePagination(){const e=this,t=e.params.a11y;e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.bullets.each((i,s)=>{const a=d(s);e.a11y.makeElFocusable(a),e.a11y.addElRole(a,"button"),e.a11y.addElLabel(a,t.paginationBulletMessage.replace(/\{\{index\}\}/,a.index()+1))})},init(){const e=this;e.$el.append(e.a11y.liveRegion);const t=e.params.a11y;let i,s;e.navigation&&e.navigation.$nextEl&&(i=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(s=e.navigation.$prevEl),i&&(e.a11y.makeElFocusable(i),e.a11y.addElRole(i,"button"),e.a11y.addElLabel(i,t.nextSlideMessage),i.on("keydown",e.a11y.onEnterKey)),s&&(e.a11y.makeElFocusable(s),e.a11y.addElRole(s,"button"),e.a11y.addElLabel(s,t.prevSlideMessage),s.on("keydown",e.a11y.onEnterKey)),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.on("keydown","."+e.params.pagination.bulletClass,e.a11y.onEnterKey)},destroy(){const e=this;let t,i;e.a11y.liveRegion&&e.a11y.liveRegion.length>0&&e.a11y.liveRegion.remove(),e.navigation&&e.navigation.$nextEl&&(t=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(i=e.navigation.$prevEl),t&&t.off("keydown",e.a11y.onEnterKey),i&&i.off("keydown",e.a11y.onEnterKey),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.off("keydown","."+e.params.pagination.bulletClass,e.a11y.onEnterKey)}};const te={init(){const e=this;if(!e.params.history)return;if(!o.history||!o.history.pushState)return e.params.history.enabled=!1,void(e.params.hashNavigation.enabled=!0);const t=e.history;t.initialized=!0,t.paths=te.getPathValues(),(t.paths.key||t.paths.value)&&(t.scrollToSlide(0,t.paths.value,e.params.runCallbacksOnInit),e.params.history.replaceState||o.addEventListener("popstate",e.history.setHistoryPopState))},destroy(){const e=this;e.params.history.replaceState||o.removeEventListener("popstate",e.history.setHistoryPopState)},setHistoryPopState(){this.history.paths=te.getPathValues(),this.history.scrollToSlide(this.params.speed,this.history.paths.value,!1)},getPathValues(){const e=o.location.pathname.slice(1).split("/").filter(e=>""!==e),t=e.length;return{key:e[t-2],value:e[t-1]}},setHistory(e,t){if(!this.history.initialized||!this.params.history.enabled)return;const i=this.slides.eq(t);let s=te.slugify(i.attr("data-history"));o.location.pathname.includes(e)||(s=`${e}/${s}`);const a=o.history.state;a&&a.value===s||(this.params.history.replaceState?o.history.replaceState({value:s},null,s):o.history.pushState({value:s},null,s))},slugify:e=>e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,""),scrollToSlide(e,t,i){const s=this;if(t)for(let a=0,n=s.slides.length;a<n;a+=1){const n=s.slides.eq(a);if(te.slugify(n.attr("data-history"))===t&&!n.hasClass(s.params.slideDuplicateClass)){const t=n.index();s.slideTo(t,e,i)}}else s.slideTo(0,e,i)}};const ie={onHashCange(){const e=this;e.emit("hashChange");const t=n.location.hash.replace("#","");if(t!==e.slides.eq(e.activeIndex).attr("data-hash")){const i=e.$wrapperEl.children(`.${e.params.slideClass}[data-hash="${t}"]`).index();if(void 0===i)return;e.slideTo(i)}},setHash(){const e=this;if(e.hashNavigation.initialized&&e.params.hashNavigation.enabled)if(e.params.hashNavigation.replaceState&&o.history&&o.history.replaceState)o.history.replaceState(null,null,"#"+e.slides.eq(e.activeIndex).attr("data-hash")||""),e.emit("hashSet");else{const t=e.slides.eq(e.activeIndex),i=t.attr("data-hash")||t.attr("data-history");n.location.hash=i||"",e.emit("hashSet")}},init(){const e=this;if(!e.params.hashNavigation.enabled||e.params.history&&e.params.history.enabled)return;e.hashNavigation.initialized=!0;const t=n.location.hash.replace("#","");if(t){const i=0;for(let s=0,a=e.slides.length;s<a;s+=1){const a=e.slides.eq(s);if((a.attr("data-hash")||a.attr("data-history"))===t&&!a.hasClass(e.params.slideDuplicateClass)){const t=a.index();e.slideTo(t,i,e.params.runCallbacksOnInit,!0)}}}e.params.hashNavigation.watchState&&d(o).on("hashchange",e.hashNavigation.onHashCange)},destroy(){const e=this;e.params.hashNavigation.watchState&&d(o).off("hashchange",e.hashNavigation.onHashCange)}};const se={run(){const e=this,t=e.slides.eq(e.activeIndex);let i=e.params.autoplay.delay;t.attr("data-swiper-autoplay")&&(i=t.attr("data-swiper-autoplay")||e.params.autoplay.delay),clearTimeout(e.autoplay.timeout),e.autoplay.timeout=u.nextTick(()=>{e.params.autoplay.reverseDirection?e.params.loop?(e.loopFix(),e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.isBeginning?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(e.slides.length-1,e.params.speed,!0,!0),e.emit("autoplay")):(e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.params.loop?(e.loopFix(),e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")):e.isEnd?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(0,e.params.speed,!0,!0),e.emit("autoplay")):(e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")),e.params.cssMode&&e.autoplay.running&&e.autoplay.run()},i)},start(){return void 0===this.autoplay.timeout&&(!this.autoplay.running&&(this.autoplay.running=!0,this.emit("autoplayStart"),this.autoplay.run(),!0))},stop(){const e=this;return!!e.autoplay.running&&(void 0!==e.autoplay.timeout&&(e.autoplay.timeout&&(clearTimeout(e.autoplay.timeout),e.autoplay.timeout=void 0),e.autoplay.running=!1,e.emit("autoplayStop"),!0))},pause(e){const t=this;t.autoplay.running&&(t.autoplay.paused||(t.autoplay.timeout&&clearTimeout(t.autoplay.timeout),t.autoplay.paused=!0,0!==e&&t.params.autoplay.waitForTransition?(t.$wrapperEl[0].addEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].addEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd)):(t.autoplay.paused=!1,t.autoplay.run())))}};const ae={setTranslate(){const e=this,{slides:t}=e;for(let i=0;i<t.length;i+=1){const t=e.slides.eq(i);let s=-t[0].swiperSlideOffset;e.params.virtualTranslate||(s-=e.translate);let a=0;e.isHorizontal()||(a=s,s=0);const n=e.params.fadeEffect.crossFade?Math.max(1-Math.abs(t[0].progress),0):1+Math.min(Math.max(t[0].progress,-1),0);t.css({opacity:n}).transform(`translate3d(${s}px, ${a}px, 0px)`)}},setTransition(e){const t=this,{slides:i,$wrapperEl:s}=t;if(i.transition(e),t.params.virtualTranslate&&0!==e){let e=!1;i.transitionEnd(()=>{if(e)return;if(!t||t.destroyed)return;e=!0,t.animating=!1;const i=["webkitTransitionEnd","transitionend"];for(let e=0;e<i.length;e+=1)s.trigger(i[e])})}}};const ne={setTranslate(){const{$el:e,$wrapperEl:t,slides:i,width:s,height:a,rtlTranslate:n,size:r}=this,o=this.params.cubeEffect,l=this.isHorizontal(),p=this.virtual&&this.params.virtual.enabled;let c,u=0;o.shadow&&(l?(c=t.find(".swiper-cube-shadow"),0===c.length&&(c=d('<div class="swiper-cube-shadow"></div>'),t.append(c)),c.css({height:s+"px"})):(c=e.find(".swiper-cube-shadow"),0===c.length&&(c=d('<div class="swiper-cube-shadow"></div>'),e.append(c))));for(let e=0;e<i.length;e+=1){const t=i.eq(e);let s=e;p&&(s=parseInt(t.attr("data-swiper-slide-index"),10));let a=90*s,c=Math.floor(a/360);n&&(a=-a,c=Math.floor(-a/360));const h=Math.max(Math.min(t[0].progress,1),-1);let m=0,f=0,g=0;s%4==0?(m=4*-c*r,g=0):(s-1)%4==0?(m=0,g=4*-c*r):(s-2)%4==0?(m=r+4*c*r,g=r):(s-3)%4==0&&(m=-r,g=3*r+4*r*c),n&&(m=-m),l||(f=m,m=0);const v=`rotateX(${l?0:-a}deg) rotateY(${l?a:0}deg) translate3d(${m}px, ${f}px, ${g}px)`;if(h<=1&&h>-1&&(u=90*s+90*h,n&&(u=90*-s-90*h)),t.transform(v),o.slideShadows){let e=l?t.find(".swiper-slide-shadow-left"):t.find(".swiper-slide-shadow-top"),i=l?t.find(".swiper-slide-shadow-right"):t.find(".swiper-slide-shadow-bottom");0===e.length&&(e=d(`<div class="swiper-slide-shadow-${l?"left":"top"}"></div>`),t.append(e)),0===i.length&&(i=d(`<div class="swiper-slide-shadow-${l?"right":"bottom"}"></div>`),t.append(i)),e.length&&(e[0].style.opacity=Math.max(-h,0)),i.length&&(i[0].style.opacity=Math.max(h,0))}}if(t.css({"-webkit-transform-origin":`50% 50% -${r/2}px`,"-moz-transform-origin":`50% 50% -${r/2}px`,"-ms-transform-origin":`50% 50% -${r/2}px`,"transform-origin":`50% 50% -${r/2}px`}),o.shadow)if(l)c.transform(`translate3d(0px, ${s/2+o.shadowOffset}px, ${-s/2}px) rotateX(90deg) rotateZ(0deg) scale(${o.shadowScale})`);else{const e=Math.abs(u)-90*Math.floor(Math.abs(u)/90),t=1.5-(Math.sin(2*e*Math.PI/360)/2+Math.cos(2*e*Math.PI/360)/2),i=o.shadowScale,s=o.shadowScale/t,n=o.shadowOffset;c.transform(`scale3d(${i}, 1, ${s}) translate3d(0px, ${a/2+n}px, ${-a/2/s}px) rotateX(-90deg)`)}const h=G.isSafari||G.isWebView?-r/2:0;t.transform(`translate3d(0px,0,${h}px) rotateX(${this.isHorizontal()?0:u}deg) rotateY(${this.isHorizontal()?-u:0}deg)`)},setTransition(e){const{$el:t,slides:i}=this;i.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),this.params.cubeEffect.shadow&&!this.isHorizontal()&&t.find(".swiper-cube-shadow").transition(e)}};const re={setTranslate(){const e=this,{slides:t,rtlTranslate:i}=e;for(let s=0;s<t.length;s+=1){const a=t.eq(s);let n=a[0].progress;e.params.flipEffect.limitRotation&&(n=Math.max(Math.min(a[0].progress,1),-1));let r=-180*n,o=0,l=-a[0].swiperSlideOffset,p=0;if(e.isHorizontal()?i&&(r=-r):(p=l,l=0,o=-r,r=0),a[0].style.zIndex=-Math.abs(Math.round(n))+t.length,e.params.flipEffect.slideShadows){let t=e.isHorizontal()?a.find(".swiper-slide-shadow-left"):a.find(".swiper-slide-shadow-top"),i=e.isHorizontal()?a.find(".swiper-slide-shadow-right"):a.find(".swiper-slide-shadow-bottom");0===t.length&&(t=d(`<div class="swiper-slide-shadow-${e.isHorizontal()?"left":"top"}"></div>`),a.append(t)),0===i.length&&(i=d(`<div class="swiper-slide-shadow-${e.isHorizontal()?"right":"bottom"}"></div>`),a.append(i)),t.length&&(t[0].style.opacity=Math.max(-n,0)),i.length&&(i[0].style.opacity=Math.max(n,0))}a.transform(`translate3d(${l}px, ${p}px, 0px) rotateX(${o}deg) rotateY(${r}deg)`)}},setTransition(e){const t=this,{slides:i,activeIndex:s,$wrapperEl:a}=t;if(i.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),t.params.virtualTranslate&&0!==e){let e=!1;i.eq(s).transitionEnd((function(){if(e)return;if(!t||t.destroyed)return;e=!0,t.animating=!1;const i=["webkitTransitionEnd","transitionend"];for(let e=0;e<i.length;e+=1)a.trigger(i[e])}))}}};const oe={setTranslate(){const{width:e,height:t,slides:i,$wrapperEl:s,slidesSizesGrid:a}=this,n=this.params.coverflowEffect,r=this.isHorizontal(),o=this.translate,l=r?e/2-o:t/2-o,p=r?n.rotate:-n.rotate,c=n.depth;for(let e=0,t=i.length;e<t;e+=1){const t=i.eq(e),s=a[e],o=(l-t[0].swiperSlideOffset-s/2)/s*n.modifier;let u=r?p*o:0,h=r?0:p*o,m=-c*Math.abs(o),f=n.stretch;"string"==typeof f&&-1!==f.indexOf("%")&&(f=parseFloat(n.stretch)/100*s);let g=r?0:f*o,v=r?f*o:0,b=1-(1-n.scale)*Math.abs(o);Math.abs(v)<.001&&(v=0),Math.abs(g)<.001&&(g=0),Math.abs(m)<.001&&(m=0),Math.abs(u)<.001&&(u=0),Math.abs(h)<.001&&(h=0),Math.abs(b)<.001&&(b=0);const w=`translate3d(${v}px,${g}px,${m}px)  rotateX(${h}deg) rotateY(${u}deg) scale(${b})`;if(t.transform(w),t[0].style.zIndex=1-Math.abs(Math.round(o)),n.slideShadows){let e=r?t.find(".swiper-slide-shadow-left"):t.find(".swiper-slide-shadow-top"),i=r?t.find(".swiper-slide-shadow-right"):t.find(".swiper-slide-shadow-bottom");0===e.length&&(e=d(`<div class="swiper-slide-shadow-${r?"left":"top"}"></div>`),t.append(e)),0===i.length&&(i=d(`<div class="swiper-slide-shadow-${r?"right":"bottom"}"></div>`),t.append(i)),e.length&&(e[0].style.opacity=o>0?o:0),i.length&&(i[0].style.opacity=-o>0?-o:0)}}if(h.pointerEvents||h.prefixedPointerEvents){s[0].style.perspectiveOrigin=l+"px 50%"}},setTransition(e){this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}};const le={init(){const e=this,{thumbs:t}=e.params,i=e.constructor;t.swiper instanceof i?(e.thumbs.swiper=t.swiper,u.extend(e.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),u.extend(e.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1})):u.isObject(t.swiper)&&(e.thumbs.swiper=new i(u.extend({},t.swiper,{watchSlidesVisibility:!0,watchSlidesProgress:!0,slideToClickedSlide:!1})),e.thumbs.swiperCreated=!0),e.thumbs.swiper.$el.addClass(e.params.thumbs.thumbsContainerClass),e.thumbs.swiper.on("tap",e.thumbs.onThumbClick)},onThumbClick(){const e=this,t=e.thumbs.swiper;if(!t)return;const i=t.clickedIndex,s=t.clickedSlide;if(s&&d(s).hasClass(e.params.thumbs.slideThumbActiveClass))return;if(null==i)return;let a;if(a=t.params.loop?parseInt(d(t.clickedSlide).attr("data-swiper-slide-index"),10):i,e.params.loop){let t=e.activeIndex;e.slides.eq(t).hasClass(e.params.slideDuplicateClass)&&(e.loopFix(),e._clientLeft=e.$wrapperEl[0].clientLeft,t=e.activeIndex);const i=e.slides.eq(t).prevAll(`[data-swiper-slide-index="${a}"]`).eq(0).index(),s=e.slides.eq(t).nextAll(`[data-swiper-slide-index="${a}"]`).eq(0).index();a=void 0===i?s:void 0===s?i:s-t<t-i?s:i}e.slideTo(a)},update(e){const t=this,i=t.thumbs.swiper;if(!i)return;const s="auto"===i.params.slidesPerView?i.slidesPerViewDynamic():i.params.slidesPerView,a=t.params.thumbs.autoScrollOffset,n=a&&!i.params.loop;if(t.realIndex!==i.realIndex||n){let r,o,l=i.activeIndex;if(i.params.loop){i.slides.eq(l).hasClass(i.params.slideDuplicateClass)&&(i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft,l=i.activeIndex);const e=i.slides.eq(l).prevAll(`[data-swiper-slide-index="${t.realIndex}"]`).eq(0).index(),s=i.slides.eq(l).nextAll(`[data-swiper-slide-index="${t.realIndex}"]`).eq(0).index();r=void 0===e?s:void 0===s?e:s-l==l-e?l:s-l<l-e?s:e,o=t.activeIndex>t.previousIndex?"next":"prev"}else r=t.realIndex,o=r>t.previousIndex?"next":"prev";n&&(r+="next"===o?a:-1*a),i.visibleSlidesIndexes&&i.visibleSlidesIndexes.indexOf(r)<0&&(i.params.centeredSlides?r=r>l?r-Math.floor(s/2)+1:r+Math.floor(s/2)-1:r>l&&(r=r-s+1),i.slideTo(r,e?0:void 0))}let r=1;const o=t.params.thumbs.slideThumbActiveClass;if(t.params.slidesPerView>1&&!t.params.centeredSlides&&(r=t.params.slidesPerView),t.params.thumbs.multipleActiveThumbs||(r=1),r=Math.floor(r),i.slides.removeClass(o),i.params.loop||i.params.virtual&&i.params.virtual.enabled)for(let e=0;e<r;e+=1)i.$wrapperEl.children(`[data-swiper-slide-index="${t.realIndex+e}"]`).addClass(o);else for(let e=0;e<r;e+=1)i.slides.eq(t.realIndex+e).addClass(o)}};const de=[O,B,Y,N,j,F,q,{name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarged:"container"}},create(){u.extend(this,{mousewheel:{enabled:!1,enable:R.enable.bind(this),disable:R.disable.bind(this),handle:R.handle.bind(this),handleMouseEnter:R.handleMouseEnter.bind(this),handleMouseLeave:R.handleMouseLeave.bind(this),animateSlider:R.animateSlider.bind(this),releaseScroll:R.releaseScroll.bind(this),lastScrollTime:u.now(),lastEventBeforeSnap:void 0,recentWheelEvents:[]}})},on:{init(){const e=this;!e.params.mousewheel.enabled&&e.params.cssMode&&e.mousewheel.disable(),e.params.mousewheel.enabled&&e.mousewheel.enable()},destroy(){const e=this;e.params.cssMode&&e.mousewheel.enable(),e.mousewheel.enabled&&e.mousewheel.disable()}}},{name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create(){u.extend(this,{navigation:{init:W.init.bind(this),update:W.update.bind(this),destroy:W.destroy.bind(this),onNextClick:W.onNextClick.bind(this),onPrevClick:W.onPrevClick.bind(this)}})},on:{init(){this.navigation.init(),this.navigation.update()},toEdge(){this.navigation.update()},fromEdge(){this.navigation.update()},destroy(){this.navigation.destroy()},click(e){const t=this,{$nextEl:i,$prevEl:s}=t.navigation;if(t.params.navigation.hideOnClick&&!d(e.target).is(s)&&!d(e.target).is(i)){let e;i?e=i.hasClass(t.params.navigation.hiddenClass):s&&(e=s.hasClass(t.params.navigation.hiddenClass)),!0===e?t.emit("navigationShow",t):t.emit("navigationHide",t),i&&i.toggleClass(t.params.navigation.hiddenClass),s&&s.toggleClass(t.params.navigation.hiddenClass)}}}},{name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create(){u.extend(this,{pagination:{init:U.init.bind(this),render:U.render.bind(this),update:U.update.bind(this),destroy:U.destroy.bind(this),dynamicBulletIndex:0}})},on:{init(){this.pagination.init(),this.pagination.render(),this.pagination.update()},activeIndexChange(){const e=this;(e.params.loop||void 0===e.snapIndex)&&e.pagination.update()},snapIndexChange(){const e=this;e.params.loop||e.pagination.update()},slidesLengthChange(){const e=this;e.params.loop&&(e.pagination.render(),e.pagination.update())},snapGridLengthChange(){const e=this;e.params.loop||(e.pagination.render(),e.pagination.update())},destroy(){this.pagination.destroy()},click(e){const t=this;if(t.params.pagination.el&&t.params.pagination.hideOnClick&&t.pagination.$el.length>0&&!d(e.target).hasClass(t.params.pagination.bulletClass)){!0===t.pagination.$el.hasClass(t.params.pagination.hiddenClass)?t.emit("paginationShow",t):t.emit("paginationHide",t),t.pagination.$el.toggleClass(t.params.pagination.hiddenClass)}}}},{name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}},create(){u.extend(this,{scrollbar:{init:Q.init.bind(this),destroy:Q.destroy.bind(this),updateSize:Q.updateSize.bind(this),setTranslate:Q.setTranslate.bind(this),setTransition:Q.setTransition.bind(this),enableDraggable:Q.enableDraggable.bind(this),disableDraggable:Q.disableDraggable.bind(this),setDragPosition:Q.setDragPosition.bind(this),getPointerPosition:Q.getPointerPosition.bind(this),onDragStart:Q.onDragStart.bind(this),onDragMove:Q.onDragMove.bind(this),onDragEnd:Q.onDragEnd.bind(this),isTouched:!1,timeout:null,dragTimeout:null}})},on:{init(){this.scrollbar.init(),this.scrollbar.updateSize(),this.scrollbar.setTranslate()},update(){this.scrollbar.updateSize()},resize(){this.scrollbar.updateSize()},observerUpdate(){this.scrollbar.updateSize()},setTranslate(){this.scrollbar.setTranslate()},setTransition(e){this.scrollbar.setTransition(e)},destroy(){this.scrollbar.destroy()}}},{name:"parallax",params:{parallax:{enabled:!1}},create(){u.extend(this,{parallax:{setTransform:K.setTransform.bind(this),setTranslate:K.setTranslate.bind(this),setTransition:K.setTransition.bind(this)}})},on:{beforeInit(){this.params.parallax.enabled&&(this.params.watchSlidesProgress=!0,this.originalParams.watchSlidesProgress=!0)},init(){this.params.parallax.enabled&&this.parallax.setTranslate()},setTranslate(){this.params.parallax.enabled&&this.parallax.setTranslate()},setTransition(e){this.params.parallax.enabled&&this.parallax.setTransition(e)}}},{name:"zoom",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}},create(){const e=this,t={enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}};"onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out".split(" ").forEach(i=>{t[i]=Z[i].bind(e)}),u.extend(e,{zoom:t});let i=1;Object.defineProperty(e.zoom,"scale",{get:()=>i,set(t){if(i!==t){const i=e.zoom.gesture.$imageEl?e.zoom.gesture.$imageEl[0]:void 0,s=e.zoom.gesture.$slideEl?e.zoom.gesture.$slideEl[0]:void 0;e.emit("zoomChange",t,i,s)}i=t}})},on:{init(){const e=this;e.params.zoom.enabled&&e.zoom.enable()},destroy(){this.zoom.disable()},touchStart(e){this.zoom.enabled&&this.zoom.onTouchStart(e)},touchEnd(e){this.zoom.enabled&&this.zoom.onTouchEnd(e)},doubleTap(e){const t=this;t.params.zoom.enabled&&t.zoom.enabled&&t.params.zoom.toggle&&t.zoom.toggle(e)},transitionEnd(){const e=this;e.zoom.enabled&&e.params.zoom.enabled&&e.zoom.onTransitionEnd()},slideChange(){const e=this;e.zoom.enabled&&e.params.zoom.enabled&&e.params.cssMode&&e.zoom.onTransitionEnd()}}},{name:"lazy",params:{lazy:{enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}},create(){u.extend(this,{lazy:{initialImageLoaded:!1,load:J.load.bind(this),loadInSlide:J.loadInSlide.bind(this)}})},on:{beforeInit(){const e=this;e.params.lazy.enabled&&e.params.preloadImages&&(e.params.preloadImages=!1)},init(){const e=this;e.params.lazy.enabled&&!e.params.loop&&0===e.params.initialSlide&&e.lazy.load()},scroll(){const e=this;e.params.freeMode&&!e.params.freeModeSticky&&e.lazy.load()},resize(){const e=this;e.params.lazy.enabled&&e.lazy.load()},scrollbarDragMove(){const e=this;e.params.lazy.enabled&&e.lazy.load()},transitionStart(){const e=this;e.params.lazy.enabled&&(e.params.lazy.loadOnTransitionStart||!e.params.lazy.loadOnTransitionStart&&!e.lazy.initialImageLoaded)&&e.lazy.load()},transitionEnd(){const e=this;e.params.lazy.enabled&&!e.params.lazy.loadOnTransitionStart&&e.lazy.load()},slideChange(){const e=this;e.params.lazy.enabled&&e.params.cssMode&&e.lazy.load()}}},{name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create(){u.extend(this,{controller:{control:this.params.controller.control,getInterpolateFunction:_.getInterpolateFunction.bind(this),setTranslate:_.setTranslate.bind(this),setTransition:_.setTransition.bind(this)}})},on:{update(){const e=this;e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},resize(){const e=this;e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},observerUpdate(){const e=this;e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},setTranslate(e,t){this.controller.control&&this.controller.setTranslate(e,t)},setTransition(e,t){this.controller.control&&this.controller.setTransition(e,t)}}},{name:"a11y",params:{a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}"}},create(){const e=this;u.extend(e,{a11y:{liveRegion:d(`<span class="${e.params.a11y.notificationClass}" aria-live="assertive" aria-atomic="true"></span>`)}}),Object.keys(ee).forEach(t=>{e.a11y[t]=ee[t].bind(e)})},on:{init(){this.params.a11y.enabled&&(this.a11y.init(),this.a11y.updateNavigation())},toEdge(){this.params.a11y.enabled&&this.a11y.updateNavigation()},fromEdge(){this.params.a11y.enabled&&this.a11y.updateNavigation()},paginationUpdate(){this.params.a11y.enabled&&this.a11y.updatePagination()},destroy(){this.params.a11y.enabled&&this.a11y.destroy()}}},{name:"history",params:{history:{enabled:!1,replaceState:!1,key:"slides"}},create(){u.extend(this,{history:{init:te.init.bind(this),setHistory:te.setHistory.bind(this),setHistoryPopState:te.setHistoryPopState.bind(this),scrollToSlide:te.scrollToSlide.bind(this),destroy:te.destroy.bind(this)}})},on:{init(){const e=this;e.params.history.enabled&&e.history.init()},destroy(){const e=this;e.params.history.enabled&&e.history.destroy()},transitionEnd(){const e=this;e.history.initialized&&e.history.setHistory(e.params.history.key,e.activeIndex)},slideChange(){const e=this;e.history.initialized&&e.params.cssMode&&e.history.setHistory(e.params.history.key,e.activeIndex)}}},{name:"hash-navigation",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create(){u.extend(this,{hashNavigation:{initialized:!1,init:ie.init.bind(this),destroy:ie.destroy.bind(this),setHash:ie.setHash.bind(this),onHashCange:ie.onHashCange.bind(this)}})},on:{init(){const e=this;e.params.hashNavigation.enabled&&e.hashNavigation.init()},destroy(){const e=this;e.params.hashNavigation.enabled&&e.hashNavigation.destroy()},transitionEnd(){const e=this;e.hashNavigation.initialized&&e.hashNavigation.setHash()},slideChange(){const e=this;e.hashNavigation.initialized&&e.params.cssMode&&e.hashNavigation.setHash()}}},{name:"autoplay",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create(){const e=this;u.extend(e,{autoplay:{running:!1,paused:!1,run:se.run.bind(e),start:se.start.bind(e),stop:se.stop.bind(e),pause:se.pause.bind(e),onVisibilityChange(){"hidden"===document.visibilityState&&e.autoplay.running&&e.autoplay.pause(),"visible"===document.visibilityState&&e.autoplay.paused&&(e.autoplay.run(),e.autoplay.paused=!1)},onTransitionEnd(t){e&&!e.destroyed&&e.$wrapperEl&&t.target===this&&(e.$wrapperEl[0].removeEventListener("transitionend",e.autoplay.onTransitionEnd),e.$wrapperEl[0].removeEventListener("webkitTransitionEnd",e.autoplay.onTransitionEnd),e.autoplay.paused=!1,e.autoplay.running?e.autoplay.run():e.autoplay.stop())}}})},on:{init(){const e=this;e.params.autoplay.enabled&&(e.autoplay.start(),document.addEventListener("visibilitychange",e.autoplay.onVisibilityChange))},beforeTransitionStart(e,t){const i=this;i.autoplay.running&&(t||!i.params.autoplay.disableOnInteraction?i.autoplay.pause(e):i.autoplay.stop())},sliderFirstMove(){const e=this;e.autoplay.running&&(e.params.autoplay.disableOnInteraction?e.autoplay.stop():e.autoplay.pause())},touchEnd(){const e=this;e.params.cssMode&&e.autoplay.paused&&!e.params.autoplay.disableOnInteraction&&e.autoplay.run()},destroy(){const e=this;e.autoplay.running&&e.autoplay.stop(),document.removeEventListener("visibilitychange",e.autoplay.onVisibilityChange)}}},{name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create(){u.extend(this,{fadeEffect:{setTranslate:ae.setTranslate.bind(this),setTransition:ae.setTransition.bind(this)}})},on:{beforeInit(){if("fade"!==this.params.effect)return;this.classNames.push(this.params.containerModifierClass+"fade");const e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};u.extend(this.params,e),u.extend(this.originalParams,e)},setTranslate(){"fade"===this.params.effect&&this.fadeEffect.setTranslate()},setTransition(e){"fade"===this.params.effect&&this.fadeEffect.setTransition(e)}}},{name:"effect-cube",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create(){u.extend(this,{cubeEffect:{setTranslate:ne.setTranslate.bind(this),setTransition:ne.setTransition.bind(this)}})},on:{beforeInit(){if("cube"!==this.params.effect)return;this.classNames.push(this.params.containerModifierClass+"cube"),this.classNames.push(this.params.containerModifierClass+"3d");const e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0};u.extend(this.params,e),u.extend(this.originalParams,e)},setTranslate(){"cube"===this.params.effect&&this.cubeEffect.setTranslate()},setTransition(e){"cube"===this.params.effect&&this.cubeEffect.setTransition(e)}}},{name:"effect-flip",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create(){u.extend(this,{flipEffect:{setTranslate:re.setTranslate.bind(this),setTransition:re.setTransition.bind(this)}})},on:{beforeInit(){if("flip"!==this.params.effect)return;this.classNames.push(this.params.containerModifierClass+"flip"),this.classNames.push(this.params.containerModifierClass+"3d");const e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};u.extend(this.params,e),u.extend(this.originalParams,e)},setTranslate(){"flip"===this.params.effect&&this.flipEffect.setTranslate()},setTransition(e){"flip"===this.params.effect&&this.flipEffect.setTransition(e)}}},{name:"effect-coverflow",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0}},create(){u.extend(this,{coverflowEffect:{setTranslate:oe.setTranslate.bind(this),setTransition:oe.setTransition.bind(this)}})},on:{beforeInit(){"coverflow"===this.params.effect&&(this.classNames.push(this.params.containerModifierClass+"coverflow"),this.classNames.push(this.params.containerModifierClass+"3d"),this.params.watchSlidesProgress=!0,this.originalParams.watchSlidesProgress=!0)},setTranslate(){"coverflow"===this.params.effect&&this.coverflowEffect.setTranslate()},setTransition(e){"coverflow"===this.params.effect&&this.coverflowEffect.setTransition(e)}}},{name:"thumbs",params:{thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-container-thumbs"}},create(){u.extend(this,{thumbs:{swiper:null,init:le.init.bind(this),update:le.update.bind(this),onThumbClick:le.onThumbClick.bind(this)}})},on:{beforeInit(){const{thumbs:e}=this.params;e&&e.swiper&&(this.thumbs.init(),this.thumbs.update(!0))},slideChange(){this.thumbs.swiper&&this.thumbs.update()},update(){this.thumbs.swiper&&this.thumbs.update()},resize(){this.thumbs.swiper&&this.thumbs.update()},observerUpdate(){this.thumbs.swiper&&this.thumbs.update()},setTransition(e){const t=this.thumbs.swiper;t&&t.setTransition(e)},beforeDestroy(){const e=this.thumbs.swiper;e&&this.thumbs.swiperCreated&&e&&e.destroy()}}}];void 0===D.use&&(D.use=D.Class.use,D.installModule=D.Class.installModule),D.use(de);var pe=D,ce=i.p+"images/5a5f1c7e3e8bb1038ce1a472afe24814.jpg",ue=i.p+"images/b2c02559bc8aab59b60460e7d6438305.jpg",he=i.p+"images/06efef131e6b91747f872103d15ad417.jpg",me=i.p+"images/5fd33e259c060a9bdbf02b3ff23149b5.jpg",fe=i.p+"images/ba21322c4f49ca420002379ffd75e98c.jpg",ge=i.p+"images/74167fad7ba475f1bb05d0e0612e5846.jpg",ve=i(2),be=i.p+"images/a4e6220a1255e17602e33fda9442f44c.jpg",we=i.p+"images/5717c5ce1e79feaf340063c6b361c349.jpg",xe=i.p+"images/2cbd3f2e5775d86a71139d0834ba313e.jpg",ye=i.p+"images/6bae50843b0cd9b12b32607c92dda31f.jpg",Ee=i.p+"images/096b027a9330d0549341b9aa55fb9dbe.jpg",Te=i(0),Se=i.p+"images/1af9810f8dca8bf4112cf6ce01188f28.png",Ce=i.p+"images/c95ba3318301fc90976fd691f3a5b131.png",Ae=i.p+"images/769118e960153213867f1d7a541d892a.jpg",Me=i.p+"images/7402a0b6e2df49c1d05e9c717b9abc9c.jpg",ke=i.p+"images/a338aa68a18eb52312366858512f0903.jpg",$e=i(1),ze=i.p+"images/5c94dd742a608a4c7abea8ac3ed43195.jpg";i(14);var Pe=[{title:"RoomFiles",date_dev:"2020",stack:"Django, Python",description:'\n        <p>\n        RoomFiles is a small project I made while learning Python and Django. Using \n        <a href="https://developers.google.com/drive" class="underline">Google Drive API</a>,\n        this simple web-app provides a place for users to upload files to (primarily lesson files \n        for online learning), make announcements, all in a virtual room. Due to the ongoing \n        (at the time of writing) pandemic situation, online learning is what our educational system\n        relies to, and this might help students store their lesson files on the cloud.\n        </p>\n        \n        <p>The web-app is up and available for viewing using the links below.</p>\n    ',features:["Make a room and invite your colleagues","Join multiple rooms at once","Upload your lesson files","Make announcements to stay on track","View and manage people in your room (if you're the room creator)","Get notified on recent activities"],prefix:"roomfiles",images:[{url:be,label:"RoomFiles"},{url:Te.default,label:"Create a room with your friends / colleagues!"},{url:Se,label:"Join / Create multiple rooms for your needs"},{url:we,label:"Store and share your lesson files"},{url:xe,label:"Make announcements for everyone to see"},{url:ye,label:"Get notified on recent activities"},{url:Ee,label:"Manage people in your room"}],links:[{site:"github",url:"https://github.com/christiankyle-ching/roomfiles",disabled:!1},{site:"open",url:"https://roomfiles.herokuapp.com/",disabled:!1}]},{title:"Budget Planner",date_dev:"2020",stack:"Ionic, Angular",description:'\n      <p>\n      A simple budget planner that I made using <a href="https://ionicframework.com/" class="underline">Ionic</a>\n      / <a href="https://angular.io/" class="underline">Angular</a> stack. While starting to learn about Ionic, \n      it has come to my idea to make a relatively simple budget planner/tracking app targeted for highschool\n      students that hopefully, they can use to track their allowances and expenses, and might encourage them\n      to save some of their money.\n      </p>\n    ',features:["Day-to-day tracking of allowances and expenses","Generate monthly summary, provide basic insight of expenditures and income","Able to backup data to a file for later recovery","Has a Help & Feedback feature that answers FAQs and provides an email box for suggestions"],prefix:"budget",images:[{url:ce,label:"Swipe to right for more images!"},{url:ue,label:"Supports dark mode"},{url:he,label:"Generate montly overview"},{url:me,label:"View your expenses"},{url:fe,label:"Track your savings"},{url:ge,label:"Never feel clueless! I'm here."},{url:ve.default,label:"Even supports local backup!"}],links:[{site:"github",url:"#",disabled:!0},{site:"open",url:"#",disabled:!0}]},{title:"Edzer Studio Schedule Management System",date_dev:"2019",stack:"C#, MySQL",description:'\n      <p>\n      This is a group project that I made together with a team, as a requirement for one of my \n      database-related subjects on my 2nd year. Along with a planned database schema, an interview \n      with <a href="https://www.facebook.com/EDZERSTUDIO/" class="underline">Edzer Music Studio</a>, \n      this WPF application (C# and MySQL served on XAMPP) features a scheduling system with fees \n      computation based on hours and intrument rentals, intrument management, and a user panel for \n      the administrator to assign other users with less privileges to the system.\n      </p>\n    ',features:["Schedule management that enables system user to create, update, and delete schedule records","Notifies the system user (admin or an employee), on upcoming schedules about to start","Able to calculate rental fee based on duration of rent, as well as add-ons (instrument rentals)","Management of instruments available for rental","User account control with two (2) levels of privileges (administrator and basic user)."],prefix:"edzer",images:[{url:Ce,label:"A Recording Studio Scheduling System"},{url:$e.default,label:"Login"},{url:Me,label:"Dashboard Overview"},{url:Ae,label:"Add Schedules"},{url:ze,label:"Be reminded of who's next"},{url:ke,label:"Manage Instruments"}],links:[{site:"github",url:"#",disabled:!0}]}],Le=[{language:"javascript",name:"Javascript",progress:50,projectExample:"budget"},{language:"sql",name:"SQL",progress:55,projectExample:"edzer"},{language:"python",name:"Python",progress:40,projectExample:"roomfiles"},{language:"csharp",name:"C#",progress:40,projectExample:"edzer"},{language:"java",name:"Java",progress:30}];if("content"in document.createElement("template")){if(null!=document.querySelector("#work-template")){var Ie=document.querySelector("#works"),De=document.querySelector("#work-template");Pe.forEach(e=>{let t=De.content.cloneNode(!0);t.querySelector(".w-col").id=""+e.prefix;let i=t.querySelector(".swiper-container");i.classList.add(e.prefix+"-slider");let s=i.querySelector(".swiper-wrapper"),a=document.createElement("div");a.classList.add("swiper-slide");let n=document.createElement("img"),r=document.createElement("div");r.classList.add("img-label"),a.appendChild(n),a.appendChild(r),e.images.forEach(e=>{let t=a.cloneNode(!0);t.querySelector("img").src=e.url,t.querySelector(".img-label").innerText=e.label,s.appendChild(t)}),i.querySelector(".swiper-pagination").classList.add(e.prefix+"-pagination");let o=t.querySelector(".w-title");o.innerText=""+e.title,t.querySelector(".w-stack").innerText=`${e.stack} | ${e.date_dev}`;let l=t.querySelector(".w-p"),d=l.querySelector("div");d.innerHTML=e.description;let p=document.createElement("h4");if(p.classList.add("list-header"),p.innerText="Features",e.features){let t=document.createElement("ul");t.classList.add("features-list"),t.appendChild(p),e.features.forEach(e=>{let i=document.createElement("li");i.innerText=e,t.append(i)}),d.appendChild(t)}let c=t.querySelector(".w-links"),u=document.createElement("li");u.appendChild(document.createElement("a")).appendChild(document.createElement("img")),e.links.forEach(e=>{let t=u.cloneNode(!0),i=t.querySelector("a");if(i.href=e.url,i.target="_blank",t.querySelector("img").classList.add("link-icon"),t.querySelector("img").classList.add(e.site),e.disabled)t.querySelector("a").classList.add("disabled");else if("open"===e.site){let t=document.createElement("a");t.href=e.url;let i=document.createElement("img");i.classList.add("link-icon-sm","open"),t.appendChild(i),o.appendChild(t)}c.appendChild(t)});let h=t.querySelector(".w-toggle");h.addEventListener("click",()=>{console.log(l),l.classList.contains("show-p")?(l.classList.remove("show-p"),h.innerText="Show More"):(l.classList.add("show-p"),h.innerText="Hide")}),Ie.appendChild(t)})}if(null!=document.querySelector("#skill-template")){var Oe=document.querySelector("#ul-skillset");De=document.querySelector("#skill-template");Le.forEach(e=>{let t=De.content.cloneNode(!0),i=t.querySelector(".skill-name"),s=i.querySelector("a");s.innerText=e.name,e.projectExample&&(s.href="./works.html#"+e.projectExample,s.classList.add("underline")),i.querySelector("span").id=e.language+"-value",t.querySelector(".progress-bar-container").style.width=e.progress+"%",Oe.appendChild(t)});let e=500,t=e+100;setTimeout(()=>{Le.forEach(e=>{!function(e,t,i){var s=document.getElementById(e),a=Math.floor(i/t),n=0;let r=setInterval(()=>{s.innerText=n+"%",n+1<=t?n+=1:clearInterval(r)},a)}(e.language+"-value",e.progress,t)})},e+500)}}var Be={direction:"horizontal",slidesPerView:1,freeMode:!0,freeModeMomentum:!0,freeModeMomentumRatio:.3};let Ge=Pe.map(e=>e.prefix);for(let e of Ge)new pe(`.${e}-slider`,{...Be,pagination:{el:`.${e}-pagination`,type:"bullets"}});new pe(".self-swiper",{pagination:{el:".self-swiper-pagination",type:"bullets"},initialSlide:0,breakpoints:{576:{slidesPerView:2}}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
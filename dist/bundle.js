!function(e){var t={};function i(s){if(t[s])return t[s].exports;var n=t[s]={i:s,l:!1,exports:{}};return e[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(s,n,function(t){return e[t]}.bind(null,n));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=10)}([function(e,t,i){"use strict";var s,n=function(){return void 0===s&&(s=Boolean(window&&document&&document.all&&!window.atob)),s},a=function(){var e={};return function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}e[t]=i}return e[t]}}(),r=[];function o(e){for(var t=-1,i=0;i<r.length;i++)if(r[i].identifier===e){t=i;break}return t}function l(e,t){for(var i={},s=[],n=0;n<e.length;n++){var a=e[n],l=t.base?a[0]+t.base:a[0],d=i[l]||0,p="".concat(l," ").concat(d);i[l]=d+1;var c=o(p),u={css:a[1],media:a[2],sourceMap:a[3]};-1!==c?(r[c].references++,r[c].updater(u)):r.push({identifier:p,updater:g(u,t),references:1}),s.push(p)}return s}function d(e){var t=document.createElement("style"),s=e.attributes||{};if(void 0===s.nonce){var n=i.nc;n&&(s.nonce=n)}if(Object.keys(s).forEach((function(e){t.setAttribute(e,s[e])})),"function"==typeof e.insert)e.insert(t);else{var r=a(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}return t}var p,c=(p=[],function(e,t){return p[e]=t,p.filter(Boolean).join("\n")});function u(e,t,i,s){var n=i?"":s.media?"@media ".concat(s.media," {").concat(s.css,"}"):s.css;if(e.styleSheet)e.styleSheet.cssText=c(t,n);else{var a=document.createTextNode(n),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(a,r[t]):e.appendChild(a)}}function h(e,t,i){var s=i.css,n=i.media,a=i.sourceMap;if(n?e.setAttribute("media",n):e.removeAttribute("media"),a&&btoa&&(s+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=s;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(s))}}var m=null,f=0;function g(e,t){var i,s,n;if(t.singleton){var a=f++;i=m||(m=d(t)),s=u.bind(null,i,a,!1),n=u.bind(null,i,a,!0)}else i=d(t),s=h.bind(null,i,t),n=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(i)};return s(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;s(e=t)}else n()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=n());var i=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var s=0;s<i.length;s++){var n=o(i[s]);r[n].references--}for(var a=l(e,t),d=0;d<i.length;d++){var p=o(i[d]);0===r[p].references&&(r[p].updater(),r.splice(p,1))}i=a}}}},function(e,t,i){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var i=function(e,t){var i=e[1]||"",s=e[3];if(!s)return i;if(t&&"function"==typeof btoa){var n=(r=s,o=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),"/*# ".concat(l," */")),a=s.sources.map((function(e){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(e," */")}));return[i].concat(a).concat([n]).join("\n")}var r,o,l;return[i].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(i,"}"):i})).join("")},t.i=function(e,i,s){"string"==typeof e&&(e=[[null,e,""]]);var n={};if(s)for(var a=0;a<this.length;a++){var r=this[a][0];null!=r&&(n[r]=!0)}for(var o=0;o<e.length;o++){var l=[].concat(e[o]);s&&n[l[0]]||(i&&(l[2]?l[2]="".concat(i," and ").concat(l[2]):l[2]=i),t.push(l))}},t}},function(e,t,i){var s=i(0),n=i(3);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[e.i,n,""]]);var a={insert:"head",singleton:!1};s(n,a);e.exports=n.locals||{}},function(e,t,i){var s=i(1),n=i(4),a=i(5),r=i(6),o=i(7);(t=s(!1)).push([e.i,"@import url(https://fonts.googleapis.com/css?family=Montserrat);"]),t.push([e.i,"@import url(https://fonts.googleapis.com/css?family=Inter);"]);var l=n(a),d=n(r),p=n(o);t.push([e.i,"* {\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n}\n\nnav {\n  padding: 15px;\n  position: relative;\n}\n\nnav .float-left {\n  display: block;\n  position: absolute;\n}\n\nnav > h1 {\n  text-align: center;\n}\n\nnav .back-button {\n  content: url("+l+');\n  max-width: 30px;\n}\n\nbody {\n  font-family: "Montserrat", "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;\n  color: white;\n  background-color: #030303;\n}\n\na {\n  text-decoration: none;\n  color: unset;\n}\n\na.disabled {\n  pointer-events: none;\n  cursor: default;\n  opacity: 0.3;\n}\n\na.underline {\n  display: inline-block;\n  color: #84c8ff;\n}\n\na.underline:after {\n  content: \'\';\n  width: 0px;\n  height: 2px;\n  display: block;\n  background: #84c8ff;\n  -webkit-transition: 300ms;\n  transition: 300ms;\n  -webkit-animation: expand-full-width 600ms 2 0s alternate;\n          animation: expand-full-width 600ms 2 0s alternate;\n}\n\na.underline:hover:after {\n  width: 100%;\n}\n\nbutton {\n  color: #05828e;\n  font-weight: 500;\n  background: none;\n  border: none;\n  font-family: "Montserrat", Arial, Helvetica, sans-serif;\n  font-size: 0.75em;\n  cursor: pointer;\n  padding: 0 30px;\n  height: 30px;\n  line-height: 30px;\n  border-radius: 15px;\n  border: 2px #05828e solid;\n  outline: none;\n}\n\n.container {\n  width: 100%;\n  height: 100vh;\n  background-color: #030303;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-flow: column wrap;\n          flex-flow: column wrap;\n  overflow: hidden;\n}\n\n#index-body {\n  font-size: 0.7em;\n}\n\n[class*="box-"] {\n  width: 50%;\n}\n\n.box-1 {\n  background-color: #1e2fc7;\n  -webkit-box-flex: 1;\n      -ms-flex: 1 1 33%;\n          flex: 1 1 33%;\n}\n\n.box-2 {\n  -webkit-box-flex: 2;\n      -ms-flex: 2 2 66%;\n          flex: 2 2 66%;\n}\n\n.box-3 {\n  -webkit-box-flex: 1;\n      -ms-flex: 1 1 33%;\n          flex: 1 1 33%;\n}\n\n.box-4 {\n  background-color: #05828e;\n  -webkit-box-flex: 1;\n      -ms-flex: 1 1 33%;\n          flex: 1 1 33%;\n}\n\n.box-5 {\n  background-color: #d47f00;\n  -webkit-box-flex: 1;\n      -ms-flex: 1 1 33%;\n          flex: 1 1 33%;\n}\n\n@media (min-width: 576px) {\n  #index-body {\n    font-size: 1em !important;\n  }\n}\n\n@media (min-width: 768px) {\n  #index-body {\n    font-size: 1.2em !important;\n  }\n  [class*="box-"] {\n    width: 33.33% !important;\n  }\n  .box-1,\n  .box-2,\n  .box-3,\n  .box-4,\n  .box-5 {\n    -webkit-box-flex: 1;\n        -ms-flex: 1 1 50%;\n            flex: 1 1 50%;\n  }\n  .box-3 {\n    -webkit-box-ordinal-group: 4;\n        -ms-flex-order: 3;\n            order: 3;\n  }\n  .box-4 {\n    -webkit-box-ordinal-group: 3;\n        -ms-flex-order: 2;\n            order: 2;\n  }\n  .box-5 {\n    -webkit-box-ordinal-group: 5;\n        -ms-flex-order: 4;\n            order: 4;\n  }\n  .box-2 {\n    -webkit-box-ordinal-group: 6;\n        -ms-flex-order: 5;\n            order: 5;\n  }\n}\n\n.box-1 {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  font-size: 1.2em;\n}\n\n.box-1 .name {\n  font-size: 2em;\n}\n\n.box-1 .dot {\n  font-size: 2em;\n  color: #d47f00;\n}\n\n.box-3 {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: end;\n      -ms-flex-pack: end;\n          justify-content: flex-end;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  position: relative;\n  overflow: hidden;\n}\n\n.box-3 .text-desc {\n  padding-right: 1em;\n  padding-top: 2em;\n}\n\n.box-3 .text-desc > h1 {\n  text-align: right;\n  font-weight: normal;\n}\n\n.box-3 .text-desc > h1 .text-desc-highlight {\n  font-weight: bold;\n  font-size: 1.4em;\n}\n\n.box-3 .desc-bg {\n  font-size: 8em;\n  font-weight: 1000;\n  opacity: 0.15;\n  position: absolute;\n  top: 0;\n  right: -10%;\n}\n\n.box-4 {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-flow: column nowrap;\n          flex-flow: column nowrap;\n  z-index: 0;\n  position: relative;\n  cursor: pointer;\n}\n\n.box-4 .col {\n  -webkit-box-flex: 1;\n      -ms-flex: 1 1 50%;\n          flex: 1 1 50%;\n}\n\n.box-4 .upper-box {\n  z-index: 2;\n  background-color: #044e55;\n  -webkit-box-shadow: 0 -5px 6px rgba(0, 0, 0, 0.16);\n          box-shadow: 0 -5px 6px rgba(0, 0, 0, 0.16);\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n}\n\n.box-4 .upper-box > h1 {\n  font-size: 2.4em;\n  letter-spacing: 0.05em;\n  opacity: 0.7;\n}\n\n.box-4 img {\n  position: absolute;\n  left: 50%;\n  margin-left: -25%;\n  top: 40%;\n  margin-top: -25%;\n  max-width: 50%;\n  z-index: 1;\n  opacity: 0.7;\n}\n\n.box-4:hover .upper-box > h1 {\n  -webkit-transition: 0.1s opacity ease-in;\n  transition: 0.1s opacity ease-in;\n  opacity: 1;\n}\n\n.box-4:hover img {\n  top: 30% !important;\n  -webkit-transition: 0.1s all ease-in, 0.1s opacity ease-in;\n  transition: 0.1s all ease-in, 0.1s opacity ease-in;\n  opacity: 1;\n}\n\n.box-5 {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  z-index: 0;\n  position: relative;\n  cursor: pointer;\n}\n\n.box-5 .col {\n  -webkit-box-flex: 1;\n      -ms-flex: 1 1 50%;\n          flex: 1 1 50%;\n}\n\n.box-5 .upper-box {\n  z-index: 2;\n  background-color: #945a02;\n  -webkit-box-shadow: -5px 0 6px rgba(0, 0, 0, 0.16);\n          box-shadow: -5px 0 6px rgba(0, 0, 0, 0.16);\n  -webkit-writing-mode: vertical-lr;\n      -ms-writing-mode: tb-lr;\n          writing-mode: vertical-lr;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n}\n\n.box-5 .upper-box > h1 {\n  font-size: 1.6em;\n  letter-spacing: 0.05em;\n  -ms-flex-item-align: center;\n      -ms-grid-row-align: center;\n      align-self: center;\n  opacity: 0.7;\n  -webkit-transform: rotate(180deg);\n          transform: rotate(180deg);\n}\n\n.box-5 img {\n  position: absolute;\n  left: 40%;\n  margin-left: -25%;\n  top: 50%;\n  margin-top: -25%;\n  max-width: 50%;\n  z-index: 1;\n  opacity: 0.7;\n}\n\n.box-5:hover .upper-box > h1 {\n  -webkit-transition: 0.1s opacity ease-in;\n  transition: 0.1s opacity ease-in;\n  opacity: 1;\n}\n\n.box-5:hover img {\n  left: 30% !important;\n  -webkit-transition: 0.1s all ease-in, 0.1s opacity ease-in;\n  transition: 0.1s all ease-in, 0.1s opacity ease-in;\n  opacity: 1;\n}\n\n.box-2 {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  z-index: 5;\n  overflow: hidden;\n  background-color: #030303;\n}\n\n.box-2 .col-1 {\n  -webkit-writing-mode: vertical-lr;\n      -ms-writing-mode: tb-lr;\n          writing-mode: vertical-lr;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: start;\n      -ms-flex-align: start;\n          align-items: flex-start;\n}\n\n.box-2 .col-1 > h1 {\n  font-size: 2.4em;\n  letter-spacing: 0.2em;\n  opacity: 0.7;\n}\n\n.box-2 .col-2 {\n  -webkit-box-flex: 1;\n      -ms-flex: 1;\n          flex: 1;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n}\n\n.box-2 .col-2 ul {\n  list-style: none;\n  width: 90%;\n  height: 90%;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: column;\n          flex-direction: column;\n  -webkit-box-pack: space-evenly;\n      -ms-flex-pack: space-evenly;\n          justify-content: space-evenly;\n}\n\n.box-2 .col-2 ul li .skill-name {\n  font-size: 1.2em;\n  padding-bottom: 0.4em;\n}\n\n.box-2 .col-2 ul li .full-bar,\n.box-2 .col-2 ul li .progress-bar {\n  height: 0.8em;\n  background-color: #1e2fc7;\n  border-radius: 0.8em;\n}\n\n.box-2 .col-2 ul li .progress-bar-container .progress-bar {\n  background-color: #d47f00;\n  -webkit-box-shadow: 0 5px 6px rgba(0, 0, 0, 0.16);\n          box-shadow: 0 5px 6px rgba(0, 0, 0, 0.16);\n}\n\n.javascript .progress-bar-container {\n  width: 60% !important;\n}\n\n.sql .progress-bar-container {\n  width: 50% !important;\n}\n\n.python .progress-bar-container {\n  width: 40% !important;\n}\n\n.csharp .progress-bar-container {\n  width: 30% !important;\n}\n\n.java .progress-bar-container {\n  width: 20% !important;\n}\n\n.box-1 .section-1,\n.box-1 .section-2 {\n  opacity: 0;\n}\n\n.box-1 .section-1 {\n  -webkit-animation: fade-to-right 0.5s forwards 0.1s ease-out;\n          animation: fade-to-right 0.5s forwards 0.1s ease-out;\n}\n\n.box-1 .section-2 {\n  -webkit-animation: fade-to-right 0.5s forwards 0s ease-out;\n          animation: fade-to-right 0.5s forwards 0s ease-out;\n}\n\n.box-3 .desc-bg,\n.box-3 .text-desc {\n  opacity: 0;\n}\n\n.box-3 .desc-bg {\n  -webkit-animation: fade-to-left-2 0.5s forwards 0.1s ease-out;\n          animation: fade-to-left-2 0.5s forwards 0.1s ease-out;\n}\n\n.box-3 .text-desc {\n  -webkit-animation: fade-to-left 0.5s forwards 0s ease-out;\n          animation: fade-to-left 0.5s forwards 0s ease-out;\n}\n\n.box-4 {\n  -webkit-animation: slide-up 0.5s forwards 0s ease-out;\n          animation: slide-up 0.5s forwards 0s ease-out;\n}\n\n.box-4 .upper-box {\n  -webkit-animation: slide-up 0.5s forwards 0s ease-in;\n          animation: slide-up 0.5s forwards 0s ease-in;\n}\n\n.box-5 {\n  -webkit-animation: slide-left 0.5s forwards 0s ease-out;\n          animation: slide-left 0.5s forwards 0s ease-out;\n}\n\n.box-5 .upper-box {\n  -webkit-animation: slide-left 0.5s forwards 0s ease-in;\n          animation: slide-left 0.5s forwards 0s ease-in;\n}\n\n.box-2 .col-1 {\n  -webkit-animation: fade-to-right 0.5s forwards 0s ease-out;\n          animation: fade-to-right 0.5s forwards 0s ease-out;\n}\n\n.box-2 .col-2 {\n  opacity: 0;\n  -webkit-animation: fade-to-right 0.5s forwards 0.4s ease-out;\n          animation: fade-to-right 0.5s forwards 0.4s ease-out;\n}\n\n.box-2 .col-2 .progress-bar {\n  width: 0;\n  -webkit-animation: expand-full-width 0.6s forwards 1s ease-out;\n          animation: expand-full-width 0.6s forwards 1s ease-out;\n}\n\n#works-body p,\n#works-body button,\n#works-body .img-label {\n  font-family: "Inter", "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;\n}\n\n.w-col {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: column;\n          flex-direction: column;\n  padding: 1em 0;\n}\n\n.w-col .w-col-slider {\n  overflow: hidden;\n}\n\n.w-col .w-col-slider img {\n  max-width: 80vw;\n  max-height: 50vh;\n}\n\n.w-col .w-col-slider .swiper-wrapper:hover {\n  cursor: -webkit-grab;\n  cursor: grab;\n}\n\n.w-col .w-col-slider .swiper-wrapper:active {\n  cursor: -webkit-grabbing;\n  cursor: grabbing;\n}\n\n.w-col .w-col-slider .swiper-container {\n  width: 100%;\n  height: 100% !important;\n}\n\n.w-col .w-col-slider .swiper-slide {\n  text-align: center;\n  padding-bottom: 30px;\n  height: unset !important;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: column;\n          flex-direction: column;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n}\n\n.w-col .w-col-slider .swiper-slide > img {\n  border-radius: 20px 50px;\n  background: linear-gradient(145deg, #090909, #070707);\n  -webkit-box-shadow: 20px 20px 60px #070707, -20px -20px 60px #090909;\n          box-shadow: 20px 20px 60px #070707, -20px -20px 60px #090909;\n  max-width: 75vw;\n}\n\n.w-col .w-col-slider .swiper-slide .img-label {\n  padding-top: 1em;\n}\n\n.w-col .w-col-desc {\n  -webkit-box-flex: 1;\n      -ms-flex: 1;\n          flex: 1;\n  padding: 1em;\n  overflow: hidden;\n  text-align: center;\n}\n\n.w-col .w-col-desc .w-stack {\n  display: block;\n  padding: 0.3em 0;\n}\n\n.w-col .w-col-desc .w-p {\n  padding: 0.5em 0 1em 0;\n  line-height: 1.3em;\n  -webkit-transition: -webkit-transform 0.6s ease-in-out;\n  transition: -webkit-transform 0.6s ease-in-out;\n  transition: transform 0.6s ease-in-out;\n  transition: transform 0.6s ease-in-out, -webkit-transform 0.6s ease-in-out;\n  -webkit-transform: translateX(100%);\n          transform: translateX(100%);\n  height: 0;\n}\n\n.w-col .w-col-desc .w-p > p {\n  -webkit-transition: opacity 0.6s ease-out;\n  transition: opacity 0.6s ease-out;\n  opacity: 0;\n  padding: 0 0 1em 0;\n}\n\n.w-col .w-col-desc .w-p > p > ul {\n  list-style-type: decimal;\n  list-style-position: inside;\n  padding-top: 1em;\n  font-size: 0.8em;\n}\n\n.show-p {\n  -webkit-transform: translateX(0) !important;\n          transform: translateX(0) !important;\n  height: auto !important;\n}\n\n.show-p > p {\n  opacity: 1 !important;\n}\n\n.swiper-pagination-bullet {\n  background-color: #05828e !important;\n}\n\n.w-links {\n  text-align: center;\n  list-style: none;\n}\n\n.w-links li {\n  display: inline-block;\n  margin-right: 1em;\n}\n\n.w-links li:last-child {\n  margin-right: 0 !important;\n}\n\n.w-links .github {\n  content: url('+d+");\n  width: 30px;\n  height: 30px;\n}\n\n.w-links .open {\n  content: url("+p+");\n  width: 30px;\n  height: 30px;\n}\n\n@media (min-width: 768px) {\n  .w-col {\n    -webkit-box-orient: horizontal !important;\n    -webkit-box-direction: normal !important;\n        -ms-flex-direction: row !important;\n            flex-direction: row !important;\n  }\n  .w-col .w-col-slider {\n    width: 50% !important;\n  }\n  .w-col .w-col-desc {\n    text-align: left;\n  }\n  .w-col .w-links {\n    text-align: left !important;\n  }\n  .w-col .swiper-slide {\n    max-width: 50vw !important;\n  }\n  .w-col .swiper-slide > img {\n    max-width: 40vw !important;\n  }\n  .w-col:nth-of-type(even) .w-col-slider {\n    -webkit-box-ordinal-group: 3;\n        -ms-flex-order: 2;\n            order: 2;\n  }\n  .w-col:nth-of-type(even) .w-col-desc {\n    text-align: right;\n  }\n  .w-col:nth-of-type(even) .w-links {\n    text-align: right !important;\n  }\n  .w-p {\n    -webkit-transition: none !important;\n    transition: none !important;\n    -webkit-transform: scaleY(1) !important;\n            transform: scaleY(1) !important;\n    height: auto !important;\n  }\n  .w-p > p {\n    opacity: 1 !important;\n  }\n  .w-toggle {\n    display: none !important;\n  }\n}\n\n@-webkit-keyframes fade-to-right {\n  from {\n    opacity: 0;\n    -webkit-transform: translateX(-2rem);\n            transform: translateX(-2rem);\n  }\n  to {\n    opacity: 1;\n    -webkit-transform: translateX(0);\n            transform: translateX(0);\n  }\n}\n\n@keyframes fade-to-right {\n  from {\n    opacity: 0;\n    -webkit-transform: translateX(-2rem);\n            transform: translateX(-2rem);\n  }\n  to {\n    opacity: 1;\n    -webkit-transform: translateX(0);\n            transform: translateX(0);\n  }\n}\n\n@-webkit-keyframes fade-to-left {\n  from {\n    opacity: 0;\n    -webkit-transform: translateX(2rem);\n            transform: translateX(2rem);\n  }\n  to {\n    opacity: 1;\n    -webkit-transform: translateX(0);\n            transform: translateX(0);\n  }\n}\n\n@keyframes fade-to-left {\n  from {\n    opacity: 0;\n    -webkit-transform: translateX(2rem);\n            transform: translateX(2rem);\n  }\n  to {\n    opacity: 1;\n    -webkit-transform: translateX(0);\n            transform: translateX(0);\n  }\n}\n\n@-webkit-keyframes fade-to-left-2 {\n  from {\n    opacity: 0;\n    -webkit-transform: translateX(2rem);\n            transform: translateX(2rem);\n  }\n  to {\n    opacity: 0.15;\n    -webkit-transform: translateX(0);\n            transform: translateX(0);\n  }\n}\n\n@keyframes fade-to-left-2 {\n  from {\n    opacity: 0;\n    -webkit-transform: translateX(2rem);\n            transform: translateX(2rem);\n  }\n  to {\n    opacity: 0.15;\n    -webkit-transform: translateX(0);\n            transform: translateX(0);\n  }\n}\n\n@-webkit-keyframes slide-up {\n  from {\n    opacity: 0;\n    -webkit-transform: translateY(100%);\n            transform: translateY(100%);\n  }\n  to {\n    opacity: 1;\n    -webkit-transform: translateY(0);\n            transform: translateY(0);\n  }\n}\n\n@keyframes slide-up {\n  from {\n    opacity: 0;\n    -webkit-transform: translateY(100%);\n            transform: translateY(100%);\n  }\n  to {\n    opacity: 1;\n    -webkit-transform: translateY(0);\n            transform: translateY(0);\n  }\n}\n\n@-webkit-keyframes slide-left {\n  from {\n    -webkit-transform: translateX(100%);\n            transform: translateX(100%);\n  }\n  to {\n    -webkit-transform: translateX(0);\n            transform: translateX(0);\n  }\n}\n\n@keyframes slide-left {\n  from {\n    -webkit-transform: translateX(100%);\n            transform: translateX(100%);\n  }\n  to {\n    -webkit-transform: translateX(0);\n            transform: translateX(0);\n  }\n}\n\n@-webkit-keyframes expand-full-width {\n  from {\n    width: 0%;\n  }\n  to {\n    width: 100%;\n  }\n}\n\n@keyframes expand-full-width {\n  from {\n    width: 0%;\n  }\n  to {\n    width: 100%;\n  }\n}",""]),e.exports=t},function(e,t,i){"use strict";e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},function(e,t,i){"use strict";i.r(t),t.default=i.p+"images/3531363a346961b31bde0e8f6e449a50.svg"},function(e,t,i){"use strict";i.r(t),t.default=i.p+"images/575986ca592433d730cd248de1a8733e.svg"},function(e,t,i){"use strict";i.r(t),t.default=i.p+"images/64fef803f0610171ae490cae2bc61d2c.svg"},function(e,t,i){var s=i(0),n=i(9);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[e.i,n,""]]);var a={insert:"head",singleton:!1};s(n,a);e.exports=n.locals||{}},function(e,t,i){(t=i(1)(!1)).push([e.i,"/**\n * Swiper 5.4.3\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * http://swiperjs.com\n *\n * Copyright 2014-2020 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: June 13, 2020\n */\n\n@font-face{font-family:swiper-icons;src:url(\"data:application/font-woff;charset=utf-8;base64, d09GRgABAAAAAAZgABAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAGRAAAABoAAAAci6qHkUdERUYAAAWgAAAAIwAAACQAYABXR1BPUwAABhQAAAAuAAAANuAY7+xHU1VCAAAFxAAAAFAAAABm2fPczU9TLzIAAAHcAAAASgAAAGBP9V5RY21hcAAAAkQAAACIAAABYt6F0cBjdnQgAAACzAAAAAQAAAAEABEBRGdhc3AAAAWYAAAACAAAAAj//wADZ2x5ZgAAAywAAADMAAAD2MHtryVoZWFkAAABbAAAADAAAAA2E2+eoWhoZWEAAAGcAAAAHwAAACQC9gDzaG10eAAAAigAAAAZAAAArgJkABFsb2NhAAAC0AAAAFoAAABaFQAUGG1heHAAAAG8AAAAHwAAACAAcABAbmFtZQAAA/gAAAE5AAACXvFdBwlwb3N0AAAFNAAAAGIAAACE5s74hXjaY2BkYGAAYpf5Hu/j+W2+MnAzMYDAzaX6QjD6/4//Bxj5GA8AuRwMYGkAPywL13jaY2BkYGA88P8Agx4j+/8fQDYfA1AEBWgDAIB2BOoAeNpjYGRgYNBh4GdgYgABEMnIABJzYNADCQAACWgAsQB42mNgYfzCOIGBlYGB0YcxjYGBwR1Kf2WQZGhhYGBiYGVmgAFGBiQQkOaawtDAoMBQxXjg/wEGPcYDDA4wNUA2CCgwsAAAO4EL6gAAeNpj2M0gyAACqxgGNWBkZ2D4/wMA+xkDdgAAAHjaY2BgYGaAYBkGRgYQiAHyGMF8FgYHIM3DwMHABGQrMOgyWDLEM1T9/w8UBfEMgLzE////P/5//f/V/xv+r4eaAAeMbAxwIUYmIMHEgKYAYjUcsDAwsLKxc3BycfPw8jEQA/gZBASFhEVExcQlJKWkZWTl5BUUlZRVVNXUNTQZBgMAAMR+E+gAEQFEAAAAKgAqACoANAA+AEgAUgBcAGYAcAB6AIQAjgCYAKIArAC2AMAAygDUAN4A6ADyAPwBBgEQARoBJAEuATgBQgFMAVYBYAFqAXQBfgGIAZIBnAGmAbIBzgHsAAB42u2NMQ6CUAyGW568x9AneYYgm4MJbhKFaExIOAVX8ApewSt4Bic4AfeAid3VOBixDxfPYEza5O+Xfi04YADggiUIULCuEJK8VhO4bSvpdnktHI5QCYtdi2sl8ZnXaHlqUrNKzdKcT8cjlq+rwZSvIVczNiezsfnP/uznmfPFBNODM2K7MTQ45YEAZqGP81AmGGcF3iPqOop0r1SPTaTbVkfUe4HXj97wYE+yNwWYxwWu4v1ugWHgo3S1XdZEVqWM7ET0cfnLGxWfkgR42o2PvWrDMBSFj/IHLaF0zKjRgdiVMwScNRAoWUoH78Y2icB/yIY09An6AH2Bdu/UB+yxopYshQiEvnvu0dURgDt8QeC8PDw7Fpji3fEA4z/PEJ6YOB5hKh4dj3EvXhxPqH/SKUY3rJ7srZ4FZnh1PMAtPhwP6fl2PMJMPDgeQ4rY8YT6Gzao0eAEA409DuggmTnFnOcSCiEiLMgxCiTI6Cq5DZUd3Qmp10vO0LaLTd2cjN4fOumlc7lUYbSQcZFkutRG7g6JKZKy0RmdLY680CDnEJ+UMkpFFe1RN7nxdVpXrC4aTtnaurOnYercZg2YVmLN/d/gczfEimrE/fs/bOuq29Zmn8tloORaXgZgGa78yO9/cnXm2BpaGvq25Dv9S4E9+5SIc9PqupJKhYFSSl47+Qcr1mYNAAAAeNptw0cKwkAAAMDZJA8Q7OUJvkLsPfZ6zFVERPy8qHh2YER+3i/BP83vIBLLySsoKimrqKqpa2hp6+jq6RsYGhmbmJqZSy0sraxtbO3sHRydnEMU4uR6yx7JJXveP7WrDycAAAAAAAH//wACeNpjYGRgYOABYhkgZgJCZgZNBkYGLQZtIJsFLMYAAAw3ALgAeNolizEKgDAQBCchRbC2sFER0YD6qVQiBCv/H9ezGI6Z5XBAw8CBK/m5iQQVauVbXLnOrMZv2oLdKFa8Pjuru2hJzGabmOSLzNMzvutpB3N42mNgZGBg4GKQYzBhYMxJLMlj4GBgAYow/P/PAJJhLM6sSoWKfWCAAwDAjgbRAAB42mNgYGBkAIIbCZo5IPrmUn0hGA0AO8EFTQAA\") format(\"woff\");font-weight:400;font-style:normal}:root{--swiper-theme-color:#007aff}.swiper-container{margin-left:auto;margin-right:auto;position:relative;overflow:hidden;list-style:none;padding:0;z-index:1}.swiper-container-vertical>.swiper-wrapper{flex-direction:column}.swiper-wrapper{position:relative;width:100%;height:100%;z-index:1;display:flex;transition-property:transform;box-sizing:content-box}.swiper-container-android .swiper-slide,.swiper-wrapper{transform:translate3d(0px,0,0)}.swiper-container-multirow>.swiper-wrapper{flex-wrap:wrap}.swiper-container-multirow-column>.swiper-wrapper{flex-wrap:wrap;flex-direction:column}.swiper-container-free-mode>.swiper-wrapper{transition-timing-function:ease-out;margin:0 auto}.swiper-slide{flex-shrink:0;width:100%;height:100%;position:relative;transition-property:transform}.swiper-slide-invisible-blank{visibility:hidden}.swiper-container-autoheight,.swiper-container-autoheight .swiper-slide{height:auto}.swiper-container-autoheight .swiper-wrapper{align-items:flex-start;transition-property:transform,height}.swiper-container-3d{perspective:1200px}.swiper-container-3d .swiper-cube-shadow,.swiper-container-3d .swiper-slide,.swiper-container-3d .swiper-slide-shadow-bottom,.swiper-container-3d .swiper-slide-shadow-left,.swiper-container-3d .swiper-slide-shadow-right,.swiper-container-3d .swiper-slide-shadow-top,.swiper-container-3d .swiper-wrapper{transform-style:preserve-3d}.swiper-container-3d .swiper-slide-shadow-bottom,.swiper-container-3d .swiper-slide-shadow-left,.swiper-container-3d .swiper-slide-shadow-right,.swiper-container-3d .swiper-slide-shadow-top{position:absolute;left:0;top:0;width:100%;height:100%;pointer-events:none;z-index:10}.swiper-container-3d .swiper-slide-shadow-left{background-image:linear-gradient(to left,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-3d .swiper-slide-shadow-right{background-image:linear-gradient(to right,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-3d .swiper-slide-shadow-top{background-image:linear-gradient(to top,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-3d .swiper-slide-shadow-bottom{background-image:linear-gradient(to bottom,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-css-mode>.swiper-wrapper{overflow:auto;scrollbar-width:none;-ms-overflow-style:none}.swiper-container-css-mode>.swiper-wrapper::-webkit-scrollbar{display:none}.swiper-container-css-mode>.swiper-wrapper>.swiper-slide{scroll-snap-align:start start}.swiper-container-horizontal.swiper-container-css-mode>.swiper-wrapper{scroll-snap-type:x mandatory}.swiper-container-vertical.swiper-container-css-mode>.swiper-wrapper{scroll-snap-type:y mandatory}:root{--swiper-navigation-size:44px}.swiper-button-next,.swiper-button-prev{position:absolute;top:50%;width:calc(var(--swiper-navigation-size)/ 44 * 27);height:var(--swiper-navigation-size);margin-top:calc(-1 * var(--swiper-navigation-size)/ 2);z-index:10;cursor:pointer;display:flex;align-items:center;justify-content:center;color:var(--swiper-navigation-color,var(--swiper-theme-color))}.swiper-button-next.swiper-button-disabled,.swiper-button-prev.swiper-button-disabled{opacity:.35;cursor:auto;pointer-events:none}.swiper-button-next:after,.swiper-button-prev:after{font-family:swiper-icons;font-size:var(--swiper-navigation-size);text-transform:none!important;letter-spacing:0;text-transform:none;font-variant:initial;line-height:1}.swiper-button-prev,.swiper-container-rtl .swiper-button-next{left:10px;right:auto}.swiper-button-prev:after,.swiper-container-rtl .swiper-button-next:after{content:'prev'}.swiper-button-next,.swiper-container-rtl .swiper-button-prev{right:10px;left:auto}.swiper-button-next:after,.swiper-container-rtl .swiper-button-prev:after{content:'next'}.swiper-button-next.swiper-button-white,.swiper-button-prev.swiper-button-white{--swiper-navigation-color:#ffffff}.swiper-button-next.swiper-button-black,.swiper-button-prev.swiper-button-black{--swiper-navigation-color:#000000}.swiper-button-lock{display:none}.swiper-pagination{position:absolute;text-align:center;transition:.3s opacity;transform:translate3d(0,0,0);z-index:10}.swiper-pagination.swiper-pagination-hidden{opacity:0}.swiper-container-horizontal>.swiper-pagination-bullets,.swiper-pagination-custom,.swiper-pagination-fraction{bottom:10px;left:0;width:100%}.swiper-pagination-bullets-dynamic{overflow:hidden;font-size:0}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transform:scale(.33);position:relative}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active{transform:scale(1)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-main{transform:scale(1)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev{transform:scale(.66)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev-prev{transform:scale(.33)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next{transform:scale(.66)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next-next{transform:scale(.33)}.swiper-pagination-bullet{width:8px;height:8px;display:inline-block;border-radius:100%;background:#000;opacity:.2}button.swiper-pagination-bullet{border:none;margin:0;padding:0;box-shadow:none;-webkit-appearance:none;-moz-appearance:none;appearance:none}.swiper-pagination-clickable .swiper-pagination-bullet{cursor:pointer}.swiper-pagination-bullet-active{opacity:1;background:var(--swiper-pagination-color,var(--swiper-theme-color))}.swiper-container-vertical>.swiper-pagination-bullets{right:10px;top:50%;transform:translate3d(0px,-50%,0)}.swiper-container-vertical>.swiper-pagination-bullets .swiper-pagination-bullet{margin:6px 0;display:block}.swiper-container-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic{top:50%;transform:translateY(-50%);width:8px}.swiper-container-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{display:inline-block;transition:.2s transform,.2s top}.swiper-container-horizontal>.swiper-pagination-bullets .swiper-pagination-bullet{margin:0 4px}.swiper-container-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic{left:50%;transform:translateX(-50%);white-space:nowrap}.swiper-container-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transition:.2s transform,.2s left}.swiper-container-horizontal.swiper-container-rtl>.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transition:.2s transform,.2s right}.swiper-pagination-progressbar{background:rgba(0,0,0,.25);position:absolute}.swiper-pagination-progressbar .swiper-pagination-progressbar-fill{background:var(--swiper-pagination-color,var(--swiper-theme-color));position:absolute;left:0;top:0;width:100%;height:100%;transform:scale(0);transform-origin:left top}.swiper-container-rtl .swiper-pagination-progressbar .swiper-pagination-progressbar-fill{transform-origin:right top}.swiper-container-horizontal>.swiper-pagination-progressbar,.swiper-container-vertical>.swiper-pagination-progressbar.swiper-pagination-progressbar-opposite{width:100%;height:4px;left:0;top:0}.swiper-container-horizontal>.swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,.swiper-container-vertical>.swiper-pagination-progressbar{width:4px;height:100%;left:0;top:0}.swiper-pagination-white{--swiper-pagination-color:#ffffff}.swiper-pagination-black{--swiper-pagination-color:#000000}.swiper-pagination-lock{display:none}.swiper-scrollbar{border-radius:10px;position:relative;-ms-touch-action:none;background:rgba(0,0,0,.1)}.swiper-container-horizontal>.swiper-scrollbar{position:absolute;left:1%;bottom:3px;z-index:50;height:5px;width:98%}.swiper-container-vertical>.swiper-scrollbar{position:absolute;right:3px;top:1%;z-index:50;width:5px;height:98%}.swiper-scrollbar-drag{height:100%;width:100%;position:relative;background:rgba(0,0,0,.5);border-radius:10px;left:0;top:0}.swiper-scrollbar-cursor-drag{cursor:move}.swiper-scrollbar-lock{display:none}.swiper-zoom-container{width:100%;height:100%;display:flex;justify-content:center;align-items:center;text-align:center}.swiper-zoom-container>canvas,.swiper-zoom-container>img,.swiper-zoom-container>svg{max-width:100%;max-height:100%;object-fit:contain}.swiper-slide-zoomed{cursor:move}.swiper-lazy-preloader{width:42px;height:42px;position:absolute;left:50%;top:50%;margin-left:-21px;margin-top:-21px;z-index:10;transform-origin:50%;animation:swiper-preloader-spin 1s infinite linear;box-sizing:border-box;border:4px solid var(--swiper-preloader-color,var(--swiper-theme-color));border-radius:50%;border-top-color:transparent}.swiper-lazy-preloader-white{--swiper-preloader-color:#fff}.swiper-lazy-preloader-black{--swiper-preloader-color:#000}@keyframes swiper-preloader-spin{100%{transform:rotate(360deg)}}.swiper-container .swiper-notification{position:absolute;left:0;top:0;pointer-events:none;opacity:0;z-index:-1000}.swiper-container-fade.swiper-container-free-mode .swiper-slide{transition-timing-function:ease-out}.swiper-container-fade .swiper-slide{pointer-events:none;transition-property:opacity}.swiper-container-fade .swiper-slide .swiper-slide{pointer-events:none}.swiper-container-fade .swiper-slide-active,.swiper-container-fade .swiper-slide-active .swiper-slide-active{pointer-events:auto}.swiper-container-cube{overflow:visible}.swiper-container-cube .swiper-slide{pointer-events:none;-webkit-backface-visibility:hidden;backface-visibility:hidden;z-index:1;visibility:hidden;transform-origin:0 0;width:100%;height:100%}.swiper-container-cube .swiper-slide .swiper-slide{pointer-events:none}.swiper-container-cube.swiper-container-rtl .swiper-slide{transform-origin:100% 0}.swiper-container-cube .swiper-slide-active,.swiper-container-cube .swiper-slide-active .swiper-slide-active{pointer-events:auto}.swiper-container-cube .swiper-slide-active,.swiper-container-cube .swiper-slide-next,.swiper-container-cube .swiper-slide-next+.swiper-slide,.swiper-container-cube .swiper-slide-prev{pointer-events:auto;visibility:visible}.swiper-container-cube .swiper-slide-shadow-bottom,.swiper-container-cube .swiper-slide-shadow-left,.swiper-container-cube .swiper-slide-shadow-right,.swiper-container-cube .swiper-slide-shadow-top{z-index:0;-webkit-backface-visibility:hidden;backface-visibility:hidden}.swiper-container-cube .swiper-cube-shadow{position:absolute;left:0;bottom:0px;width:100%;height:100%;background:#000;opacity:.6;-webkit-filter:blur(50px);filter:blur(50px);z-index:0}.swiper-container-flip{overflow:visible}.swiper-container-flip .swiper-slide{pointer-events:none;-webkit-backface-visibility:hidden;backface-visibility:hidden;z-index:1}.swiper-container-flip .swiper-slide .swiper-slide{pointer-events:none}.swiper-container-flip .swiper-slide-active,.swiper-container-flip .swiper-slide-active .swiper-slide-active{pointer-events:auto}.swiper-container-flip .swiper-slide-shadow-bottom,.swiper-container-flip .swiper-slide-shadow-left,.swiper-container-flip .swiper-slide-shadow-right,.swiper-container-flip .swiper-slide-shadow-top{z-index:0;-webkit-backface-visibility:hidden;backface-visibility:hidden}",""]),e.exports=t},function(e,t,i){"use strict";function s(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function n(e,t){void 0===e&&(e={}),void 0===t&&(t={}),Object.keys(t).forEach((function(i){void 0===e[i]?e[i]=t[i]:s(t[i])&&s(e[i])&&Object.keys(t[i]).length>0&&n(e[i],t[i])}))}i.r(t);var a="undefined"!=typeof document?document:{},r={body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},createElementNS:function(){return{}},importNode:function(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};n(a,r);var o="undefined"!=typeof window?window:{};n(o,{document:r,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState:function(){},pushState:function(){},go:function(){},back:function(){}},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){},matchMedia:function(){return{}}});class l{constructor(e){const t=this;for(let i=0;i<e.length;i+=1)t[i]=e[i];return t.length=e.length,this}}function d(e,t){const i=[];let s=0;if(e&&!t&&e instanceof l)return e;if(e)if("string"==typeof e){let n,r;const o=e.trim();if(o.indexOf("<")>=0&&o.indexOf(">")>=0){let e="div";for(0===o.indexOf("<li")&&(e="ul"),0===o.indexOf("<tr")&&(e="tbody"),0!==o.indexOf("<td")&&0!==o.indexOf("<th")||(e="tr"),0===o.indexOf("<tbody")&&(e="table"),0===o.indexOf("<option")&&(e="select"),r=a.createElement(e),r.innerHTML=o,s=0;s<r.childNodes.length;s+=1)i.push(r.childNodes[s])}else for(n=t||"#"!==e[0]||e.match(/[ .<>:~]/)?(t||a).querySelectorAll(e.trim()):[a.getElementById(e.trim().split("#")[1])],s=0;s<n.length;s+=1)n[s]&&i.push(n[s])}else if(e.nodeType||e===o||e===a)i.push(e);else if(e.length>0&&e[0].nodeType)for(s=0;s<e.length;s+=1)i.push(e[s]);return new l(i)}function p(e){const t=[];for(let i=0;i<e.length;i+=1)-1===t.indexOf(e[i])&&t.push(e[i]);return t}d.fn=l.prototype,d.Class=l,d.Dom7=l;"resize scroll".split(" ");const c={addClass:function(e){if(void 0===e)return this;const t=e.split(" ");for(let e=0;e<t.length;e+=1)for(let i=0;i<this.length;i+=1)void 0!==this[i]&&void 0!==this[i].classList&&this[i].classList.add(t[e]);return this},removeClass:function(e){const t=e.split(" ");for(let e=0;e<t.length;e+=1)for(let i=0;i<this.length;i+=1)void 0!==this[i]&&void 0!==this[i].classList&&this[i].classList.remove(t[e]);return this},hasClass:function(e){return!!this[0]&&this[0].classList.contains(e)},toggleClass:function(e){const t=e.split(" ");for(let e=0;e<t.length;e+=1)for(let i=0;i<this.length;i+=1)void 0!==this[i]&&void 0!==this[i].classList&&this[i].classList.toggle(t[e]);return this},attr:function(e,t){if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(let i=0;i<this.length;i+=1)if(2===arguments.length)this[i].setAttribute(e,t);else for(const t in e)this[i][t]=e[t],this[i].setAttribute(t,e[t]);return this},removeAttr:function(e){for(let t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},data:function(e,t){let i;if(void 0!==t){for(let s=0;s<this.length;s+=1)i=this[s],i.dom7ElementDataStorage||(i.dom7ElementDataStorage={}),i.dom7ElementDataStorage[e]=t;return this}if(i=this[0],i){if(i.dom7ElementDataStorage&&e in i.dom7ElementDataStorage)return i.dom7ElementDataStorage[e];const t=i.getAttribute("data-"+e);return t||void 0}},transform:function(e){for(let t=0;t<this.length;t+=1){const i=this[t].style;i.webkitTransform=e,i.transform=e}return this},transition:function(e){"string"!=typeof e&&(e+="ms");for(let t=0;t<this.length;t+=1){const i=this[t].style;i.webkitTransitionDuration=e,i.transitionDuration=e}return this},on:function(...e){let[t,i,s,n]=e;function a(e){const t=e.target;if(!t)return;const n=e.target.dom7EventData||[];if(n.indexOf(e)<0&&n.unshift(e),d(t).is(i))s.apply(t,n);else{const e=d(t).parents();for(let t=0;t<e.length;t+=1)d(e[t]).is(i)&&s.apply(e[t],n)}}function r(e){const t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),s.apply(this,t)}"function"==typeof e[1]&&([t,s,n]=e,i=void 0),n||(n=!1);const o=t.split(" ");let l;for(let e=0;e<this.length;e+=1){const t=this[e];if(i)for(l=0;l<o.length;l+=1){const e=o[l];t.dom7LiveListeners||(t.dom7LiveListeners={}),t.dom7LiveListeners[e]||(t.dom7LiveListeners[e]=[]),t.dom7LiveListeners[e].push({listener:s,proxyListener:a}),t.addEventListener(e,a,n)}else for(l=0;l<o.length;l+=1){const e=o[l];t.dom7Listeners||(t.dom7Listeners={}),t.dom7Listeners[e]||(t.dom7Listeners[e]=[]),t.dom7Listeners[e].push({listener:s,proxyListener:r}),t.addEventListener(e,r,n)}}return this},off:function(...e){let[t,i,s,n]=e;"function"==typeof e[1]&&([t,s,n]=e,i=void 0),n||(n=!1);const a=t.split(" ");for(let e=0;e<a.length;e+=1){const t=a[e];for(let e=0;e<this.length;e+=1){const a=this[e];let r;if(!i&&a.dom7Listeners?r=a.dom7Listeners[t]:i&&a.dom7LiveListeners&&(r=a.dom7LiveListeners[t]),r&&r.length)for(let e=r.length-1;e>=0;e-=1){const i=r[e];s&&i.listener===s||s&&i.listener&&i.listener.dom7proxy&&i.listener.dom7proxy===s?(a.removeEventListener(t,i.proxyListener,n),r.splice(e,1)):s||(a.removeEventListener(t,i.proxyListener,n),r.splice(e,1))}}}return this},trigger:function(...e){const t=e[0].split(" "),i=e[1];for(let s=0;s<t.length;s+=1){const n=t[s];for(let t=0;t<this.length;t+=1){const s=this[t];let r;try{r=new o.CustomEvent(n,{detail:i,bubbles:!0,cancelable:!0})}catch(e){r=a.createEvent("Event"),r.initEvent(n,!0,!0),r.detail=i}s.dom7EventData=e.filter((e,t)=>t>0),s.dispatchEvent(r),s.dom7EventData=[],delete s.dom7EventData}}return this},transitionEnd:function(e){const t=["webkitTransitionEnd","transitionend"],i=this;let s;function n(a){if(a.target===this)for(e.call(this,a),s=0;s<t.length;s+=1)i.off(t[s],n)}if(e)for(s=0;s<t.length;s+=1)i.on(t[s],n);return this},outerWidth:function(e){if(this.length>0){if(e){const e=this.styles();return this[0].offsetWidth+parseFloat(e.getPropertyValue("margin-right"))+parseFloat(e.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(this.length>0){if(e){const e=this.styles();return this[0].offsetHeight+parseFloat(e.getPropertyValue("margin-top"))+parseFloat(e.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},offset:function(){if(this.length>0){const e=this[0],t=e.getBoundingClientRect(),i=a.body,s=e.clientTop||i.clientTop||0,n=e.clientLeft||i.clientLeft||0,r=e===o?o.scrollY:e.scrollTop,l=e===o?o.scrollX:e.scrollLeft;return{top:t.top+r-s,left:t.left+l-n}}return null},css:function(e,t){let i;if(1===arguments.length){if("string"!=typeof e){for(i=0;i<this.length;i+=1)for(let t in e)this[i].style[t]=e[t];return this}if(this[0])return o.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e){for(i=0;i<this.length;i+=1)this[i].style[e]=t;return this}return this},each:function(e){if(!e)return this;for(let t=0;t<this.length;t+=1)if(!1===e.call(this[t],t,this[t]))return this;return this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:void 0;for(let t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(let t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){const t=this[0];let i,s;if(!t||void 0===e)return!1;if("string"==typeof e){if(t.matches)return t.matches(e);if(t.webkitMatchesSelector)return t.webkitMatchesSelector(e);if(t.msMatchesSelector)return t.msMatchesSelector(e);for(i=d(e),s=0;s<i.length;s+=1)if(i[s]===t)return!0;return!1}if(e===a)return t===a;if(e===o)return t===o;if(e.nodeType||e instanceof l){for(i=e.nodeType?[e]:e,s=0;s<i.length;s+=1)if(i[s]===t)return!0;return!1}return!1},index:function(){let e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;const t=this.length;let i;return e>t-1?new l([]):e<0?(i=t+e,new l(i<0?[]:[this[i]])):new l([this[e]])},append:function(...e){let t;for(let i=0;i<e.length;i+=1){t=e[i];for(let e=0;e<this.length;e+=1)if("string"==typeof t){const i=a.createElement("div");for(i.innerHTML=t;i.firstChild;)this[e].appendChild(i.firstChild)}else if(t instanceof l)for(let i=0;i<t.length;i+=1)this[e].appendChild(t[i]);else this[e].appendChild(t)}return this},prepend:function(e){let t,i;for(t=0;t<this.length;t+=1)if("string"==typeof e){const s=a.createElement("div");for(s.innerHTML=e,i=s.childNodes.length-1;i>=0;i-=1)this[t].insertBefore(s.childNodes[i],this[t].childNodes[0])}else if(e instanceof l)for(i=0;i<e.length;i+=1)this[t].insertBefore(e[i],this[t].childNodes[0]);else this[t].insertBefore(e,this[t].childNodes[0]);return this},next:function(e){return this.length>0?e?this[0].nextElementSibling&&d(this[0].nextElementSibling).is(e)?new l([this[0].nextElementSibling]):new l([]):this[0].nextElementSibling?new l([this[0].nextElementSibling]):new l([]):new l([])},nextAll:function(e){const t=[];let i=this[0];if(!i)return new l([]);for(;i.nextElementSibling;){const s=i.nextElementSibling;e?d(s).is(e)&&t.push(s):t.push(s),i=s}return new l(t)},prev:function(e){if(this.length>0){const t=this[0];return e?t.previousElementSibling&&d(t.previousElementSibling).is(e)?new l([t.previousElementSibling]):new l([]):t.previousElementSibling?new l([t.previousElementSibling]):new l([])}return new l([])},prevAll:function(e){const t=[];let i=this[0];if(!i)return new l([]);for(;i.previousElementSibling;){const s=i.previousElementSibling;e?d(s).is(e)&&t.push(s):t.push(s),i=s}return new l(t)},parent:function(e){const t=[];for(let i=0;i<this.length;i+=1)null!==this[i].parentNode&&(e?d(this[i].parentNode).is(e)&&t.push(this[i].parentNode):t.push(this[i].parentNode));return d(p(t))},parents:function(e){const t=[];for(let i=0;i<this.length;i+=1){let s=this[i].parentNode;for(;s;)e?d(s).is(e)&&t.push(s):t.push(s),s=s.parentNode}return d(p(t))},closest:function(e){let t=this;return void 0===e?new l([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){const t=[];for(let i=0;i<this.length;i+=1){const s=this[i].querySelectorAll(e);for(let e=0;e<s.length;e+=1)t.push(s[e])}return new l(t)},children:function(e){const t=[];for(let i=0;i<this.length;i+=1){const s=this[i].childNodes;for(let i=0;i<s.length;i+=1)e?1===s[i].nodeType&&d(s[i]).is(e)&&t.push(s[i]):1===s[i].nodeType&&t.push(s[i])}return new l(p(t))},filter:function(e){const t=[],i=this;for(let s=0;s<i.length;s+=1)e.call(i[s],s,i[s])&&t.push(i[s]);return new l(t)},remove:function(){for(let e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this},add:function(...e){const t=this;let i,s;for(i=0;i<e.length;i+=1){const n=d(e[i]);for(s=0;s<n.length;s+=1)t[t.length]=n[s],t.length+=1}return t},styles:function(){return this[0]?o.getComputedStyle(this[0],null):{}}};Object.keys(c).forEach(e=>{d.fn[e]=d.fn[e]||c[e]});const u={deleteProps(e){const t=e;Object.keys(t).forEach(e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}})},nextTick:(e,t=0)=>setTimeout(e,t),now:()=>Date.now(),getTranslate(e,t="x"){let i,s,n;const a=o.getComputedStyle(e,null);return o.WebKitCSSMatrix?(s=a.transform||a.webkitTransform,s.split(",").length>6&&(s=s.split(", ").map(e=>e.replace(",",".")).join(", ")),n=new o.WebKitCSSMatrix("none"===s?"":s)):(n=a.MozTransform||a.OTransform||a.MsTransform||a.msTransform||a.transform||a.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),i=n.toString().split(",")),"x"===t&&(s=o.WebKitCSSMatrix?n.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(s=o.WebKitCSSMatrix?n.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),s||0},parseUrlQuery(e){const t={};let i,s,n,a,r=e||o.location.href;if("string"==typeof r&&r.length)for(r=r.indexOf("?")>-1?r.replace(/\S*\?/,""):"",s=r.split("&").filter(e=>""!==e),a=s.length,i=0;i<a;i+=1)n=s[i].replace(/#\S+/g,"").split("="),t[decodeURIComponent(n[0])]=void 0===n[1]?void 0:decodeURIComponent(n[1])||"";return t},isObject:e=>"object"==typeof e&&null!==e&&e.constructor&&e.constructor===Object,extend(...e){const t=Object(e[0]);for(let i=1;i<e.length;i+=1){const s=e[i];if(null!=s){const e=Object.keys(Object(s));for(let i=0,n=e.length;i<n;i+=1){const n=e[i],a=Object.getOwnPropertyDescriptor(s,n);void 0!==a&&a.enumerable&&(u.isObject(t[n])&&u.isObject(s[n])?u.extend(t[n],s[n]):!u.isObject(t[n])&&u.isObject(s[n])?(t[n]={},u.extend(t[n],s[n])):t[n]=s[n])}}}return t}},h={touch:!!("ontouchstart"in o||o.DocumentTouch&&a instanceof o.DocumentTouch),pointerEvents:!!o.PointerEvent&&"maxTouchPoints"in o.navigator&&o.navigator.maxTouchPoints>=0,observer:"MutationObserver"in o||"WebkitMutationObserver"in o,passiveListener:function(){let e=!1;try{const t=Object.defineProperty({},"passive",{get(){e=!0}});o.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:"ongesturestart"in o};class m{constructor(e={}){const t=this;t.params=e,t.eventsListeners={},t.params&&t.params.on&&Object.keys(t.params.on).forEach(e=>{t.on(e,t.params.on[e])})}on(e,t,i){const s=this;if("function"!=typeof t)return s;const n=i?"unshift":"push";return e.split(" ").forEach(e=>{s.eventsListeners[e]||(s.eventsListeners[e]=[]),s.eventsListeners[e][n](t)}),s}once(e,t,i){const s=this;if("function"!=typeof t)return s;function n(...i){s.off(e,n),n.f7proxy&&delete n.f7proxy,t.apply(s,i)}return n.f7proxy=t,s.on(e,n,i)}off(e,t){const i=this;return i.eventsListeners?(e.split(" ").forEach(e=>{void 0===t?i.eventsListeners[e]=[]:i.eventsListeners[e]&&i.eventsListeners[e].length&&i.eventsListeners[e].forEach((s,n)=>{(s===t||s.f7proxy&&s.f7proxy===t)&&i.eventsListeners[e].splice(n,1)})}),i):i}emit(...e){const t=this;if(!t.eventsListeners)return t;let i,s,n;"string"==typeof e[0]||Array.isArray(e[0])?(i=e[0],s=e.slice(1,e.length),n=t):(i=e[0].events,s=e[0].data,n=e[0].context||t);return(Array.isArray(i)?i:i.split(" ")).forEach(e=>{if(t.eventsListeners&&t.eventsListeners[e]){const i=[];t.eventsListeners[e].forEach(e=>{i.push(e)}),i.forEach(e=>{e.apply(n,s)})}}),t}useModulesParams(e){const t=this;t.modules&&Object.keys(t.modules).forEach(i=>{const s=t.modules[i];s.params&&u.extend(e,s.params)})}useModules(e={}){const t=this;t.modules&&Object.keys(t.modules).forEach(i=>{const s=t.modules[i],n=e[i]||{};s.instance&&Object.keys(s.instance).forEach(e=>{const i=s.instance[e];t[e]="function"==typeof i?i.bind(t):i}),s.on&&t.on&&Object.keys(s.on).forEach(e=>{t.on(e,s.on[e])}),s.create&&s.create.bind(t)(n)})}static set components(e){this.use&&this.use(e)}static installModule(e,...t){const i=this;i.prototype.modules||(i.prototype.modules={});const s=e.name||`${Object.keys(i.prototype.modules).length}_${u.now()}`;return i.prototype.modules[s]=e,e.proto&&Object.keys(e.proto).forEach(t=>{i.prototype[t]=e.proto[t]}),e.static&&Object.keys(e.static).forEach(t=>{i[t]=e.static[t]}),e.install&&e.install.apply(i,t),i}static use(e,...t){const i=this;return Array.isArray(e)?(e.forEach(e=>i.installModule(e)),i):i.installModule(e,...t)}}var f={updateSize:function(){const e=this;let t,i;const s=e.$el;t=void 0!==e.params.width?e.params.width:s[0].clientWidth,i=void 0!==e.params.height?e.params.height:s[0].clientHeight,0===t&&e.isHorizontal()||0===i&&e.isVertical()||(t=t-parseInt(s.css("padding-left"),10)-parseInt(s.css("padding-right"),10),i=i-parseInt(s.css("padding-top"),10)-parseInt(s.css("padding-bottom"),10),u.extend(e,{width:t,height:i,size:e.isHorizontal()?t:i}))},updateSlides:function(){const e=this,t=e.params,{$wrapperEl:i,size:s,rtlTranslate:n,wrongRTL:a}=e,r=e.virtual&&t.virtual.enabled,l=r?e.virtual.slides.length:e.slides.length,d=i.children("."+e.params.slideClass),p=r?e.virtual.slides.length:d.length;let c=[];const h=[],m=[];function f(e){return!t.cssMode||e!==d.length-1}let g=t.slidesOffsetBefore;"function"==typeof g&&(g=t.slidesOffsetBefore.call(e));let v=t.slidesOffsetAfter;"function"==typeof v&&(v=t.slidesOffsetAfter.call(e));const w=e.snapGrid.length,b=e.snapGrid.length;let x,y,E=t.spaceBetween,T=-g,S=0,C=0;if(void 0===s)return;"string"==typeof E&&E.indexOf("%")>=0&&(E=parseFloat(E.replace("%",""))/100*s),e.virtualSize=-E,n?d.css({marginLeft:"",marginTop:""}):d.css({marginRight:"",marginBottom:""}),t.slidesPerColumn>1&&(x=Math.floor(p/t.slidesPerColumn)===p/e.params.slidesPerColumn?p:Math.ceil(p/t.slidesPerColumn)*t.slidesPerColumn,"auto"!==t.slidesPerView&&"row"===t.slidesPerColumnFill&&(x=Math.max(x,t.slidesPerView*t.slidesPerColumn)));const k=t.slidesPerColumn,A=x/k,M=Math.floor(p/t.slidesPerColumn);for(let i=0;i<p;i+=1){y=0;const n=d.eq(i);if(t.slidesPerColumn>1){let s,a,r;if("row"===t.slidesPerColumnFill&&t.slidesPerGroup>1){const e=Math.floor(i/(t.slidesPerGroup*t.slidesPerColumn)),o=i-t.slidesPerColumn*t.slidesPerGroup*e,l=0===e?t.slidesPerGroup:Math.min(Math.ceil((p-e*k*t.slidesPerGroup)/k),t.slidesPerGroup);r=Math.floor(o/l),a=o-r*l+e*t.slidesPerGroup,s=a+r*x/k,n.css({"-webkit-box-ordinal-group":s,"-moz-box-ordinal-group":s,"-ms-flex-order":s,"-webkit-order":s,order:s})}else"column"===t.slidesPerColumnFill?(a=Math.floor(i/k),r=i-a*k,(a>M||a===M&&r===k-1)&&(r+=1,r>=k&&(r=0,a+=1))):(r=Math.floor(i/A),a=i-r*A);n.css("margin-"+(e.isHorizontal()?"top":"left"),0!==r&&t.spaceBetween&&t.spaceBetween+"px")}if("none"!==n.css("display")){if("auto"===t.slidesPerView){const i=o.getComputedStyle(n[0],null),s=n[0].style.transform,a=n[0].style.webkitTransform;if(s&&(n[0].style.transform="none"),a&&(n[0].style.webkitTransform="none"),t.roundLengths)y=e.isHorizontal()?n.outerWidth(!0):n.outerHeight(!0);else if(e.isHorizontal()){const e=parseFloat(i.getPropertyValue("width")),t=parseFloat(i.getPropertyValue("padding-left")),s=parseFloat(i.getPropertyValue("padding-right")),n=parseFloat(i.getPropertyValue("margin-left")),a=parseFloat(i.getPropertyValue("margin-right")),r=i.getPropertyValue("box-sizing");y=r&&"border-box"===r?e+n+a:e+t+s+n+a}else{const e=parseFloat(i.getPropertyValue("height")),t=parseFloat(i.getPropertyValue("padding-top")),s=parseFloat(i.getPropertyValue("padding-bottom")),n=parseFloat(i.getPropertyValue("margin-top")),a=parseFloat(i.getPropertyValue("margin-bottom")),r=i.getPropertyValue("box-sizing");y=r&&"border-box"===r?e+n+a:e+t+s+n+a}s&&(n[0].style.transform=s),a&&(n[0].style.webkitTransform=a),t.roundLengths&&(y=Math.floor(y))}else y=(s-(t.slidesPerView-1)*E)/t.slidesPerView,t.roundLengths&&(y=Math.floor(y)),d[i]&&(e.isHorizontal()?d[i].style.width=y+"px":d[i].style.height=y+"px");d[i]&&(d[i].swiperSlideSize=y),m.push(y),t.centeredSlides?(T=T+y/2+S/2+E,0===S&&0!==i&&(T=T-s/2-E),0===i&&(T=T-s/2-E),Math.abs(T)<.001&&(T=0),t.roundLengths&&(T=Math.floor(T)),C%t.slidesPerGroup==0&&c.push(T),h.push(T)):(t.roundLengths&&(T=Math.floor(T)),(C-Math.min(e.params.slidesPerGroupSkip,C))%e.params.slidesPerGroup==0&&c.push(T),h.push(T),T=T+y+E),e.virtualSize+=y+E,S=y,C+=1}}let $;if(e.virtualSize=Math.max(e.virtualSize,s)+v,n&&a&&("slide"===t.effect||"coverflow"===t.effect)&&i.css({width:e.virtualSize+t.spaceBetween+"px"}),t.setWrapperSize&&(e.isHorizontal()?i.css({width:e.virtualSize+t.spaceBetween+"px"}):i.css({height:e.virtualSize+t.spaceBetween+"px"})),t.slidesPerColumn>1&&(e.virtualSize=(y+t.spaceBetween)*x,e.virtualSize=Math.ceil(e.virtualSize/t.slidesPerColumn)-t.spaceBetween,e.isHorizontal()?i.css({width:e.virtualSize+t.spaceBetween+"px"}):i.css({height:e.virtualSize+t.spaceBetween+"px"}),t.centeredSlides)){$=[];for(let i=0;i<c.length;i+=1){let s=c[i];t.roundLengths&&(s=Math.floor(s)),c[i]<e.virtualSize+c[0]&&$.push(s)}c=$}if(!t.centeredSlides){$=[];for(let i=0;i<c.length;i+=1){let n=c[i];t.roundLengths&&(n=Math.floor(n)),c[i]<=e.virtualSize-s&&$.push(n)}c=$,Math.floor(e.virtualSize-s)-Math.floor(c[c.length-1])>1&&c.push(e.virtualSize-s)}if(0===c.length&&(c=[0]),0!==t.spaceBetween&&(e.isHorizontal()?n?d.filter(f).css({marginLeft:E+"px"}):d.filter(f).css({marginRight:E+"px"}):d.filter(f).css({marginBottom:E+"px"})),t.centeredSlides&&t.centeredSlidesBounds){let e=0;m.forEach(i=>{e+=i+(t.spaceBetween?t.spaceBetween:0)}),e-=t.spaceBetween;const i=e-s;c=c.map(e=>e<0?-g:e>i?i+v:e)}if(t.centerInsufficientSlides){let e=0;if(m.forEach(i=>{e+=i+(t.spaceBetween?t.spaceBetween:0)}),e-=t.spaceBetween,e<s){const t=(s-e)/2;c.forEach((e,i)=>{c[i]=e-t}),h.forEach((e,i)=>{h[i]=e+t})}}u.extend(e,{slides:d,snapGrid:c,slidesGrid:h,slidesSizesGrid:m}),p!==l&&e.emit("slidesLengthChange"),c.length!==w&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),h.length!==b&&e.emit("slidesGridLengthChange"),(t.watchSlidesProgress||t.watchSlidesVisibility)&&e.updateSlidesOffset()},updateAutoHeight:function(e){const t=this,i=[];let s,n=0;if("number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed),"auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)t.visibleSlides.each((e,t)=>{i.push(t)});else for(s=0;s<Math.ceil(t.params.slidesPerView);s+=1){const e=t.activeIndex+s;if(e>t.slides.length)break;i.push(t.slides.eq(e)[0])}else i.push(t.slides.eq(t.activeIndex)[0]);for(s=0;s<i.length;s+=1)if(void 0!==i[s]){const e=i[s].offsetHeight;n=e>n?e:n}n&&t.$wrapperEl.css("height",n+"px")},updateSlidesOffset:function(){const e=this,t=e.slides;for(let i=0;i<t.length;i+=1)t[i].swiperSlideOffset=e.isHorizontal()?t[i].offsetLeft:t[i].offsetTop},updateSlidesProgress:function(e=this&&this.translate||0){const t=this,i=t.params,{slides:s,rtlTranslate:n}=t;if(0===s.length)return;void 0===s[0].swiperSlideOffset&&t.updateSlidesOffset();let a=-e;n&&(a=e),s.removeClass(i.slideVisibleClass),t.visibleSlidesIndexes=[],t.visibleSlides=[];for(let e=0;e<s.length;e+=1){const r=s[e],o=(a+(i.centeredSlides?t.minTranslate():0)-r.swiperSlideOffset)/(r.swiperSlideSize+i.spaceBetween);if(i.watchSlidesVisibility||i.centeredSlides&&i.autoHeight){const n=-(a-r.swiperSlideOffset),o=n+t.slidesSizesGrid[e];(n>=0&&n<t.size-1||o>1&&o<=t.size||n<=0&&o>=t.size)&&(t.visibleSlides.push(r),t.visibleSlidesIndexes.push(e),s.eq(e).addClass(i.slideVisibleClass))}r.progress=n?-o:o}t.visibleSlides=d(t.visibleSlides)},updateProgress:function(e){const t=this;if(void 0===e){const i=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*i||0}const i=t.params,s=t.maxTranslate()-t.minTranslate();let{progress:n,isBeginning:a,isEnd:r}=t;const o=a,l=r;0===s?(n=0,a=!0,r=!0):(n=(e-t.minTranslate())/s,a=n<=0,r=n>=1),u.extend(t,{progress:n,isBeginning:a,isEnd:r}),(i.watchSlidesProgress||i.watchSlidesVisibility||i.centeredSlides&&i.autoHeight)&&t.updateSlidesProgress(e),a&&!o&&t.emit("reachBeginning toEdge"),r&&!l&&t.emit("reachEnd toEdge"),(o&&!a||l&&!r)&&t.emit("fromEdge"),t.emit("progress",n)},updateSlidesClasses:function(){const e=this,{slides:t,params:i,$wrapperEl:s,activeIndex:n,realIndex:a}=e,r=e.virtual&&i.virtual.enabled;let o;t.removeClass(`${i.slideActiveClass} ${i.slideNextClass} ${i.slidePrevClass} ${i.slideDuplicateActiveClass} ${i.slideDuplicateNextClass} ${i.slideDuplicatePrevClass}`),o=r?e.$wrapperEl.find(`.${i.slideClass}[data-swiper-slide-index="${n}"]`):t.eq(n),o.addClass(i.slideActiveClass),i.loop&&(o.hasClass(i.slideDuplicateClass)?s.children(`.${i.slideClass}:not(.${i.slideDuplicateClass})[data-swiper-slide-index="${a}"]`).addClass(i.slideDuplicateActiveClass):s.children(`.${i.slideClass}.${i.slideDuplicateClass}[data-swiper-slide-index="${a}"]`).addClass(i.slideDuplicateActiveClass));let l=o.nextAll("."+i.slideClass).eq(0).addClass(i.slideNextClass);i.loop&&0===l.length&&(l=t.eq(0),l.addClass(i.slideNextClass));let d=o.prevAll("."+i.slideClass).eq(0).addClass(i.slidePrevClass);i.loop&&0===d.length&&(d=t.eq(-1),d.addClass(i.slidePrevClass)),i.loop&&(l.hasClass(i.slideDuplicateClass)?s.children(`.${i.slideClass}:not(.${i.slideDuplicateClass})[data-swiper-slide-index="${l.attr("data-swiper-slide-index")}"]`).addClass(i.slideDuplicateNextClass):s.children(`.${i.slideClass}.${i.slideDuplicateClass}[data-swiper-slide-index="${l.attr("data-swiper-slide-index")}"]`).addClass(i.slideDuplicateNextClass),d.hasClass(i.slideDuplicateClass)?s.children(`.${i.slideClass}:not(.${i.slideDuplicateClass})[data-swiper-slide-index="${d.attr("data-swiper-slide-index")}"]`).addClass(i.slideDuplicatePrevClass):s.children(`.${i.slideClass}.${i.slideDuplicateClass}[data-swiper-slide-index="${d.attr("data-swiper-slide-index")}"]`).addClass(i.slideDuplicatePrevClass))},updateActiveIndex:function(e){const t=this,i=t.rtlTranslate?t.translate:-t.translate,{slidesGrid:s,snapGrid:n,params:a,activeIndex:r,realIndex:o,snapIndex:l}=t;let d,p=e;if(void 0===p){for(let e=0;e<s.length;e+=1)void 0!==s[e+1]?i>=s[e]&&i<s[e+1]-(s[e+1]-s[e])/2?p=e:i>=s[e]&&i<s[e+1]&&(p=e+1):i>=s[e]&&(p=e);a.normalizeSlideIndex&&(p<0||void 0===p)&&(p=0)}if(n.indexOf(i)>=0)d=n.indexOf(i);else{const e=Math.min(a.slidesPerGroupSkip,p);d=e+Math.floor((p-e)/a.slidesPerGroup)}if(d>=n.length&&(d=n.length-1),p===r)return void(d!==l&&(t.snapIndex=d,t.emit("snapIndexChange")));const c=parseInt(t.slides.eq(p).attr("data-swiper-slide-index")||p,10);u.extend(t,{snapIndex:d,realIndex:c,previousIndex:r,activeIndex:p}),t.emit("activeIndexChange"),t.emit("snapIndexChange"),o!==c&&t.emit("realIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&t.emit("slideChange")},updateClickedSlide:function(e){const t=this,i=t.params,s=d(e.target).closest("."+i.slideClass)[0];let n=!1;if(s)for(let e=0;e<t.slides.length;e+=1)t.slides[e]===s&&(n=!0);if(!s||!n)return t.clickedSlide=void 0,void(t.clickedIndex=void 0);t.clickedSlide=s,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt(d(s).attr("data-swiper-slide-index"),10):t.clickedIndex=d(s).index(),i.slideToClickedSlide&&void 0!==t.clickedIndex&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()}};var g={getTranslate:function(e=(this.isHorizontal()?"x":"y")){const{params:t,rtlTranslate:i,translate:s,$wrapperEl:n}=this;if(t.virtualTranslate)return i?-s:s;if(t.cssMode)return s;let a=u.getTranslate(n[0],e);return i&&(a=-a),a||0},setTranslate:function(e,t){const i=this,{rtlTranslate:s,params:n,$wrapperEl:a,wrapperEl:r,progress:o}=i;let l,d=0,p=0;i.isHorizontal()?d=s?-e:e:p=e,n.roundLengths&&(d=Math.floor(d),p=Math.floor(p)),n.cssMode?r[i.isHorizontal()?"scrollLeft":"scrollTop"]=i.isHorizontal()?-d:-p:n.virtualTranslate||a.transform(`translate3d(${d}px, ${p}px, 0px)`),i.previousTranslate=i.translate,i.translate=i.isHorizontal()?d:p;const c=i.maxTranslate()-i.minTranslate();l=0===c?0:(e-i.minTranslate())/c,l!==o&&i.updateProgress(e),i.emit("setTranslate",i.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e=0,t=this.params.speed,i=!0,s=!0,n){const a=this,{params:r,wrapperEl:o}=a;if(a.animating&&r.preventInteractionOnTransition)return!1;const l=a.minTranslate(),d=a.maxTranslate();let p;if(p=s&&e>l?l:s&&e<d?d:e,a.updateProgress(p),r.cssMode){const e=a.isHorizontal();return 0===t?o[e?"scrollLeft":"scrollTop"]=-p:o.scrollTo?o.scrollTo({[e?"left":"top"]:-p,behavior:"smooth"}):o[e?"scrollLeft":"scrollTop"]=-p,!0}return 0===t?(a.setTransition(0),a.setTranslate(p),i&&(a.emit("beforeTransitionStart",t,n),a.emit("transitionEnd"))):(a.setTransition(t),a.setTranslate(p),i&&(a.emit("beforeTransitionStart",t,n),a.emit("transitionStart")),a.animating||(a.animating=!0,a.onTranslateToWrapperTransitionEnd||(a.onTranslateToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.$wrapperEl[0].removeEventListener("transitionend",a.onTranslateToWrapperTransitionEnd),a.$wrapperEl[0].removeEventListener("webkitTransitionEnd",a.onTranslateToWrapperTransitionEnd),a.onTranslateToWrapperTransitionEnd=null,delete a.onTranslateToWrapperTransitionEnd,i&&a.emit("transitionEnd"))}),a.$wrapperEl[0].addEventListener("transitionend",a.onTranslateToWrapperTransitionEnd),a.$wrapperEl[0].addEventListener("webkitTransitionEnd",a.onTranslateToWrapperTransitionEnd))),!0}};var v={setTransition:function(e,t){const i=this;i.params.cssMode||i.$wrapperEl.transition(e),i.emit("setTransition",e,t)},transitionStart:function(e=!0,t){const i=this,{activeIndex:s,params:n,previousIndex:a}=i;if(n.cssMode)return;n.autoHeight&&i.updateAutoHeight();let r=t;if(r||(r=s>a?"next":s<a?"prev":"reset"),i.emit("transitionStart"),e&&s!==a){if("reset"===r)return void i.emit("slideResetTransitionStart");i.emit("slideChangeTransitionStart"),"next"===r?i.emit("slideNextTransitionStart"):i.emit("slidePrevTransitionStart")}},transitionEnd:function(e=!0,t){const i=this,{activeIndex:s,previousIndex:n,params:a}=i;if(i.animating=!1,a.cssMode)return;i.setTransition(0);let r=t;if(r||(r=s>n?"next":s<n?"prev":"reset"),i.emit("transitionEnd"),e&&s!==n){if("reset"===r)return void i.emit("slideResetTransitionEnd");i.emit("slideChangeTransitionEnd"),"next"===r?i.emit("slideNextTransitionEnd"):i.emit("slidePrevTransitionEnd")}}};var w={slideTo:function(e=0,t=this.params.speed,i=!0,s){const n=this;let a=e;a<0&&(a=0);const{params:r,snapGrid:o,slidesGrid:l,previousIndex:d,activeIndex:p,rtlTranslate:c,wrapperEl:u}=n;if(n.animating&&r.preventInteractionOnTransition)return!1;const h=Math.min(n.params.slidesPerGroupSkip,a);let m=h+Math.floor((a-h)/n.params.slidesPerGroup);m>=o.length&&(m=o.length-1),(p||r.initialSlide||0)===(d||0)&&i&&n.emit("beforeSlideChangeStart");const f=-o[m];if(n.updateProgress(f),r.normalizeSlideIndex)for(let e=0;e<l.length;e+=1)-Math.floor(100*f)>=Math.floor(100*l[e])&&(a=e);if(n.initialized&&a!==p){if(!n.allowSlideNext&&f<n.translate&&f<n.minTranslate())return!1;if(!n.allowSlidePrev&&f>n.translate&&f>n.maxTranslate()&&(p||0)!==a)return!1}let g;if(g=a>p?"next":a<p?"prev":"reset",c&&-f===n.translate||!c&&f===n.translate)return n.updateActiveIndex(a),r.autoHeight&&n.updateAutoHeight(),n.updateSlidesClasses(),"slide"!==r.effect&&n.setTranslate(f),"reset"!==g&&(n.transitionStart(i,g),n.transitionEnd(i,g)),!1;if(r.cssMode){const e=n.isHorizontal();let i=-f;return c&&(i=u.scrollWidth-u.offsetWidth-i),0===t?u[e?"scrollLeft":"scrollTop"]=i:u.scrollTo?u.scrollTo({[e?"left":"top"]:i,behavior:"smooth"}):u[e?"scrollLeft":"scrollTop"]=i,!0}return 0===t?(n.setTransition(0),n.setTranslate(f),n.updateActiveIndex(a),n.updateSlidesClasses(),n.emit("beforeTransitionStart",t,s),n.transitionStart(i,g),n.transitionEnd(i,g)):(n.setTransition(t),n.setTranslate(f),n.updateActiveIndex(a),n.updateSlidesClasses(),n.emit("beforeTransitionStart",t,s),n.transitionStart(i,g),n.animating||(n.animating=!0,n.onSlideToWrapperTransitionEnd||(n.onSlideToWrapperTransitionEnd=function(e){n&&!n.destroyed&&e.target===this&&(n.$wrapperEl[0].removeEventListener("transitionend",n.onSlideToWrapperTransitionEnd),n.$wrapperEl[0].removeEventListener("webkitTransitionEnd",n.onSlideToWrapperTransitionEnd),n.onSlideToWrapperTransitionEnd=null,delete n.onSlideToWrapperTransitionEnd,n.transitionEnd(i,g))}),n.$wrapperEl[0].addEventListener("transitionend",n.onSlideToWrapperTransitionEnd),n.$wrapperEl[0].addEventListener("webkitTransitionEnd",n.onSlideToWrapperTransitionEnd))),!0},slideToLoop:function(e=0,t=this.params.speed,i=!0,s){const n=this;let a=e;return n.params.loop&&(a+=n.loopedSlides),n.slideTo(a,t,i,s)},slideNext:function(e=this.params.speed,t=!0,i){const s=this,{params:n,animating:a}=s,r=s.activeIndex<n.slidesPerGroupSkip?1:n.slidesPerGroup;if(n.loop){if(a)return!1;s.loopFix(),s._clientLeft=s.$wrapperEl[0].clientLeft}return s.slideTo(s.activeIndex+r,e,t,i)},slidePrev:function(e=this.params.speed,t=!0,i){const s=this,{params:n,animating:a,snapGrid:r,slidesGrid:o,rtlTranslate:l}=s;if(n.loop){if(a)return!1;s.loopFix(),s._clientLeft=s.$wrapperEl[0].clientLeft}function d(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const p=d(l?s.translate:-s.translate),c=r.map(e=>d(e));o.map(e=>d(e)),r[c.indexOf(p)];let u,h=r[c.indexOf(p)-1];return void 0===h&&n.cssMode&&r.forEach(e=>{!h&&p>=e&&(h=e)}),void 0!==h&&(u=o.indexOf(h),u<0&&(u=s.activeIndex-1)),s.slideTo(u,e,t,i)},slideReset:function(e=this.params.speed,t=!0,i){return this.slideTo(this.activeIndex,e,t,i)},slideToClosest:function(e=this.params.speed,t=!0,i,s=.5){const n=this;let a=n.activeIndex;const r=Math.min(n.params.slidesPerGroupSkip,a),o=r+Math.floor((a-r)/n.params.slidesPerGroup),l=n.rtlTranslate?n.translate:-n.translate;if(l>=n.snapGrid[o]){const e=n.snapGrid[o];l-e>(n.snapGrid[o+1]-e)*s&&(a+=n.params.slidesPerGroup)}else{const e=n.snapGrid[o-1];l-e<=(n.snapGrid[o]-e)*s&&(a-=n.params.slidesPerGroup)}return a=Math.max(a,0),a=Math.min(a,n.slidesGrid.length-1),n.slideTo(a,e,t,i)},slideToClickedSlide:function(){const e=this,{params:t,$wrapperEl:i}=e,s="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let n,a=e.clickedIndex;if(t.loop){if(e.animating)return;n=parseInt(d(e.clickedSlide).attr("data-swiper-slide-index"),10),t.centeredSlides?a<e.loopedSlides-s/2||a>e.slides.length-e.loopedSlides+s/2?(e.loopFix(),a=i.children(`.${t.slideClass}[data-swiper-slide-index="${n}"]:not(.${t.slideDuplicateClass})`).eq(0).index(),u.nextTick(()=>{e.slideTo(a)})):e.slideTo(a):a>e.slides.length-s?(e.loopFix(),a=i.children(`.${t.slideClass}[data-swiper-slide-index="${n}"]:not(.${t.slideDuplicateClass})`).eq(0).index(),u.nextTick(()=>{e.slideTo(a)})):e.slideTo(a)}else e.slideTo(a)}};var b={loopCreate:function(){const e=this,{params:t,$wrapperEl:i}=e;i.children(`.${t.slideClass}.${t.slideDuplicateClass}`).remove();let s=i.children("."+t.slideClass);if(t.loopFillGroupWithBlank){const e=t.slidesPerGroup-s.length%t.slidesPerGroup;if(e!==t.slidesPerGroup){for(let s=0;s<e;s+=1){const e=d(a.createElement("div")).addClass(`${t.slideClass} ${t.slideBlankClass}`);i.append(e)}s=i.children("."+t.slideClass)}}"auto"!==t.slidesPerView||t.loopedSlides||(t.loopedSlides=s.length),e.loopedSlides=Math.ceil(parseFloat(t.loopedSlides||t.slidesPerView,10)),e.loopedSlides+=t.loopAdditionalSlides,e.loopedSlides>s.length&&(e.loopedSlides=s.length);const n=[],r=[];s.each((t,i)=>{const a=d(i);t<e.loopedSlides&&r.push(i),t<s.length&&t>=s.length-e.loopedSlides&&n.push(i),a.attr("data-swiper-slide-index",t)});for(let e=0;e<r.length;e+=1)i.append(d(r[e].cloneNode(!0)).addClass(t.slideDuplicateClass));for(let e=n.length-1;e>=0;e-=1)i.prepend(d(n[e].cloneNode(!0)).addClass(t.slideDuplicateClass))},loopFix:function(){const e=this;e.emit("beforeLoopFix");const{activeIndex:t,slides:i,loopedSlides:s,allowSlidePrev:n,allowSlideNext:a,snapGrid:r,rtlTranslate:o}=e;let l;e.allowSlidePrev=!0,e.allowSlideNext=!0;const d=-r[t]-e.getTranslate();if(t<s){l=i.length-3*s+t,l+=s;e.slideTo(l,0,!1,!0)&&0!==d&&e.setTranslate((o?-e.translate:e.translate)-d)}else if(t>=i.length-s){l=-i.length+t+s,l+=s;e.slideTo(l,0,!1,!0)&&0!==d&&e.setTranslate((o?-e.translate:e.translate)-d)}e.allowSlidePrev=n,e.allowSlideNext=a,e.emit("loopFix")},loopDestroy:function(){const{$wrapperEl:e,params:t,slides:i}=this;e.children(`.${t.slideClass}.${t.slideDuplicateClass},.${t.slideClass}.${t.slideBlankClass}`).remove(),i.removeAttr("data-swiper-slide-index")}};var x={setGrabCursor:function(e){if(h.touch||!this.params.simulateTouch||this.params.watchOverflow&&this.isLocked||this.params.cssMode)return;const t=this.el;t.style.cursor="move",t.style.cursor=e?"-webkit-grabbing":"-webkit-grab",t.style.cursor=e?"-moz-grabbin":"-moz-grab",t.style.cursor=e?"grabbing":"grab"},unsetGrabCursor:function(){h.touch||this.params.watchOverflow&&this.isLocked||this.params.cssMode||(this.el.style.cursor="")}};var y={appendSlide:function(e){const t=this,{$wrapperEl:i,params:s}=t;if(s.loop&&t.loopDestroy(),"object"==typeof e&&"length"in e)for(let t=0;t<e.length;t+=1)e[t]&&i.append(e[t]);else i.append(e);s.loop&&t.loopCreate(),s.observer&&h.observer||t.update()},prependSlide:function(e){const t=this,{params:i,$wrapperEl:s,activeIndex:n}=t;i.loop&&t.loopDestroy();let a=n+1;if("object"==typeof e&&"length"in e){for(let t=0;t<e.length;t+=1)e[t]&&s.prepend(e[t]);a=n+e.length}else s.prepend(e);i.loop&&t.loopCreate(),i.observer&&h.observer||t.update(),t.slideTo(a,0,!1)},addSlide:function(e,t){const i=this,{$wrapperEl:s,params:n,activeIndex:a}=i;let r=a;n.loop&&(r-=i.loopedSlides,i.loopDestroy(),i.slides=s.children("."+n.slideClass));const o=i.slides.length;if(e<=0)return void i.prependSlide(t);if(e>=o)return void i.appendSlide(t);let l=r>e?r+1:r;const d=[];for(let t=o-1;t>=e;t-=1){const e=i.slides.eq(t);e.remove(),d.unshift(e)}if("object"==typeof t&&"length"in t){for(let e=0;e<t.length;e+=1)t[e]&&s.append(t[e]);l=r>e?r+t.length:r}else s.append(t);for(let e=0;e<d.length;e+=1)s.append(d[e]);n.loop&&i.loopCreate(),n.observer&&h.observer||i.update(),n.loop?i.slideTo(l+i.loopedSlides,0,!1):i.slideTo(l,0,!1)},removeSlide:function(e){const t=this,{params:i,$wrapperEl:s,activeIndex:n}=t;let a=n;i.loop&&(a-=t.loopedSlides,t.loopDestroy(),t.slides=s.children("."+i.slideClass));let r,o=a;if("object"==typeof e&&"length"in e){for(let i=0;i<e.length;i+=1)r=e[i],t.slides[r]&&t.slides.eq(r).remove(),r<o&&(o-=1);o=Math.max(o,0)}else r=e,t.slides[r]&&t.slides.eq(r).remove(),r<o&&(o-=1),o=Math.max(o,0);i.loop&&t.loopCreate(),i.observer&&h.observer||t.update(),i.loop?t.slideTo(o+t.loopedSlides,0,!1):t.slideTo(o,0,!1)},removeAllSlides:function(){const e=this,t=[];for(let i=0;i<e.slides.length;i+=1)t.push(i);e.removeSlide(t)}};const E=function(){const e=o.navigator.platform,t=o.navigator.userAgent,i={ios:!1,android:!1,androidChrome:!1,desktop:!1,iphone:!1,ipod:!1,ipad:!1,edge:!1,ie:!1,firefox:!1,macos:!1,windows:!1,cordova:!(!o.cordova&&!o.phonegap),phonegap:!(!o.cordova&&!o.phonegap),electron:!1},s=o.screen.width,n=o.screen.height,a=t.match(/(Android);?[\s\/]+([\d.]+)?/);let r=t.match(/(iPad).*OS\s([\d_]+)/);const l=t.match(/(iPod)(.*OS\s([\d_]+))?/),d=!r&&t.match(/(iPhone\sOS|iOS)\s([\d_]+)/),p=t.indexOf("MSIE ")>=0||t.indexOf("Trident/")>=0,c=t.indexOf("Edge/")>=0,u=t.indexOf("Gecko/")>=0&&t.indexOf("Firefox/")>=0,m="Win32"===e,f=t.toLowerCase().indexOf("electron")>=0;let g="MacIntel"===e;return!r&&g&&h.touch&&(1024===s&&1366===n||834===s&&1194===n||834===s&&1112===n||768===s&&1024===n)&&(r=t.match(/(Version)\/([\d.]+)/),g=!1),i.ie=p,i.edge=c,i.firefox=u,a&&!m&&(i.os="android",i.osVersion=a[2],i.android=!0,i.androidChrome=t.toLowerCase().indexOf("chrome")>=0),(r||d||l)&&(i.os="ios",i.ios=!0),d&&!l&&(i.osVersion=d[2].replace(/_/g,"."),i.iphone=!0),r&&(i.osVersion=r[2].replace(/_/g,"."),i.ipad=!0),l&&(i.osVersion=l[3]?l[3].replace(/_/g,"."):null,i.ipod=!0),i.ios&&i.osVersion&&t.indexOf("Version/")>=0&&"10"===i.osVersion.split(".")[0]&&(i.osVersion=t.toLowerCase().split("version/")[1].split(" ")[0]),i.webView=!(!(d||r||l)||!t.match(/.*AppleWebKit(?!.*Safari)/i)&&!o.navigator.standalone)||o.matchMedia&&o.matchMedia("(display-mode: standalone)").matches,i.webview=i.webView,i.standalone=i.webView,i.desktop=!(i.ios||i.android)||f,i.desktop&&(i.electron=f,i.macos=g,i.windows=m,i.macos&&(i.os="macos"),i.windows&&(i.os="windows")),i.pixelRatio=o.devicePixelRatio||1,i}();function T(e){const t=this,i=t.touchEventsData,{params:s,touches:n}=t;if(t.animating&&s.preventInteractionOnTransition)return;let r=e;r.originalEvent&&(r=r.originalEvent);const l=d(r.target);if("wrapper"===s.touchEventsTarget&&!l.closest(t.wrapperEl).length)return;if(i.isTouchEvent="touchstart"===r.type,!i.isTouchEvent&&"which"in r&&3===r.which)return;if(!i.isTouchEvent&&"button"in r&&r.button>0)return;if(i.isTouched&&i.isMoved)return;if(s.noSwiping&&l.closest(s.noSwipingSelector?s.noSwipingSelector:"."+s.noSwipingClass)[0])return void(t.allowClick=!0);if(s.swipeHandler&&!l.closest(s.swipeHandler)[0])return;n.currentX="touchstart"===r.type?r.targetTouches[0].pageX:r.pageX,n.currentY="touchstart"===r.type?r.targetTouches[0].pageY:r.pageY;const p=n.currentX,c=n.currentY,h=s.edgeSwipeDetection||s.iOSEdgeSwipeDetection,m=s.edgeSwipeThreshold||s.iOSEdgeSwipeThreshold;if(!h||!(p<=m||p>=o.screen.width-m)){if(u.extend(i,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),n.startX=p,n.startY=c,i.touchStartTime=u.now(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,s.threshold>0&&(i.allowThresholdMove=!1),"touchstart"!==r.type){let e=!0;l.is(i.formElements)&&(e=!1),a.activeElement&&d(a.activeElement).is(i.formElements)&&a.activeElement!==l[0]&&a.activeElement.blur();const n=e&&t.allowTouchMove&&s.touchStartPreventDefault;(s.touchStartForcePreventDefault||n)&&r.preventDefault()}t.emit("touchStart",r)}}function S(e){const t=this,i=t.touchEventsData,{params:s,touches:n,rtlTranslate:r}=t;let o=e;if(o.originalEvent&&(o=o.originalEvent),!i.isTouched)return void(i.startMoving&&i.isScrolling&&t.emit("touchMoveOpposite",o));if(i.isTouchEvent&&"touchmove"!==o.type)return;const l="touchmove"===o.type&&o.targetTouches&&(o.targetTouches[0]||o.changedTouches[0]),p="touchmove"===o.type?l.pageX:o.pageX,c="touchmove"===o.type?l.pageY:o.pageY;if(o.preventedByNestedSwiper)return n.startX=p,void(n.startY=c);if(!t.allowTouchMove)return t.allowClick=!1,void(i.isTouched&&(u.extend(n,{startX:p,startY:c,currentX:p,currentY:c}),i.touchStartTime=u.now()));if(i.isTouchEvent&&s.touchReleaseOnEdges&&!s.loop)if(t.isVertical()){if(c<n.startY&&t.translate<=t.maxTranslate()||c>n.startY&&t.translate>=t.minTranslate())return i.isTouched=!1,void(i.isMoved=!1)}else if(p<n.startX&&t.translate<=t.maxTranslate()||p>n.startX&&t.translate>=t.minTranslate())return;if(i.isTouchEvent&&a.activeElement&&o.target===a.activeElement&&d(o.target).is(i.formElements))return i.isMoved=!0,void(t.allowClick=!1);if(i.allowTouchCallbacks&&t.emit("touchMove",o),o.targetTouches&&o.targetTouches.length>1)return;n.currentX=p,n.currentY=c;const h=n.currentX-n.startX,m=n.currentY-n.startY;if(t.params.threshold&&Math.sqrt(h**2+m**2)<t.params.threshold)return;if(void 0===i.isScrolling){let e;t.isHorizontal()&&n.currentY===n.startY||t.isVertical()&&n.currentX===n.startX?i.isScrolling=!1:h*h+m*m>=25&&(e=180*Math.atan2(Math.abs(m),Math.abs(h))/Math.PI,i.isScrolling=t.isHorizontal()?e>s.touchAngle:90-e>s.touchAngle)}if(i.isScrolling&&t.emit("touchMoveOpposite",o),void 0===i.startMoving&&(n.currentX===n.startX&&n.currentY===n.startY||(i.startMoving=!0)),i.isScrolling)return void(i.isTouched=!1);if(!i.startMoving)return;t.allowClick=!1,!s.cssMode&&o.cancelable&&o.preventDefault(),s.touchMoveStopPropagation&&!s.nested&&o.stopPropagation(),i.isMoved||(s.loop&&t.loopFix(),i.startTranslate=t.getTranslate(),t.setTransition(0),t.animating&&t.$wrapperEl.trigger("webkitTransitionEnd transitionend"),i.allowMomentumBounce=!1,!s.grabCursor||!0!==t.allowSlideNext&&!0!==t.allowSlidePrev||t.setGrabCursor(!0),t.emit("sliderFirstMove",o)),t.emit("sliderMove",o),i.isMoved=!0;let f=t.isHorizontal()?h:m;n.diff=f,f*=s.touchRatio,r&&(f=-f),t.swipeDirection=f>0?"prev":"next",i.currentTranslate=f+i.startTranslate;let g=!0,v=s.resistanceRatio;if(s.touchReleaseOnEdges&&(v=0),f>0&&i.currentTranslate>t.minTranslate()?(g=!1,s.resistance&&(i.currentTranslate=t.minTranslate()-1+(-t.minTranslate()+i.startTranslate+f)**v)):f<0&&i.currentTranslate<t.maxTranslate()&&(g=!1,s.resistance&&(i.currentTranslate=t.maxTranslate()+1-(t.maxTranslate()-i.startTranslate-f)**v)),g&&(o.preventedByNestedSwiper=!0),!t.allowSlideNext&&"next"===t.swipeDirection&&i.currentTranslate<i.startTranslate&&(i.currentTranslate=i.startTranslate),!t.allowSlidePrev&&"prev"===t.swipeDirection&&i.currentTranslate>i.startTranslate&&(i.currentTranslate=i.startTranslate),s.threshold>0){if(!(Math.abs(f)>s.threshold||i.allowThresholdMove))return void(i.currentTranslate=i.startTranslate);if(!i.allowThresholdMove)return i.allowThresholdMove=!0,n.startX=n.currentX,n.startY=n.currentY,i.currentTranslate=i.startTranslate,void(n.diff=t.isHorizontal()?n.currentX-n.startX:n.currentY-n.startY)}s.followFinger&&!s.cssMode&&((s.freeMode||s.watchSlidesProgress||s.watchSlidesVisibility)&&(t.updateActiveIndex(),t.updateSlidesClasses()),s.freeMode&&(0===i.velocities.length&&i.velocities.push({position:n[t.isHorizontal()?"startX":"startY"],time:i.touchStartTime}),i.velocities.push({position:n[t.isHorizontal()?"currentX":"currentY"],time:u.now()})),t.updateProgress(i.currentTranslate),t.setTranslate(i.currentTranslate))}function C(e){const t=this,i=t.touchEventsData,{params:s,touches:n,rtlTranslate:a,$wrapperEl:r,slidesGrid:o,snapGrid:l}=t;let d=e;if(d.originalEvent&&(d=d.originalEvent),i.allowTouchCallbacks&&t.emit("touchEnd",d),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&s.grabCursor&&t.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);s.grabCursor&&i.isMoved&&i.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const p=u.now(),c=p-i.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(d),t.emit("tap click",d),c<300&&p-i.lastClickTime<300&&t.emit("doubleTap doubleClick",d)),i.lastClickTime=u.now(),u.nextTick(()=>{t.destroyed||(t.allowClick=!0)}),!i.isTouched||!i.isMoved||!t.swipeDirection||0===n.diff||i.currentTranslate===i.startTranslate)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);let h;if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,h=s.followFinger?a?t.translate:-t.translate:-i.currentTranslate,s.cssMode)return;if(s.freeMode){if(h<-t.minTranslate())return void t.slideTo(t.activeIndex);if(h>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(s.freeModeMomentum){if(i.velocities.length>1){const e=i.velocities.pop(),n=i.velocities.pop(),a=e.position-n.position,r=e.time-n.time;t.velocity=a/r,t.velocity/=2,Math.abs(t.velocity)<s.freeModeMinimumVelocity&&(t.velocity=0),(r>150||u.now()-e.time>300)&&(t.velocity=0)}else t.velocity=0;t.velocity*=s.freeModeMomentumVelocityRatio,i.velocities.length=0;let e=1e3*s.freeModeMomentumRatio;const n=t.velocity*e;let o=t.translate+n;a&&(o=-o);let d,p=!1;const c=20*Math.abs(t.velocity)*s.freeModeMomentumBounceRatio;let h;if(o<t.maxTranslate())s.freeModeMomentumBounce?(o+t.maxTranslate()<-c&&(o=t.maxTranslate()-c),d=t.maxTranslate(),p=!0,i.allowMomentumBounce=!0):o=t.maxTranslate(),s.loop&&s.centeredSlides&&(h=!0);else if(o>t.minTranslate())s.freeModeMomentumBounce?(o-t.minTranslate()>c&&(o=t.minTranslate()+c),d=t.minTranslate(),p=!0,i.allowMomentumBounce=!0):o=t.minTranslate(),s.loop&&s.centeredSlides&&(h=!0);else if(s.freeModeSticky){let e;for(let t=0;t<l.length;t+=1)if(l[t]>-o){e=t;break}o=Math.abs(l[e]-o)<Math.abs(l[e-1]-o)||"next"===t.swipeDirection?l[e]:l[e-1],o=-o}if(h&&t.once("transitionEnd",()=>{t.loopFix()}),0!==t.velocity){if(e=a?Math.abs((-o-t.translate)/t.velocity):Math.abs((o-t.translate)/t.velocity),s.freeModeSticky){const i=Math.abs((a?-o:o)-t.translate),n=t.slidesSizesGrid[t.activeIndex];e=i<n?s.speed:i<2*n?1.5*s.speed:2.5*s.speed}}else if(s.freeModeSticky)return void t.slideToClosest();s.freeModeMomentumBounce&&p?(t.updateProgress(d),t.setTransition(e),t.setTranslate(o),t.transitionStart(!0,t.swipeDirection),t.animating=!0,r.transitionEnd(()=>{t&&!t.destroyed&&i.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(s.speed),setTimeout(()=>{t.setTranslate(d),r.transitionEnd(()=>{t&&!t.destroyed&&t.transitionEnd()})},0))})):t.velocity?(t.updateProgress(o),t.setTransition(e),t.setTranslate(o),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,r.transitionEnd(()=>{t&&!t.destroyed&&t.transitionEnd()}))):t.updateProgress(o),t.updateActiveIndex(),t.updateSlidesClasses()}else if(s.freeModeSticky)return void t.slideToClosest();return void((!s.freeModeMomentum||c>=s.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses()))}let m=0,f=t.slidesSizesGrid[0];for(let e=0;e<o.length;e+=e<s.slidesPerGroupSkip?1:s.slidesPerGroup){const t=e<s.slidesPerGroupSkip-1?1:s.slidesPerGroup;void 0!==o[e+t]?h>=o[e]&&h<o[e+t]&&(m=e,f=o[e+t]-o[e]):h>=o[e]&&(m=e,f=o[o.length-1]-o[o.length-2])}const g=(h-o[m])/f,v=m<s.slidesPerGroupSkip-1?1:s.slidesPerGroup;if(c>s.longSwipesMs){if(!s.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(g>=s.longSwipesRatio?t.slideTo(m+v):t.slideTo(m)),"prev"===t.swipeDirection&&(g>1-s.longSwipesRatio?t.slideTo(m+v):t.slideTo(m))}else{if(!s.shortSwipes)return void t.slideTo(t.activeIndex);t.navigation&&(d.target===t.navigation.nextEl||d.target===t.navigation.prevEl)?d.target===t.navigation.nextEl?t.slideTo(m+v):t.slideTo(m):("next"===t.swipeDirection&&t.slideTo(m+v),"prev"===t.swipeDirection&&t.slideTo(m))}}function k(){const e=this,{params:t,el:i}=e;if(i&&0===i.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:s,allowSlidePrev:n,snapGrid:a}=e;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses(),("auto"===t.slidesPerView||t.slidesPerView>1)&&e.isEnd&&!e.isBeginning&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.run(),e.allowSlidePrev=n,e.allowSlideNext=s,e.params.watchOverflow&&a!==e.snapGrid&&e.checkOverflow()}function A(e){const t=this;t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}function M(){const e=this,{wrapperEl:t,rtlTranslate:i}=e;let s;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=i?t.scrollWidth-t.offsetWidth-t.scrollLeft:-t.scrollLeft:e.translate=-t.scrollTop,-0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const n=e.maxTranslate()-e.minTranslate();s=0===n?0:(e.translate-e.minTranslate())/n,s!==e.progress&&e.updateProgress(i?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}let $=!1;function z(){}var P={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,preventInteractionOnTransition:!1,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,slidesPerGroupSkip:0,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0};const L={update:f,translate:g,transition:v,slide:w,loop:b,grabCursor:x,manipulation:y,events:{attachEvents:function(){const e=this,{params:t,touchEvents:i,el:s,wrapperEl:n}=e;e.onTouchStart=T.bind(e),e.onTouchMove=S.bind(e),e.onTouchEnd=C.bind(e),t.cssMode&&(e.onScroll=M.bind(e)),e.onClick=A.bind(e);const r=!!t.nested;if(!h.touch&&h.pointerEvents)s.addEventListener(i.start,e.onTouchStart,!1),a.addEventListener(i.move,e.onTouchMove,r),a.addEventListener(i.end,e.onTouchEnd,!1);else{if(h.touch){const n=!("touchstart"!==i.start||!h.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};s.addEventListener(i.start,e.onTouchStart,n),s.addEventListener(i.move,e.onTouchMove,h.passiveListener?{passive:!1,capture:r}:r),s.addEventListener(i.end,e.onTouchEnd,n),i.cancel&&s.addEventListener(i.cancel,e.onTouchEnd,n),$||(a.addEventListener("touchstart",z),$=!0)}(t.simulateTouch&&!E.ios&&!E.android||t.simulateTouch&&!h.touch&&E.ios)&&(s.addEventListener("mousedown",e.onTouchStart,!1),a.addEventListener("mousemove",e.onTouchMove,r),a.addEventListener("mouseup",e.onTouchEnd,!1))}(t.preventClicks||t.preventClicksPropagation)&&s.addEventListener("click",e.onClick,!0),t.cssMode&&n.addEventListener("scroll",e.onScroll),t.updateOnWindowResize?e.on(E.ios||E.android?"resize orientationchange observerUpdate":"resize observerUpdate",k,!0):e.on("observerUpdate",k,!0)},detachEvents:function(){const e=this,{params:t,touchEvents:i,el:s,wrapperEl:n}=e,r=!!t.nested;if(!h.touch&&h.pointerEvents)s.removeEventListener(i.start,e.onTouchStart,!1),a.removeEventListener(i.move,e.onTouchMove,r),a.removeEventListener(i.end,e.onTouchEnd,!1);else{if(h.touch){const n=!("onTouchStart"!==i.start||!h.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};s.removeEventListener(i.start,e.onTouchStart,n),s.removeEventListener(i.move,e.onTouchMove,r),s.removeEventListener(i.end,e.onTouchEnd,n),i.cancel&&s.removeEventListener(i.cancel,e.onTouchEnd,n)}(t.simulateTouch&&!E.ios&&!E.android||t.simulateTouch&&!h.touch&&E.ios)&&(s.removeEventListener("mousedown",e.onTouchStart,!1),a.removeEventListener("mousemove",e.onTouchMove,r),a.removeEventListener("mouseup",e.onTouchEnd,!1))}(t.preventClicks||t.preventClicksPropagation)&&s.removeEventListener("click",e.onClick,!0),t.cssMode&&n.removeEventListener("scroll",e.onScroll),e.off(E.ios||E.android?"resize orientationchange observerUpdate":"resize observerUpdate",k)}},breakpoints:{setBreakpoint:function(){const e=this,{activeIndex:t,initialized:i,loopedSlides:s=0,params:n,$el:a}=e,r=n.breakpoints;if(!r||r&&0===Object.keys(r).length)return;const o=e.getBreakpoint(r);if(o&&e.currentBreakpoint!==o){const l=o in r?r[o]:void 0;l&&["slidesPerView","spaceBetween","slidesPerGroup","slidesPerGroupSkip","slidesPerColumn"].forEach(e=>{const t=l[e];void 0!==t&&(l[e]="slidesPerView"!==e||"AUTO"!==t&&"auto"!==t?"slidesPerView"===e?parseFloat(t):parseInt(t,10):"auto")});const d=l||e.originalParams,p=n.slidesPerColumn>1,c=d.slidesPerColumn>1;p&&!c?a.removeClass(`${n.containerModifierClass}multirow ${n.containerModifierClass}multirow-column`):!p&&c&&(a.addClass(n.containerModifierClass+"multirow"),"column"===d.slidesPerColumnFill&&a.addClass(n.containerModifierClass+"multirow-column"));const h=d.direction&&d.direction!==n.direction,m=n.loop&&(d.slidesPerView!==n.slidesPerView||h);h&&i&&e.changeDirection(),u.extend(e.params,d),u.extend(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),e.currentBreakpoint=o,m&&i&&(e.loopDestroy(),e.loopCreate(),e.updateSlides(),e.slideTo(t-s+e.loopedSlides,0,!1)),e.emit("breakpoint",d)}},getBreakpoint:function(e){if(!e)return;let t=!1;const i=Object.keys(e).map(e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:o.innerHeight*t,point:e}}return{value:e,point:e}});i.sort((e,t)=>parseInt(e.value,10)-parseInt(t.value,10));for(let e=0;e<i.length;e+=1){const{point:s,value:n}=i[e];n<=o.innerWidth&&(t=s)}return t||"max"}},checkOverflow:{checkOverflow:function(){const e=this,t=e.params,i=e.isLocked,s=e.slides.length>0&&t.slidesOffsetBefore+t.spaceBetween*(e.slides.length-1)+e.slides[0].offsetWidth*e.slides.length;t.slidesOffsetBefore&&t.slidesOffsetAfter&&s?e.isLocked=s<=e.size:e.isLocked=1===e.snapGrid.length,e.allowSlideNext=!e.isLocked,e.allowSlidePrev=!e.isLocked,i!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock"),i&&i!==e.isLocked&&(e.isEnd=!1,e.navigation.update())}},classes:{addClasses:function(){const{classNames:e,params:t,rtl:i,$el:s}=this,n=[];n.push("initialized"),n.push(t.direction),t.freeMode&&n.push("free-mode"),t.autoHeight&&n.push("autoheight"),i&&n.push("rtl"),t.slidesPerColumn>1&&(n.push("multirow"),"column"===t.slidesPerColumnFill&&n.push("multirow-column")),E.android&&n.push("android"),E.ios&&n.push("ios"),t.cssMode&&n.push("css-mode"),n.forEach(i=>{e.push(t.containerModifierClass+i)}),s.addClass(e.join(" "))},removeClasses:function(){const{$el:e,classNames:t}=this;e.removeClass(t.join(" "))}},images:{loadImage:function(e,t,i,s,n,a){let r;function l(){a&&a()}d(e).parent("picture")[0]||e.complete&&n?l():t?(r=new o.Image,r.onload=l,r.onerror=l,s&&(r.sizes=s),i&&(r.srcset=i),t&&(r.src=t)):l()},preloadImages:function(){const e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(let i=0;i<e.imagesToLoad.length;i+=1){const s=e.imagesToLoad[i];e.loadImage(s,s.currentSrc||s.getAttribute("src"),s.srcset||s.getAttribute("srcset"),s.sizes||s.getAttribute("sizes"),!0,t)}}}},I={};class D extends m{constructor(...e){let t,i;1===e.length&&e[0].constructor&&e[0].constructor===Object?i=e[0]:[t,i]=e,i||(i={}),i=u.extend({},i),t&&!i.el&&(i.el=t),super(i),Object.keys(L).forEach(e=>{Object.keys(L[e]).forEach(t=>{D.prototype[t]||(D.prototype[t]=L[e][t])})});const s=this;void 0===s.modules&&(s.modules={}),Object.keys(s.modules).forEach(e=>{const t=s.modules[e];if(t.params){const e=Object.keys(t.params)[0],s=t.params[e];if("object"!=typeof s||null===s)return;if(!(e in i)||!("enabled"in s))return;!0===i[e]&&(i[e]={enabled:!0}),"object"!=typeof i[e]||"enabled"in i[e]||(i[e].enabled=!0),i[e]||(i[e]={enabled:!1})}});const n=u.extend({},P);s.useModulesParams(n),s.params=u.extend({},n,I,i),s.originalParams=u.extend({},s.params),s.passedParams=u.extend({},i),s.$=d;const a=d(s.params.el);if(t=a[0],!t)return;if(a.length>1){const e=[];return a.each((t,s)=>{const n=u.extend({},i,{el:s});e.push(new D(n))}),e}let r;return t.swiper=s,a.data("swiper",s),t&&t.shadowRoot&&t.shadowRoot.querySelector?(r=d(t.shadowRoot.querySelector("."+s.params.wrapperClass)),r.children=e=>a.children(e)):r=a.children("."+s.params.wrapperClass),u.extend(s,{$el:a,el:t,$wrapperEl:r,wrapperEl:r[0],classNames:[],slides:d(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===s.params.direction,isVertical:()=>"vertical"===s.params.direction,rtl:"rtl"===t.dir.toLowerCase()||"rtl"===a.css("direction"),rtlTranslate:"horizontal"===s.params.direction&&("rtl"===t.dir.toLowerCase()||"rtl"===a.css("direction")),wrongRTL:"-webkit-box"===r.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:s.params.allowSlideNext,allowSlidePrev:s.params.allowSlidePrev,touchEvents:function(){const e=["touchstart","touchmove","touchend","touchcancel"];let t=["mousedown","mousemove","mouseup"];return h.pointerEvents&&(t=["pointerdown","pointermove","pointerup"]),s.touchEventsTouch={start:e[0],move:e[1],end:e[2],cancel:e[3]},s.touchEventsDesktop={start:t[0],move:t[1],end:t[2]},h.touch||!s.params.simulateTouch?s.touchEventsTouch:s.touchEventsDesktop}(),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video, label",lastClickTime:u.now(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:s.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),s.useModules(),s.params.init&&s.init(),s}slidesPerViewDynamic(){const{params:e,slides:t,slidesGrid:i,size:s,activeIndex:n}=this;let a=1;if(e.centeredSlides){let e,i=t[n].swiperSlideSize;for(let r=n+1;r<t.length;r+=1)t[r]&&!e&&(i+=t[r].swiperSlideSize,a+=1,i>s&&(e=!0));for(let r=n-1;r>=0;r-=1)t[r]&&!e&&(i+=t[r].swiperSlideSize,a+=1,i>s&&(e=!0))}else for(let e=n+1;e<t.length;e+=1)i[e]-i[n]<s&&(a+=1);return a}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:i}=e;function s(){const t=e.rtlTranslate?-1*e.translate:e.translate,i=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(i),e.updateActiveIndex(),e.updateSlidesClasses()}let n;i.breakpoints&&e.setBreakpoint(),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.params.freeMode?(s(),e.params.autoHeight&&e.updateAutoHeight()):(n=("auto"===e.params.slidesPerView||e.params.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0),n||s()),i.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t=!0){const i=this,s=i.params.direction;return e||(e="horizontal"===s?"vertical":"horizontal"),e===s||"horizontal"!==e&&"vertical"!==e||(i.$el.removeClass(`${i.params.containerModifierClass}${s}`).addClass(`${i.params.containerModifierClass}${e}`),i.params.direction=e,i.slides.each((t,i)=>{"vertical"===e?i.style.width="":i.style.height=""}),i.emit("changeDirection"),t&&i.update()),i}init(){const e=this;e.initialized||(e.emit("beforeInit"),e.params.breakpoints&&e.setBreakpoint(),e.addClasses(),e.params.loop&&e.loopCreate(),e.updateSize(),e.updateSlides(),e.params.watchOverflow&&e.checkOverflow(),e.params.grabCursor&&e.setGrabCursor(),e.params.preloadImages&&e.preloadImages(),e.params.loop?e.slideTo(e.params.initialSlide+e.loopedSlides,0,e.params.runCallbacksOnInit):e.slideTo(e.params.initialSlide,0,e.params.runCallbacksOnInit),e.attachEvents(),e.initialized=!0,e.emit("init"))}destroy(e=!0,t=!0){const i=this,{params:s,$el:n,$wrapperEl:a,slides:r}=i;return void 0===i.params||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),s.loop&&i.loopDestroy(),t&&(i.removeClasses(),n.removeAttr("style"),a.removeAttr("style"),r&&r.length&&r.removeClass([s.slideVisibleClass,s.slideActiveClass,s.slideNextClass,s.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")),i.emit("destroy"),Object.keys(i.eventsListeners).forEach(e=>{i.off(e)}),!1!==e&&(i.$el[0].swiper=null,i.$el.data("swiper",null),u.deleteProps(i)),i.destroyed=!0),null}static extendDefaults(e){u.extend(I,e)}static get extendedDefaults(){return I}static get defaults(){return P}static get Class(){return m}static get $(){return d}}var O={name:"device",proto:{device:E},static:{device:E}},B={name:"support",proto:{support:h},static:{support:h}};const G={isEdge:!!o.navigator.userAgent.match(/Edge/g),isSafari:function(){const e=o.navigator.userAgent.toLowerCase();return e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0}(),isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(o.navigator.userAgent)};var Y={name:"browser",proto:{browser:G},static:{browser:G}},N={name:"resize",create(){const e=this;u.extend(e,{resize:{resizeHandler(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init(){o.addEventListener("resize",this.resize.resizeHandler),o.addEventListener("orientationchange",this.resize.orientationChangeHandler)},destroy(){o.removeEventListener("resize",this.resize.resizeHandler),o.removeEventListener("orientationchange",this.resize.orientationChangeHandler)}}};const H={func:o.MutationObserver||o.WebkitMutationObserver,attach(e,t={}){const i=this,s=new(0,H.func)(e=>{if(1===e.length)return void i.emit("observerUpdate",e[0]);const t=function(){i.emit("observerUpdate",e[0])};o.requestAnimationFrame?o.requestAnimationFrame(t):o.setTimeout(t,0)});s.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),i.observer.observers.push(s)},init(){const e=this;if(h.observer&&e.params.observer){if(e.params.observeParents){const t=e.$el.parents();for(let i=0;i<t.length;i+=1)e.observer.attach(t[i])}e.observer.attach(e.$el[0],{childList:e.params.observeSlideChildren}),e.observer.attach(e.$wrapperEl[0],{attributes:!1})}},destroy(){this.observer.observers.forEach(e=>{e.disconnect()}),this.observer.observers=[]}};var X={name:"observer",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create(){u.extend(this,{observer:{init:H.init.bind(this),attach:H.attach.bind(this),destroy:H.destroy.bind(this),observers:[]}})},on:{init(){this.observer.init()},destroy(){this.observer.destroy()}}};const V={update(e){const t=this,{slidesPerView:i,slidesPerGroup:s,centeredSlides:n}=t.params,{addSlidesBefore:a,addSlidesAfter:r}=t.params.virtual,{from:o,to:l,slides:d,slidesGrid:p,renderSlide:c,offset:h}=t.virtual;t.updateActiveIndex();const m=t.activeIndex||0;let f,g,v;f=t.rtlTranslate?"right":t.isHorizontal()?"left":"top",n?(g=Math.floor(i/2)+s+a,v=Math.floor(i/2)+s+r):(g=i+(s-1)+a,v=s+r);const w=Math.max((m||0)-v,0),b=Math.min((m||0)+g,d.length-1),x=(t.slidesGrid[w]||0)-(t.slidesGrid[0]||0);function y(){t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.lazy&&t.params.lazy.enabled&&t.lazy.load()}if(u.extend(t.virtual,{from:w,to:b,offset:x,slidesGrid:t.slidesGrid}),o===w&&l===b&&!e)return t.slidesGrid!==p&&x!==h&&t.slides.css(f,x+"px"),void t.updateProgress();if(t.params.virtual.renderExternal)return t.params.virtual.renderExternal.call(t,{offset:x,from:w,to:b,slides:function(){const e=[];for(let t=w;t<=b;t+=1)e.push(d[t]);return e}()}),void y();const E=[],T=[];if(e)t.$wrapperEl.find("."+t.params.slideClass).remove();else for(let e=o;e<=l;e+=1)(e<w||e>b)&&t.$wrapperEl.find(`.${t.params.slideClass}[data-swiper-slide-index="${e}"]`).remove();for(let t=0;t<d.length;t+=1)t>=w&&t<=b&&(void 0===l||e?T.push(t):(t>l&&T.push(t),t<o&&E.push(t)));T.forEach(e=>{t.$wrapperEl.append(c(d[e],e))}),E.sort((e,t)=>t-e).forEach(e=>{t.$wrapperEl.prepend(c(d[e],e))}),t.$wrapperEl.children(".swiper-slide").css(f,x+"px"),y()},renderSlide(e,t){const i=this,s=i.params.virtual;if(s.cache&&i.virtual.cache[t])return i.virtual.cache[t];const n=s.renderSlide?d(s.renderSlide.call(i,e,t)):d(`<div class="${i.params.slideClass}" data-swiper-slide-index="${t}">${e}</div>`);return n.attr("data-swiper-slide-index")||n.attr("data-swiper-slide-index",t),s.cache&&(i.virtual.cache[t]=n),n},appendSlide(e){const t=this;if("object"==typeof e&&"length"in e)for(let i=0;i<e.length;i+=1)e[i]&&t.virtual.slides.push(e[i]);else t.virtual.slides.push(e);t.virtual.update(!0)},prependSlide(e){const t=this,i=t.activeIndex;let s=i+1,n=1;if(Array.isArray(e)){for(let i=0;i<e.length;i+=1)e[i]&&t.virtual.slides.unshift(e[i]);s=i+e.length,n=e.length}else t.virtual.slides.unshift(e);if(t.params.virtual.cache){const e=t.virtual.cache,i={};Object.keys(e).forEach(t=>{const s=e[t],a=s.attr("data-swiper-slide-index");a&&s.attr("data-swiper-slide-index",parseInt(a,10)+1),i[parseInt(t,10)+n]=s}),t.virtual.cache=i}t.virtual.update(!0),t.slideTo(s,0)},removeSlide(e){const t=this;if(null==e)return;let i=t.activeIndex;if(Array.isArray(e))for(let s=e.length-1;s>=0;s-=1)t.virtual.slides.splice(e[s],1),t.params.virtual.cache&&delete t.virtual.cache[e[s]],e[s]<i&&(i-=1),i=Math.max(i,0);else t.virtual.slides.splice(e,1),t.params.virtual.cache&&delete t.virtual.cache[e],e<i&&(i-=1),i=Math.max(i,0);t.virtual.update(!0),t.slideTo(i,0)},removeAllSlides(){const e=this;e.virtual.slides=[],e.params.virtual.cache&&(e.virtual.cache={}),e.virtual.update(!0),e.slideTo(0,0)}};var F={name:"virtual",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,addSlidesBefore:0,addSlidesAfter:0}},create(){u.extend(this,{virtual:{update:V.update.bind(this),appendSlide:V.appendSlide.bind(this),prependSlide:V.prependSlide.bind(this),removeSlide:V.removeSlide.bind(this),removeAllSlides:V.removeAllSlides.bind(this),renderSlide:V.renderSlide.bind(this),slides:this.params.virtual.slides,cache:{}}})},on:{beforeInit(){const e=this;if(!e.params.virtual.enabled)return;e.classNames.push(e.params.containerModifierClass+"virtual");const t={watchSlidesProgress:!0};u.extend(e.params,t),u.extend(e.originalParams,t),e.params.initialSlide||e.virtual.update()},setTranslate(){this.params.virtual.enabled&&this.virtual.update()}}};const j={handle(e){const t=this,{rtlTranslate:i}=t;let s=e;s.originalEvent&&(s=s.originalEvent);const n=s.keyCode||s.charCode;if(!t.allowSlideNext&&(t.isHorizontal()&&39===n||t.isVertical()&&40===n||34===n))return!1;if(!t.allowSlidePrev&&(t.isHorizontal()&&37===n||t.isVertical()&&38===n||33===n))return!1;if(!(s.shiftKey||s.altKey||s.ctrlKey||s.metaKey||a.activeElement&&a.activeElement.nodeName&&("input"===a.activeElement.nodeName.toLowerCase()||"textarea"===a.activeElement.nodeName.toLowerCase()))){if(t.params.keyboard.onlyInViewport&&(33===n||34===n||37===n||39===n||38===n||40===n)){let e=!1;if(t.$el.parents("."+t.params.slideClass).length>0&&0===t.$el.parents("."+t.params.slideActiveClass).length)return;const s=o.innerWidth,n=o.innerHeight,a=t.$el.offset();i&&(a.left-=t.$el[0].scrollLeft);const r=[[a.left,a.top],[a.left+t.width,a.top],[a.left,a.top+t.height],[a.left+t.width,a.top+t.height]];for(let t=0;t<r.length;t+=1){const i=r[t];i[0]>=0&&i[0]<=s&&i[1]>=0&&i[1]<=n&&(e=!0)}if(!e)return}t.isHorizontal()?(33!==n&&34!==n&&37!==n&&39!==n||(s.preventDefault?s.preventDefault():s.returnValue=!1),(34!==n&&39!==n||i)&&(33!==n&&37!==n||!i)||t.slideNext(),(33!==n&&37!==n||i)&&(34!==n&&39!==n||!i)||t.slidePrev()):(33!==n&&34!==n&&38!==n&&40!==n||(s.preventDefault?s.preventDefault():s.returnValue=!1),34!==n&&40!==n||t.slideNext(),33!==n&&38!==n||t.slidePrev()),t.emit("keyPress",n)}},enable(){this.keyboard.enabled||(d(a).on("keydown",this.keyboard.handle),this.keyboard.enabled=!0)},disable(){this.keyboard.enabled&&(d(a).off("keydown",this.keyboard.handle),this.keyboard.enabled=!1)}};var R={name:"keyboard",params:{keyboard:{enabled:!1,onlyInViewport:!0}},create(){u.extend(this,{keyboard:{enabled:!1,enable:j.enable.bind(this),disable:j.disable.bind(this),handle:j.handle.bind(this)}})},on:{init(){const e=this;e.params.keyboard.enabled&&e.keyboard.enable()},destroy(){const e=this;e.keyboard.enabled&&e.keyboard.disable()}}};const q={lastScrollTime:u.now(),lastEventBeforeSnap:void 0,recentWheelEvents:[],event:()=>o.navigator.userAgent.indexOf("firefox")>-1?"DOMMouseScroll":function(){let e="onwheel"in a;if(!e){const t=a.createElement("div");t.setAttribute("onwheel","return;"),e="function"==typeof t.onwheel}return!e&&a.implementation&&a.implementation.hasFeature&&!0!==a.implementation.hasFeature("","")&&(e=a.implementation.hasFeature("Events.wheel","3.0")),e}()?"wheel":"mousewheel",normalize(e){let t=0,i=0,s=0,n=0;return"detail"in e&&(i=e.detail),"wheelDelta"in e&&(i=-e.wheelDelta/120),"wheelDeltaY"in e&&(i=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=i,i=0),s=10*t,n=10*i,"deltaY"in e&&(n=e.deltaY),"deltaX"in e&&(s=e.deltaX),e.shiftKey&&!s&&(s=n,n=0),(s||n)&&e.deltaMode&&(1===e.deltaMode?(s*=40,n*=40):(s*=800,n*=800)),s&&!t&&(t=s<1?-1:1),n&&!i&&(i=n<1?-1:1),{spinX:t,spinY:i,pixelX:s,pixelY:n}},handleMouseEnter(){this.mouseEntered=!0},handleMouseLeave(){this.mouseEntered=!1},handle(e){let t=e;const i=this,s=i.params.mousewheel;i.params.cssMode&&t.preventDefault();let n=i.$el;if("container"!==i.params.mousewheel.eventsTarged&&(n=d(i.params.mousewheel.eventsTarged)),!i.mouseEntered&&!n[0].contains(t.target)&&!s.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);let a=0;const r=i.rtlTranslate?-1:1,o=q.normalize(t);if(s.forceToAxis)if(i.isHorizontal()){if(!(Math.abs(o.pixelX)>Math.abs(o.pixelY)))return!0;a=-o.pixelX*r}else{if(!(Math.abs(o.pixelY)>Math.abs(o.pixelX)))return!0;a=-o.pixelY}else a=Math.abs(o.pixelX)>Math.abs(o.pixelY)?-o.pixelX*r:-o.pixelY;if(0===a)return!0;if(s.invert&&(a=-a),i.params.freeMode){const e={time:u.now(),delta:Math.abs(a),direction:Math.sign(a)},{lastEventBeforeSnap:n}=i.mousewheel,r=n&&e.time<n.time+500&&e.delta<=n.delta&&e.direction===n.direction;if(!r){i.mousewheel.lastEventBeforeSnap=void 0,i.params.loop&&i.loopFix();let n=i.getTranslate()+a*s.sensitivity;const o=i.isBeginning,l=i.isEnd;if(n>=i.minTranslate()&&(n=i.minTranslate()),n<=i.maxTranslate()&&(n=i.maxTranslate()),i.setTransition(0),i.setTranslate(n),i.updateProgress(),i.updateActiveIndex(),i.updateSlidesClasses(),(!o&&i.isBeginning||!l&&i.isEnd)&&i.updateSlidesClasses(),i.params.freeModeSticky){clearTimeout(i.mousewheel.timeout),i.mousewheel.timeout=void 0;const t=i.mousewheel.recentWheelEvents;t.length>=15&&t.shift();const s=t.length?t[t.length-1]:void 0,n=t[0];if(t.push(e),s&&(e.delta>s.delta||e.direction!==s.direction))t.splice(0);else if(t.length>=15&&e.time-n.time<500&&n.delta-e.delta>=1&&e.delta<=6){const s=a>0?.8:.2;i.mousewheel.lastEventBeforeSnap=e,t.splice(0),i.mousewheel.timeout=u.nextTick(()=>{i.slideToClosest(i.params.speed,!0,void 0,s)},0)}i.mousewheel.timeout||(i.mousewheel.timeout=u.nextTick(()=>{i.mousewheel.lastEventBeforeSnap=e,t.splice(0),i.slideToClosest(i.params.speed,!0,void 0,.5)},500))}if(r||i.emit("scroll",t),i.params.autoplay&&i.params.autoplayDisableOnInteraction&&i.autoplay.stop(),n===i.minTranslate()||n===i.maxTranslate())return!0}}else{const t={time:u.now(),delta:Math.abs(a),direction:Math.sign(a),raw:e},s=i.mousewheel.recentWheelEvents;s.length>=2&&s.shift();const n=s.length?s[s.length-1]:void 0;if(s.push(t),n?(t.direction!==n.direction||t.delta>n.delta||t.time>n.time+150)&&i.mousewheel.animateSlider(t):i.mousewheel.animateSlider(t),i.mousewheel.releaseScroll(t))return!0}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},animateSlider(e){const t=this;return e.delta>=6&&u.now()-t.mousewheel.lastScrollTime<60||(e.direction<0?t.isEnd&&!t.params.loop||t.animating||(t.slideNext(),t.emit("scroll",e.raw)):t.isBeginning&&!t.params.loop||t.animating||(t.slidePrev(),t.emit("scroll",e.raw)),t.mousewheel.lastScrollTime=(new o.Date).getTime(),!1)},releaseScroll(e){const t=this,i=t.params.mousewheel;if(e.direction<0){if(t.isEnd&&!t.params.loop&&i.releaseOnEdges)return!0}else if(t.isBeginning&&!t.params.loop&&i.releaseOnEdges)return!0;return!1},enable(){const e=this,t=q.event();if(e.params.cssMode)return e.wrapperEl.removeEventListener(t,e.mousewheel.handle),!0;if(!t)return!1;if(e.mousewheel.enabled)return!1;let i=e.$el;return"container"!==e.params.mousewheel.eventsTarged&&(i=d(e.params.mousewheel.eventsTarged)),i.on("mouseenter",e.mousewheel.handleMouseEnter),i.on("mouseleave",e.mousewheel.handleMouseLeave),i.on(t,e.mousewheel.handle),e.mousewheel.enabled=!0,!0},disable(){const e=this,t=q.event();if(e.params.cssMode)return e.wrapperEl.addEventListener(t,e.mousewheel.handle),!0;if(!t)return!1;if(!e.mousewheel.enabled)return!1;let i=e.$el;return"container"!==e.params.mousewheel.eventsTarged&&(i=d(e.params.mousewheel.eventsTarged)),i.off(t,e.mousewheel.handle),e.mousewheel.enabled=!1,!0}};const W={update(){const e=this,t=e.params.navigation;if(e.params.loop)return;const{$nextEl:i,$prevEl:s}=e.navigation;s&&s.length>0&&(e.isBeginning?s.addClass(t.disabledClass):s.removeClass(t.disabledClass),s[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](t.lockClass)),i&&i.length>0&&(e.isEnd?i.addClass(t.disabledClass):i.removeClass(t.disabledClass),i[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](t.lockClass))},onPrevClick(e){e.preventDefault(),this.isBeginning&&!this.params.loop||this.slidePrev()},onNextClick(e){e.preventDefault(),this.isEnd&&!this.params.loop||this.slideNext()},init(){const e=this,t=e.params.navigation;if(!t.nextEl&&!t.prevEl)return;let i,s;t.nextEl&&(i=d(t.nextEl),e.params.uniqueNavElements&&"string"==typeof t.nextEl&&i.length>1&&1===e.$el.find(t.nextEl).length&&(i=e.$el.find(t.nextEl))),t.prevEl&&(s=d(t.prevEl),e.params.uniqueNavElements&&"string"==typeof t.prevEl&&s.length>1&&1===e.$el.find(t.prevEl).length&&(s=e.$el.find(t.prevEl))),i&&i.length>0&&i.on("click",e.navigation.onNextClick),s&&s.length>0&&s.on("click",e.navigation.onPrevClick),u.extend(e.navigation,{$nextEl:i,nextEl:i&&i[0],$prevEl:s,prevEl:s&&s[0]})},destroy(){const e=this,{$nextEl:t,$prevEl:i}=e.navigation;t&&t.length&&(t.off("click",e.navigation.onNextClick),t.removeClass(e.params.navigation.disabledClass)),i&&i.length&&(i.off("click",e.navigation.onPrevClick),i.removeClass(e.params.navigation.disabledClass))}};const U={update(){const e=this,t=e.rtl,i=e.params.pagination;if(!i.el||!e.pagination.el||!e.pagination.$el||0===e.pagination.$el.length)return;const s=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,n=e.pagination.$el;let a;const r=e.params.loop?Math.ceil((s-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?(a=Math.ceil((e.activeIndex-e.loopedSlides)/e.params.slidesPerGroup),a>s-1-2*e.loopedSlides&&(a-=s-2*e.loopedSlides),a>r-1&&(a-=r),a<0&&"bullets"!==e.params.paginationType&&(a=r+a)):a=void 0!==e.snapIndex?e.snapIndex:e.activeIndex||0,"bullets"===i.type&&e.pagination.bullets&&e.pagination.bullets.length>0){const s=e.pagination.bullets;let r,o,l;if(i.dynamicBullets&&(e.pagination.bulletSize=s.eq(0)[e.isHorizontal()?"outerWidth":"outerHeight"](!0),n.css(e.isHorizontal()?"width":"height",e.pagination.bulletSize*(i.dynamicMainBullets+4)+"px"),i.dynamicMainBullets>1&&void 0!==e.previousIndex&&(e.pagination.dynamicBulletIndex+=a-e.previousIndex,e.pagination.dynamicBulletIndex>i.dynamicMainBullets-1?e.pagination.dynamicBulletIndex=i.dynamicMainBullets-1:e.pagination.dynamicBulletIndex<0&&(e.pagination.dynamicBulletIndex=0)),r=a-e.pagination.dynamicBulletIndex,o=r+(Math.min(s.length,i.dynamicMainBullets)-1),l=(o+r)/2),s.removeClass(`${i.bulletActiveClass} ${i.bulletActiveClass}-next ${i.bulletActiveClass}-next-next ${i.bulletActiveClass}-prev ${i.bulletActiveClass}-prev-prev ${i.bulletActiveClass}-main`),n.length>1)s.each((e,t)=>{const s=d(t),n=s.index();n===a&&s.addClass(i.bulletActiveClass),i.dynamicBullets&&(n>=r&&n<=o&&s.addClass(i.bulletActiveClass+"-main"),n===r&&s.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),n===o&&s.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next"))});else{const t=s.eq(a),n=t.index();if(t.addClass(i.bulletActiveClass),i.dynamicBullets){const t=s.eq(r),a=s.eq(o);for(let e=r;e<=o;e+=1)s.eq(e).addClass(i.bulletActiveClass+"-main");if(e.params.loop)if(n>=s.length-i.dynamicMainBullets){for(let e=i.dynamicMainBullets;e>=0;e-=1)s.eq(s.length-e).addClass(i.bulletActiveClass+"-main");s.eq(s.length-i.dynamicMainBullets-1).addClass(i.bulletActiveClass+"-prev")}else t.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),a.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next");else t.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),a.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next")}}if(i.dynamicBullets){const n=Math.min(s.length,i.dynamicMainBullets+4),a=(e.pagination.bulletSize*n-e.pagination.bulletSize)/2-l*e.pagination.bulletSize,r=t?"right":"left";s.css(e.isHorizontal()?r:"top",a+"px")}}if("fraction"===i.type&&(n.find("."+i.currentClass).text(i.formatFractionCurrent(a+1)),n.find("."+i.totalClass).text(i.formatFractionTotal(r))),"progressbar"===i.type){let t;t=i.progressbarOpposite?e.isHorizontal()?"vertical":"horizontal":e.isHorizontal()?"horizontal":"vertical";const s=(a+1)/r;let o=1,l=1;"horizontal"===t?o=s:l=s,n.find("."+i.progressbarFillClass).transform(`translate3d(0,0,0) scaleX(${o}) scaleY(${l})`).transition(e.params.speed)}"custom"===i.type&&i.renderCustom?(n.html(i.renderCustom(e,a+1,r)),e.emit("paginationRender",e,n[0])):e.emit("paginationUpdate",e,n[0]),n[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](i.lockClass)},render(){const e=this,t=e.params.pagination;if(!t.el||!e.pagination.el||!e.pagination.$el||0===e.pagination.$el.length)return;const i=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,s=e.pagination.$el;let n="";if("bullets"===t.type){const a=e.params.loop?Math.ceil((i-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;for(let i=0;i<a;i+=1)t.renderBullet?n+=t.renderBullet.call(e,i,t.bulletClass):n+=`<${t.bulletElement} class="${t.bulletClass}"></${t.bulletElement}>`;s.html(n),e.pagination.bullets=s.find("."+t.bulletClass)}"fraction"===t.type&&(n=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):`<span class="${t.currentClass}"></span> / <span class="${t.totalClass}"></span>`,s.html(n)),"progressbar"===t.type&&(n=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):`<span class="${t.progressbarFillClass}"></span>`,s.html(n)),"custom"!==t.type&&e.emit("paginationRender",e.pagination.$el[0])},init(){const e=this,t=e.params.pagination;if(!t.el)return;let i=d(t.el);0!==i.length&&(e.params.uniqueNavElements&&"string"==typeof t.el&&i.length>1&&(i=e.$el.find(t.el)),"bullets"===t.type&&t.clickable&&i.addClass(t.clickableClass),i.addClass(t.modifierClass+t.type),"bullets"===t.type&&t.dynamicBullets&&(i.addClass(`${t.modifierClass}${t.type}-dynamic`),e.pagination.dynamicBulletIndex=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&i.addClass(t.progressbarOppositeClass),t.clickable&&i.on("click","."+t.bulletClass,(function(t){t.preventDefault();let i=d(this).index()*e.params.slidesPerGroup;e.params.loop&&(i+=e.loopedSlides),e.slideTo(i)})),u.extend(e.pagination,{$el:i,el:i[0]}))},destroy(){const e=this.params.pagination;if(!e.el||!this.pagination.el||!this.pagination.$el||0===this.pagination.$el.length)return;const t=this.pagination.$el;t.removeClass(e.hiddenClass),t.removeClass(e.modifierClass+e.type),this.pagination.bullets&&this.pagination.bullets.removeClass(e.bulletActiveClass),e.clickable&&t.off("click","."+e.bulletClass)}};const Q={setTranslate(){const e=this;if(!e.params.scrollbar.el||!e.scrollbar.el)return;const{scrollbar:t,rtlTranslate:i,progress:s}=e,{dragSize:n,trackSize:a,$dragEl:r,$el:o}=t,l=e.params.scrollbar;let d=n,p=(a-n)*s;i?(p=-p,p>0?(d=n-p,p=0):-p+n>a&&(d=a+p)):p<0?(d=n+p,p=0):p+n>a&&(d=a-p),e.isHorizontal()?(r.transform(`translate3d(${p}px, 0, 0)`),r[0].style.width=d+"px"):(r.transform(`translate3d(0px, ${p}px, 0)`),r[0].style.height=d+"px"),l.hide&&(clearTimeout(e.scrollbar.timeout),o[0].style.opacity=1,e.scrollbar.timeout=setTimeout(()=>{o[0].style.opacity=0,o.transition(400)},1e3))},setTransition(e){this.params.scrollbar.el&&this.scrollbar.el&&this.scrollbar.$dragEl.transition(e)},updateSize(){const e=this;if(!e.params.scrollbar.el||!e.scrollbar.el)return;const{scrollbar:t}=e,{$dragEl:i,$el:s}=t;i[0].style.width="",i[0].style.height="";const n=e.isHorizontal()?s[0].offsetWidth:s[0].offsetHeight,a=e.size/e.virtualSize,r=a*(n/e.size);let o;o="auto"===e.params.scrollbar.dragSize?n*a:parseInt(e.params.scrollbar.dragSize,10),e.isHorizontal()?i[0].style.width=o+"px":i[0].style.height=o+"px",s[0].style.display=a>=1?"none":"",e.params.scrollbar.hide&&(s[0].style.opacity=0),u.extend(t,{trackSize:n,divider:a,moveDivider:r,dragSize:o}),t.$el[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](e.params.scrollbar.lockClass)},getPointerPosition(e){return this.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientX:e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientY:e.clientY},setDragPosition(e){const{scrollbar:t,rtlTranslate:i}=this,{$el:s,dragSize:n,trackSize:a,dragStartPos:r}=t;let o;o=(t.getPointerPosition(e)-s.offset()[this.isHorizontal()?"left":"top"]-(null!==r?r:n/2))/(a-n),o=Math.max(Math.min(o,1),0),i&&(o=1-o);const l=this.minTranslate()+(this.maxTranslate()-this.minTranslate())*o;this.updateProgress(l),this.setTranslate(l),this.updateActiveIndex(),this.updateSlidesClasses()},onDragStart(e){const t=this,i=t.params.scrollbar,{scrollbar:s,$wrapperEl:n}=t,{$el:a,$dragEl:r}=s;t.scrollbar.isTouched=!0,t.scrollbar.dragStartPos=e.target===r[0]||e.target===r?s.getPointerPosition(e)-e.target.getBoundingClientRect()[t.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),n.transition(100),r.transition(100),s.setDragPosition(e),clearTimeout(t.scrollbar.dragTimeout),a.transition(0),i.hide&&a.css("opacity",1),t.params.cssMode&&t.$wrapperEl.css("scroll-snap-type","none"),t.emit("scrollbarDragStart",e)},onDragMove(e){const{scrollbar:t,$wrapperEl:i}=this,{$el:s,$dragEl:n}=t;this.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),i.transition(0),s.transition(0),n.transition(0),this.emit("scrollbarDragMove",e))},onDragEnd(e){const t=this,i=t.params.scrollbar,{scrollbar:s,$wrapperEl:n}=t,{$el:a}=s;t.scrollbar.isTouched&&(t.scrollbar.isTouched=!1,t.params.cssMode&&(t.$wrapperEl.css("scroll-snap-type",""),n.transition("")),i.hide&&(clearTimeout(t.scrollbar.dragTimeout),t.scrollbar.dragTimeout=u.nextTick(()=>{a.css("opacity",0),a.transition(400)},1e3)),t.emit("scrollbarDragEnd",e),i.snapOnRelease&&t.slideToClosest())},enableDraggable(){const e=this;if(!e.params.scrollbar.el)return;const{scrollbar:t,touchEventsTouch:i,touchEventsDesktop:s,params:n}=e,r=t.$el[0],o=!(!h.passiveListener||!n.passiveListeners)&&{passive:!1,capture:!1},l=!(!h.passiveListener||!n.passiveListeners)&&{passive:!0,capture:!1};h.touch?(r.addEventListener(i.start,e.scrollbar.onDragStart,o),r.addEventListener(i.move,e.scrollbar.onDragMove,o),r.addEventListener(i.end,e.scrollbar.onDragEnd,l)):(r.addEventListener(s.start,e.scrollbar.onDragStart,o),a.addEventListener(s.move,e.scrollbar.onDragMove,o),a.addEventListener(s.end,e.scrollbar.onDragEnd,l))},disableDraggable(){const e=this;if(!e.params.scrollbar.el)return;const{scrollbar:t,touchEventsTouch:i,touchEventsDesktop:s,params:n}=e,r=t.$el[0],o=!(!h.passiveListener||!n.passiveListeners)&&{passive:!1,capture:!1},l=!(!h.passiveListener||!n.passiveListeners)&&{passive:!0,capture:!1};h.touch?(r.removeEventListener(i.start,e.scrollbar.onDragStart,o),r.removeEventListener(i.move,e.scrollbar.onDragMove,o),r.removeEventListener(i.end,e.scrollbar.onDragEnd,l)):(r.removeEventListener(s.start,e.scrollbar.onDragStart,o),a.removeEventListener(s.move,e.scrollbar.onDragMove,o),a.removeEventListener(s.end,e.scrollbar.onDragEnd,l))},init(){const e=this;if(!e.params.scrollbar.el)return;const{scrollbar:t,$el:i}=e,s=e.params.scrollbar;let n=d(s.el);e.params.uniqueNavElements&&"string"==typeof s.el&&n.length>1&&1===i.find(s.el).length&&(n=i.find(s.el));let a=n.find("."+e.params.scrollbar.dragClass);0===a.length&&(a=d(`<div class="${e.params.scrollbar.dragClass}"></div>`),n.append(a)),u.extend(t,{$el:n,el:n[0],$dragEl:a,dragEl:a[0]}),s.draggable&&t.enableDraggable()},destroy(){this.scrollbar.disableDraggable()}};const K={setTransform(e,t){const{rtl:i}=this,s=d(e),n=i?-1:1,a=s.attr("data-swiper-parallax")||"0";let r=s.attr("data-swiper-parallax-x"),o=s.attr("data-swiper-parallax-y");const l=s.attr("data-swiper-parallax-scale"),p=s.attr("data-swiper-parallax-opacity");if(r||o?(r=r||"0",o=o||"0"):this.isHorizontal()?(r=a,o="0"):(o=a,r="0"),r=r.indexOf("%")>=0?parseInt(r,10)*t*n+"%":r*t*n+"px",o=o.indexOf("%")>=0?parseInt(o,10)*t+"%":o*t+"px",null!=p){const e=p-(p-1)*(1-Math.abs(t));s[0].style.opacity=e}if(null==l)s.transform(`translate3d(${r}, ${o}, 0px)`);else{const e=l-(l-1)*(1-Math.abs(t));s.transform(`translate3d(${r}, ${o}, 0px) scale(${e})`)}},setTranslate(){const e=this,{$el:t,slides:i,progress:s,snapGrid:n}=e;t.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((t,i)=>{e.parallax.setTransform(i,s)}),i.each((t,i)=>{let a=i.progress;e.params.slidesPerGroup>1&&"auto"!==e.params.slidesPerView&&(a+=Math.ceil(t/2)-s*(n.length-1)),a=Math.min(Math.max(a,-1),1),d(i).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((t,i)=>{e.parallax.setTransform(i,a)})})},setTransition(e=this.params.speed){const{$el:t}=this;t.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((t,i)=>{const s=d(i);let n=parseInt(s.attr("data-swiper-parallax-duration"),10)||e;0===e&&(n=0),s.transition(n)})}};const Z={getDistanceBetweenTouches(e){if(e.targetTouches.length<2)return 1;const t=e.targetTouches[0].pageX,i=e.targetTouches[0].pageY,s=e.targetTouches[1].pageX,n=e.targetTouches[1].pageY;return Math.sqrt((s-t)**2+(n-i)**2)},onGestureStart(e){const t=this,i=t.params.zoom,s=t.zoom,{gesture:n}=s;if(s.fakeGestureTouched=!1,s.fakeGestureMoved=!1,!h.gestures){if("touchstart"!==e.type||"touchstart"===e.type&&e.targetTouches.length<2)return;s.fakeGestureTouched=!0,n.scaleStart=Z.getDistanceBetweenTouches(e)}n.$slideEl&&n.$slideEl.length||(n.$slideEl=d(e.target).closest("."+t.params.slideClass),0===n.$slideEl.length&&(n.$slideEl=t.slides.eq(t.activeIndex)),n.$imageEl=n.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),n.$imageWrapEl=n.$imageEl.parent("."+i.containerClass),n.maxRatio=n.$imageWrapEl.attr("data-swiper-zoom")||i.maxRatio,0!==n.$imageWrapEl.length)?(n.$imageEl&&n.$imageEl.transition(0),t.zoom.isScaling=!0):n.$imageEl=void 0},onGestureChange(e){const t=this.params.zoom,i=this.zoom,{gesture:s}=i;if(!h.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;i.fakeGestureMoved=!0,s.scaleMove=Z.getDistanceBetweenTouches(e)}s.$imageEl&&0!==s.$imageEl.length&&(i.scale=h.gestures?e.scale*i.currentScale:s.scaleMove/s.scaleStart*i.currentScale,i.scale>s.maxRatio&&(i.scale=s.maxRatio-1+(i.scale-s.maxRatio+1)**.5),i.scale<t.minRatio&&(i.scale=t.minRatio+1-(t.minRatio-i.scale+1)**.5),s.$imageEl.transform(`translate3d(0,0,0) scale(${i.scale})`))},onGestureEnd(e){const t=this.params.zoom,i=this.zoom,{gesture:s}=i;if(!h.gestures){if(!i.fakeGestureTouched||!i.fakeGestureMoved)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!E.android)return;i.fakeGestureTouched=!1,i.fakeGestureMoved=!1}s.$imageEl&&0!==s.$imageEl.length&&(i.scale=Math.max(Math.min(i.scale,s.maxRatio),t.minRatio),s.$imageEl.transition(this.params.speed).transform(`translate3d(0,0,0) scale(${i.scale})`),i.currentScale=i.scale,i.isScaling=!1,1===i.scale&&(s.$slideEl=void 0))},onTouchStart(e){const t=this.zoom,{gesture:i,image:s}=t;i.$imageEl&&0!==i.$imageEl.length&&(s.isTouched||(E.android&&e.cancelable&&e.preventDefault(),s.isTouched=!0,s.touchesStart.x="touchstart"===e.type?e.targetTouches[0].pageX:e.pageX,s.touchesStart.y="touchstart"===e.type?e.targetTouches[0].pageY:e.pageY))},onTouchMove(e){const t=this,i=t.zoom,{gesture:s,image:n,velocity:a}=i;if(!s.$imageEl||0===s.$imageEl.length)return;if(t.allowClick=!1,!n.isTouched||!s.$slideEl)return;n.isMoved||(n.width=s.$imageEl[0].offsetWidth,n.height=s.$imageEl[0].offsetHeight,n.startX=u.getTranslate(s.$imageWrapEl[0],"x")||0,n.startY=u.getTranslate(s.$imageWrapEl[0],"y")||0,s.slideWidth=s.$slideEl[0].offsetWidth,s.slideHeight=s.$slideEl[0].offsetHeight,s.$imageWrapEl.transition(0),t.rtl&&(n.startX=-n.startX,n.startY=-n.startY));const r=n.width*i.scale,o=n.height*i.scale;if(!(r<s.slideWidth&&o<s.slideHeight)){if(n.minX=Math.min(s.slideWidth/2-r/2,0),n.maxX=-n.minX,n.minY=Math.min(s.slideHeight/2-o/2,0),n.maxY=-n.minY,n.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,n.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!n.isMoved&&!i.isScaling){if(t.isHorizontal()&&(Math.floor(n.minX)===Math.floor(n.startX)&&n.touchesCurrent.x<n.touchesStart.x||Math.floor(n.maxX)===Math.floor(n.startX)&&n.touchesCurrent.x>n.touchesStart.x))return void(n.isTouched=!1);if(!t.isHorizontal()&&(Math.floor(n.minY)===Math.floor(n.startY)&&n.touchesCurrent.y<n.touchesStart.y||Math.floor(n.maxY)===Math.floor(n.startY)&&n.touchesCurrent.y>n.touchesStart.y))return void(n.isTouched=!1)}e.cancelable&&e.preventDefault(),e.stopPropagation(),n.isMoved=!0,n.currentX=n.touchesCurrent.x-n.touchesStart.x+n.startX,n.currentY=n.touchesCurrent.y-n.touchesStart.y+n.startY,n.currentX<n.minX&&(n.currentX=n.minX+1-(n.minX-n.currentX+1)**.8),n.currentX>n.maxX&&(n.currentX=n.maxX-1+(n.currentX-n.maxX+1)**.8),n.currentY<n.minY&&(n.currentY=n.minY+1-(n.minY-n.currentY+1)**.8),n.currentY>n.maxY&&(n.currentY=n.maxY-1+(n.currentY-n.maxY+1)**.8),a.prevPositionX||(a.prevPositionX=n.touchesCurrent.x),a.prevPositionY||(a.prevPositionY=n.touchesCurrent.y),a.prevTime||(a.prevTime=Date.now()),a.x=(n.touchesCurrent.x-a.prevPositionX)/(Date.now()-a.prevTime)/2,a.y=(n.touchesCurrent.y-a.prevPositionY)/(Date.now()-a.prevTime)/2,Math.abs(n.touchesCurrent.x-a.prevPositionX)<2&&(a.x=0),Math.abs(n.touchesCurrent.y-a.prevPositionY)<2&&(a.y=0),a.prevPositionX=n.touchesCurrent.x,a.prevPositionY=n.touchesCurrent.y,a.prevTime=Date.now(),s.$imageWrapEl.transform(`translate3d(${n.currentX}px, ${n.currentY}px,0)`)}},onTouchEnd(){const e=this.zoom,{gesture:t,image:i,velocity:s}=e;if(!t.$imageEl||0===t.$imageEl.length)return;if(!i.isTouched||!i.isMoved)return i.isTouched=!1,void(i.isMoved=!1);i.isTouched=!1,i.isMoved=!1;let n=300,a=300;const r=s.x*n,o=i.currentX+r,l=s.y*a,d=i.currentY+l;0!==s.x&&(n=Math.abs((o-i.currentX)/s.x)),0!==s.y&&(a=Math.abs((d-i.currentY)/s.y));const p=Math.max(n,a);i.currentX=o,i.currentY=d;const c=i.width*e.scale,u=i.height*e.scale;i.minX=Math.min(t.slideWidth/2-c/2,0),i.maxX=-i.minX,i.minY=Math.min(t.slideHeight/2-u/2,0),i.maxY=-i.minY,i.currentX=Math.max(Math.min(i.currentX,i.maxX),i.minX),i.currentY=Math.max(Math.min(i.currentY,i.maxY),i.minY),t.$imageWrapEl.transition(p).transform(`translate3d(${i.currentX}px, ${i.currentY}px,0)`)},onTransitionEnd(){const e=this.zoom,{gesture:t}=e;t.$slideEl&&this.previousIndex!==this.activeIndex&&(t.$imageEl&&t.$imageEl.transform("translate3d(0,0,0) scale(1)"),t.$imageWrapEl&&t.$imageWrapEl.transform("translate3d(0,0,0)"),e.scale=1,e.currentScale=1,t.$slideEl=void 0,t.$imageEl=void 0,t.$imageWrapEl=void 0)},toggle(e){const t=this.zoom;t.scale&&1!==t.scale?t.out():t.in(e)},in(e){const t=this,i=t.zoom,s=t.params.zoom,{gesture:n,image:a}=i;if(n.$slideEl||(t.params.virtual&&t.params.virtual.enabled&&t.virtual?n.$slideEl=t.$wrapperEl.children("."+t.params.slideActiveClass):n.$slideEl=t.slides.eq(t.activeIndex),n.$imageEl=n.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),n.$imageWrapEl=n.$imageEl.parent("."+s.containerClass)),!n.$imageEl||0===n.$imageEl.length)return;let r,o,l,d,p,c,u,h,m,f,g,v,w,b,x,y,E,T;n.$slideEl.addClass(""+s.zoomedSlideClass),void 0===a.touchesStart.x&&e?(r="touchend"===e.type?e.changedTouches[0].pageX:e.pageX,o="touchend"===e.type?e.changedTouches[0].pageY:e.pageY):(r=a.touchesStart.x,o=a.touchesStart.y),i.scale=n.$imageWrapEl.attr("data-swiper-zoom")||s.maxRatio,i.currentScale=n.$imageWrapEl.attr("data-swiper-zoom")||s.maxRatio,e?(E=n.$slideEl[0].offsetWidth,T=n.$slideEl[0].offsetHeight,l=n.$slideEl.offset().left,d=n.$slideEl.offset().top,p=l+E/2-r,c=d+T/2-o,m=n.$imageEl[0].offsetWidth,f=n.$imageEl[0].offsetHeight,g=m*i.scale,v=f*i.scale,w=Math.min(E/2-g/2,0),b=Math.min(T/2-v/2,0),x=-w,y=-b,u=p*i.scale,h=c*i.scale,u<w&&(u=w),u>x&&(u=x),h<b&&(h=b),h>y&&(h=y)):(u=0,h=0),n.$imageWrapEl.transition(300).transform(`translate3d(${u}px, ${h}px,0)`),n.$imageEl.transition(300).transform(`translate3d(0,0,0) scale(${i.scale})`)},out(){const e=this,t=e.zoom,i=e.params.zoom,{gesture:s}=t;s.$slideEl||(e.params.virtual&&e.params.virtual.enabled&&e.virtual?s.$slideEl=e.$wrapperEl.children("."+e.params.slideActiveClass):s.$slideEl=e.slides.eq(e.activeIndex),s.$imageEl=s.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),s.$imageWrapEl=s.$imageEl.parent("."+i.containerClass)),s.$imageEl&&0!==s.$imageEl.length&&(t.scale=1,t.currentScale=1,s.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),s.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),s.$slideEl.removeClass(""+i.zoomedSlideClass),s.$slideEl=void 0)},enable(){const e=this,t=e.zoom;if(t.enabled)return;t.enabled=!0;const i=!("touchstart"!==e.touchEvents.start||!h.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1},s=!h.passiveListener||{passive:!1,capture:!0},n="."+e.params.slideClass;h.gestures?(e.$wrapperEl.on("gesturestart",n,t.onGestureStart,i),e.$wrapperEl.on("gesturechange",n,t.onGestureChange,i),e.$wrapperEl.on("gestureend",n,t.onGestureEnd,i)):"touchstart"===e.touchEvents.start&&(e.$wrapperEl.on(e.touchEvents.start,n,t.onGestureStart,i),e.$wrapperEl.on(e.touchEvents.move,n,t.onGestureChange,s),e.$wrapperEl.on(e.touchEvents.end,n,t.onGestureEnd,i),e.touchEvents.cancel&&e.$wrapperEl.on(e.touchEvents.cancel,n,t.onGestureEnd,i)),e.$wrapperEl.on(e.touchEvents.move,"."+e.params.zoom.containerClass,t.onTouchMove,s)},disable(){const e=this,t=e.zoom;if(!t.enabled)return;e.zoom.enabled=!1;const i=!("touchstart"!==e.touchEvents.start||!h.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1},s=!h.passiveListener||{passive:!1,capture:!0},n="."+e.params.slideClass;h.gestures?(e.$wrapperEl.off("gesturestart",n,t.onGestureStart,i),e.$wrapperEl.off("gesturechange",n,t.onGestureChange,i),e.$wrapperEl.off("gestureend",n,t.onGestureEnd,i)):"touchstart"===e.touchEvents.start&&(e.$wrapperEl.off(e.touchEvents.start,n,t.onGestureStart,i),e.$wrapperEl.off(e.touchEvents.move,n,t.onGestureChange,s),e.$wrapperEl.off(e.touchEvents.end,n,t.onGestureEnd,i),e.touchEvents.cancel&&e.$wrapperEl.off(e.touchEvents.cancel,n,t.onGestureEnd,i)),e.$wrapperEl.off(e.touchEvents.move,"."+e.params.zoom.containerClass,t.onTouchMove,s)}};const _={loadInSlide(e,t=!0){const i=this,s=i.params.lazy;if(void 0===e)return;if(0===i.slides.length)return;const n=i.virtual&&i.params.virtual.enabled?i.$wrapperEl.children(`.${i.params.slideClass}[data-swiper-slide-index="${e}"]`):i.slides.eq(e);let a=n.find(`.${s.elementClass}:not(.${s.loadedClass}):not(.${s.loadingClass})`);!n.hasClass(s.elementClass)||n.hasClass(s.loadedClass)||n.hasClass(s.loadingClass)||(a=a.add(n[0])),0!==a.length&&a.each((e,a)=>{const r=d(a);r.addClass(s.loadingClass);const o=r.attr("data-background"),l=r.attr("data-src"),p=r.attr("data-srcset"),c=r.attr("data-sizes"),u=r.parent("picture");i.loadImage(r[0],l||o,p,c,!1,()=>{if(null!=i&&i&&(!i||i.params)&&!i.destroyed){if(o?(r.css("background-image",`url("${o}")`),r.removeAttr("data-background")):(p&&(r.attr("srcset",p),r.removeAttr("data-srcset")),c&&(r.attr("sizes",c),r.removeAttr("data-sizes")),u.length&&u.children("source").each((e,t)=>{const i=d(t);i.attr("data-srcset")&&(i.attr("srcset",i.attr("data-srcset")),i.removeAttr("data-srcset"))}),l&&(r.attr("src",l),r.removeAttr("data-src"))),r.addClass(s.loadedClass).removeClass(s.loadingClass),n.find("."+s.preloaderClass).remove(),i.params.loop&&t){const e=n.attr("data-swiper-slide-index");if(n.hasClass(i.params.slideDuplicateClass)){const t=i.$wrapperEl.children(`[data-swiper-slide-index="${e}"]:not(.${i.params.slideDuplicateClass})`);i.lazy.loadInSlide(t.index(),!1)}else{const t=i.$wrapperEl.children(`.${i.params.slideDuplicateClass}[data-swiper-slide-index="${e}"]`);i.lazy.loadInSlide(t.index(),!1)}}i.emit("lazyImageReady",n[0],r[0]),i.params.autoHeight&&i.updateAutoHeight()}}),i.emit("lazyImageLoad",n[0],r[0])})},load(){const e=this,{$wrapperEl:t,params:i,slides:s,activeIndex:n}=e,a=e.virtual&&i.virtual.enabled,r=i.lazy;let o=i.slidesPerView;function l(e){if(a){if(t.children(`.${i.slideClass}[data-swiper-slide-index="${e}"]`).length)return!0}else if(s[e])return!0;return!1}function p(e){return a?d(e).attr("data-swiper-slide-index"):d(e).index()}if("auto"===o&&(o=0),e.lazy.initialImageLoaded||(e.lazy.initialImageLoaded=!0),e.params.watchSlidesVisibility)t.children("."+i.slideVisibleClass).each((t,i)=>{const s=a?d(i).attr("data-swiper-slide-index"):d(i).index();e.lazy.loadInSlide(s)});else if(o>1)for(let t=n;t<n+o;t+=1)l(t)&&e.lazy.loadInSlide(t);else e.lazy.loadInSlide(n);if(r.loadPrevNext)if(o>1||r.loadPrevNextAmount&&r.loadPrevNextAmount>1){const t=r.loadPrevNextAmount,i=o,a=Math.min(n+i+Math.max(t,i),s.length),d=Math.max(n-Math.max(i,t),0);for(let t=n+o;t<a;t+=1)l(t)&&e.lazy.loadInSlide(t);for(let t=d;t<n;t+=1)l(t)&&e.lazy.loadInSlide(t)}else{const s=t.children("."+i.slideNextClass);s.length>0&&e.lazy.loadInSlide(p(s));const n=t.children("."+i.slidePrevClass);n.length>0&&e.lazy.loadInSlide(p(n))}}};const J={LinearSpline:function(e,t){const i=function(){let e,t,i;return(s,n)=>{for(t=-1,e=s.length;e-t>1;)i=e+t>>1,s[i]<=n?t=i:e=i;return e}}();let s,n;return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(n=i(this.x,e),s=n-1,(e-this.x[s])*(this.y[n]-this.y[s])/(this.x[n]-this.x[s])+this.y[s]):0},this},getInterpolateFunction(e){const t=this;t.controller.spline||(t.controller.spline=t.params.loop?new J.LinearSpline(t.slidesGrid,e.slidesGrid):new J.LinearSpline(t.snapGrid,e.snapGrid))},setTranslate(e,t){const i=this,s=i.controller.control;let n,a;function r(e){const t=i.rtlTranslate?-i.translate:i.translate;"slide"===i.params.controller.by&&(i.controller.getInterpolateFunction(e),a=-i.controller.spline.interpolate(-t)),a&&"container"!==i.params.controller.by||(n=(e.maxTranslate()-e.minTranslate())/(i.maxTranslate()-i.minTranslate()),a=(t-i.minTranslate())*n+e.minTranslate()),i.params.controller.inverse&&(a=e.maxTranslate()-a),e.updateProgress(a),e.setTranslate(a,i),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(s))for(let e=0;e<s.length;e+=1)s[e]!==t&&s[e]instanceof D&&r(s[e]);else s instanceof D&&t!==s&&r(s)},setTransition(e,t){const i=this,s=i.controller.control;let n;function a(t){t.setTransition(e,i),0!==e&&(t.transitionStart(),t.params.autoHeight&&u.nextTick(()=>{t.updateAutoHeight()}),t.$wrapperEl.transitionEnd(()=>{s&&(t.params.loop&&"slide"===i.params.controller.by&&t.loopFix(),t.transitionEnd())}))}if(Array.isArray(s))for(n=0;n<s.length;n+=1)s[n]!==t&&s[n]instanceof D&&a(s[n]);else s instanceof D&&t!==s&&a(s)}};const ee={makeElFocusable:e=>(e.attr("tabIndex","0"),e),makeElNotFocusable:e=>(e.attr("tabIndex","-1"),e),addElRole:(e,t)=>(e.attr("role",t),e),addElLabel:(e,t)=>(e.attr("aria-label",t),e),disableEl:e=>(e.attr("aria-disabled",!0),e),enableEl:e=>(e.attr("aria-disabled",!1),e),onEnterKey(e){const t=this,i=t.params.a11y;if(13!==e.keyCode)return;const s=d(e.target);t.navigation&&t.navigation.$nextEl&&s.is(t.navigation.$nextEl)&&(t.isEnd&&!t.params.loop||t.slideNext(),t.isEnd?t.a11y.notify(i.lastSlideMessage):t.a11y.notify(i.nextSlideMessage)),t.navigation&&t.navigation.$prevEl&&s.is(t.navigation.$prevEl)&&(t.isBeginning&&!t.params.loop||t.slidePrev(),t.isBeginning?t.a11y.notify(i.firstSlideMessage):t.a11y.notify(i.prevSlideMessage)),t.pagination&&s.is("."+t.params.pagination.bulletClass)&&s[0].click()},notify(e){const t=this.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},updateNavigation(){const e=this;if(e.params.loop||!e.navigation)return;const{$nextEl:t,$prevEl:i}=e.navigation;i&&i.length>0&&(e.isBeginning?(e.a11y.disableEl(i),e.a11y.makeElNotFocusable(i)):(e.a11y.enableEl(i),e.a11y.makeElFocusable(i))),t&&t.length>0&&(e.isEnd?(e.a11y.disableEl(t),e.a11y.makeElNotFocusable(t)):(e.a11y.enableEl(t),e.a11y.makeElFocusable(t)))},updatePagination(){const e=this,t=e.params.a11y;e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.bullets.each((i,s)=>{const n=d(s);e.a11y.makeElFocusable(n),e.a11y.addElRole(n,"button"),e.a11y.addElLabel(n,t.paginationBulletMessage.replace(/\{\{index\}\}/,n.index()+1))})},init(){const e=this;e.$el.append(e.a11y.liveRegion);const t=e.params.a11y;let i,s;e.navigation&&e.navigation.$nextEl&&(i=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(s=e.navigation.$prevEl),i&&(e.a11y.makeElFocusable(i),e.a11y.addElRole(i,"button"),e.a11y.addElLabel(i,t.nextSlideMessage),i.on("keydown",e.a11y.onEnterKey)),s&&(e.a11y.makeElFocusable(s),e.a11y.addElRole(s,"button"),e.a11y.addElLabel(s,t.prevSlideMessage),s.on("keydown",e.a11y.onEnterKey)),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.on("keydown","."+e.params.pagination.bulletClass,e.a11y.onEnterKey)},destroy(){const e=this;let t,i;e.a11y.liveRegion&&e.a11y.liveRegion.length>0&&e.a11y.liveRegion.remove(),e.navigation&&e.navigation.$nextEl&&(t=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(i=e.navigation.$prevEl),t&&t.off("keydown",e.a11y.onEnterKey),i&&i.off("keydown",e.a11y.onEnterKey),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.off("keydown","."+e.params.pagination.bulletClass,e.a11y.onEnterKey)}};const te={init(){const e=this;if(!e.params.history)return;if(!o.history||!o.history.pushState)return e.params.history.enabled=!1,void(e.params.hashNavigation.enabled=!0);const t=e.history;t.initialized=!0,t.paths=te.getPathValues(),(t.paths.key||t.paths.value)&&(t.scrollToSlide(0,t.paths.value,e.params.runCallbacksOnInit),e.params.history.replaceState||o.addEventListener("popstate",e.history.setHistoryPopState))},destroy(){const e=this;e.params.history.replaceState||o.removeEventListener("popstate",e.history.setHistoryPopState)},setHistoryPopState(){this.history.paths=te.getPathValues(),this.history.scrollToSlide(this.params.speed,this.history.paths.value,!1)},getPathValues(){const e=o.location.pathname.slice(1).split("/").filter(e=>""!==e),t=e.length;return{key:e[t-2],value:e[t-1]}},setHistory(e,t){if(!this.history.initialized||!this.params.history.enabled)return;const i=this.slides.eq(t);let s=te.slugify(i.attr("data-history"));o.location.pathname.includes(e)||(s=`${e}/${s}`);const n=o.history.state;n&&n.value===s||(this.params.history.replaceState?o.history.replaceState({value:s},null,s):o.history.pushState({value:s},null,s))},slugify:e=>e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,""),scrollToSlide(e,t,i){const s=this;if(t)for(let n=0,a=s.slides.length;n<a;n+=1){const a=s.slides.eq(n);if(te.slugify(a.attr("data-history"))===t&&!a.hasClass(s.params.slideDuplicateClass)){const t=a.index();s.slideTo(t,e,i)}}else s.slideTo(0,e,i)}};const ie={onHashCange(){const e=this;e.emit("hashChange");const t=a.location.hash.replace("#","");if(t!==e.slides.eq(e.activeIndex).attr("data-hash")){const i=e.$wrapperEl.children(`.${e.params.slideClass}[data-hash="${t}"]`).index();if(void 0===i)return;e.slideTo(i)}},setHash(){const e=this;if(e.hashNavigation.initialized&&e.params.hashNavigation.enabled)if(e.params.hashNavigation.replaceState&&o.history&&o.history.replaceState)o.history.replaceState(null,null,"#"+e.slides.eq(e.activeIndex).attr("data-hash")||""),e.emit("hashSet");else{const t=e.slides.eq(e.activeIndex),i=t.attr("data-hash")||t.attr("data-history");a.location.hash=i||"",e.emit("hashSet")}},init(){const e=this;if(!e.params.hashNavigation.enabled||e.params.history&&e.params.history.enabled)return;e.hashNavigation.initialized=!0;const t=a.location.hash.replace("#","");if(t){const i=0;for(let s=0,n=e.slides.length;s<n;s+=1){const n=e.slides.eq(s);if((n.attr("data-hash")||n.attr("data-history"))===t&&!n.hasClass(e.params.slideDuplicateClass)){const t=n.index();e.slideTo(t,i,e.params.runCallbacksOnInit,!0)}}}e.params.hashNavigation.watchState&&d(o).on("hashchange",e.hashNavigation.onHashCange)},destroy(){const e=this;e.params.hashNavigation.watchState&&d(o).off("hashchange",e.hashNavigation.onHashCange)}};const se={run(){const e=this,t=e.slides.eq(e.activeIndex);let i=e.params.autoplay.delay;t.attr("data-swiper-autoplay")&&(i=t.attr("data-swiper-autoplay")||e.params.autoplay.delay),clearTimeout(e.autoplay.timeout),e.autoplay.timeout=u.nextTick(()=>{e.params.autoplay.reverseDirection?e.params.loop?(e.loopFix(),e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.isBeginning?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(e.slides.length-1,e.params.speed,!0,!0),e.emit("autoplay")):(e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.params.loop?(e.loopFix(),e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")):e.isEnd?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(0,e.params.speed,!0,!0),e.emit("autoplay")):(e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")),e.params.cssMode&&e.autoplay.running&&e.autoplay.run()},i)},start(){return void 0===this.autoplay.timeout&&(!this.autoplay.running&&(this.autoplay.running=!0,this.emit("autoplayStart"),this.autoplay.run(),!0))},stop(){const e=this;return!!e.autoplay.running&&(void 0!==e.autoplay.timeout&&(e.autoplay.timeout&&(clearTimeout(e.autoplay.timeout),e.autoplay.timeout=void 0),e.autoplay.running=!1,e.emit("autoplayStop"),!0))},pause(e){const t=this;t.autoplay.running&&(t.autoplay.paused||(t.autoplay.timeout&&clearTimeout(t.autoplay.timeout),t.autoplay.paused=!0,0!==e&&t.params.autoplay.waitForTransition?(t.$wrapperEl[0].addEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].addEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd)):(t.autoplay.paused=!1,t.autoplay.run())))}};const ne={setTranslate(){const e=this,{slides:t}=e;for(let i=0;i<t.length;i+=1){const t=e.slides.eq(i);let s=-t[0].swiperSlideOffset;e.params.virtualTranslate||(s-=e.translate);let n=0;e.isHorizontal()||(n=s,s=0);const a=e.params.fadeEffect.crossFade?Math.max(1-Math.abs(t[0].progress),0):1+Math.min(Math.max(t[0].progress,-1),0);t.css({opacity:a}).transform(`translate3d(${s}px, ${n}px, 0px)`)}},setTransition(e){const t=this,{slides:i,$wrapperEl:s}=t;if(i.transition(e),t.params.virtualTranslate&&0!==e){let e=!1;i.transitionEnd(()=>{if(e)return;if(!t||t.destroyed)return;e=!0,t.animating=!1;const i=["webkitTransitionEnd","transitionend"];for(let e=0;e<i.length;e+=1)s.trigger(i[e])})}}};const ae={setTranslate(){const{$el:e,$wrapperEl:t,slides:i,width:s,height:n,rtlTranslate:a,size:r}=this,o=this.params.cubeEffect,l=this.isHorizontal(),p=this.virtual&&this.params.virtual.enabled;let c,u=0;o.shadow&&(l?(c=t.find(".swiper-cube-shadow"),0===c.length&&(c=d('<div class="swiper-cube-shadow"></div>'),t.append(c)),c.css({height:s+"px"})):(c=e.find(".swiper-cube-shadow"),0===c.length&&(c=d('<div class="swiper-cube-shadow"></div>'),e.append(c))));for(let e=0;e<i.length;e+=1){const t=i.eq(e);let s=e;p&&(s=parseInt(t.attr("data-swiper-slide-index"),10));let n=90*s,c=Math.floor(n/360);a&&(n=-n,c=Math.floor(-n/360));const h=Math.max(Math.min(t[0].progress,1),-1);let m=0,f=0,g=0;s%4==0?(m=4*-c*r,g=0):(s-1)%4==0?(m=0,g=4*-c*r):(s-2)%4==0?(m=r+4*c*r,g=r):(s-3)%4==0&&(m=-r,g=3*r+4*r*c),a&&(m=-m),l||(f=m,m=0);const v=`rotateX(${l?0:-n}deg) rotateY(${l?n:0}deg) translate3d(${m}px, ${f}px, ${g}px)`;if(h<=1&&h>-1&&(u=90*s+90*h,a&&(u=90*-s-90*h)),t.transform(v),o.slideShadows){let e=l?t.find(".swiper-slide-shadow-left"):t.find(".swiper-slide-shadow-top"),i=l?t.find(".swiper-slide-shadow-right"):t.find(".swiper-slide-shadow-bottom");0===e.length&&(e=d(`<div class="swiper-slide-shadow-${l?"left":"top"}"></div>`),t.append(e)),0===i.length&&(i=d(`<div class="swiper-slide-shadow-${l?"right":"bottom"}"></div>`),t.append(i)),e.length&&(e[0].style.opacity=Math.max(-h,0)),i.length&&(i[0].style.opacity=Math.max(h,0))}}if(t.css({"-webkit-transform-origin":`50% 50% -${r/2}px`,"-moz-transform-origin":`50% 50% -${r/2}px`,"-ms-transform-origin":`50% 50% -${r/2}px`,"transform-origin":`50% 50% -${r/2}px`}),o.shadow)if(l)c.transform(`translate3d(0px, ${s/2+o.shadowOffset}px, ${-s/2}px) rotateX(90deg) rotateZ(0deg) scale(${o.shadowScale})`);else{const e=Math.abs(u)-90*Math.floor(Math.abs(u)/90),t=1.5-(Math.sin(2*e*Math.PI/360)/2+Math.cos(2*e*Math.PI/360)/2),i=o.shadowScale,s=o.shadowScale/t,a=o.shadowOffset;c.transform(`scale3d(${i}, 1, ${s}) translate3d(0px, ${n/2+a}px, ${-n/2/s}px) rotateX(-90deg)`)}const h=G.isSafari||G.isWebView?-r/2:0;t.transform(`translate3d(0px,0,${h}px) rotateX(${this.isHorizontal()?0:u}deg) rotateY(${this.isHorizontal()?-u:0}deg)`)},setTransition(e){const{$el:t,slides:i}=this;i.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),this.params.cubeEffect.shadow&&!this.isHorizontal()&&t.find(".swiper-cube-shadow").transition(e)}};const re={setTranslate(){const e=this,{slides:t,rtlTranslate:i}=e;for(let s=0;s<t.length;s+=1){const n=t.eq(s);let a=n[0].progress;e.params.flipEffect.limitRotation&&(a=Math.max(Math.min(n[0].progress,1),-1));let r=-180*a,o=0,l=-n[0].swiperSlideOffset,p=0;if(e.isHorizontal()?i&&(r=-r):(p=l,l=0,o=-r,r=0),n[0].style.zIndex=-Math.abs(Math.round(a))+t.length,e.params.flipEffect.slideShadows){let t=e.isHorizontal()?n.find(".swiper-slide-shadow-left"):n.find(".swiper-slide-shadow-top"),i=e.isHorizontal()?n.find(".swiper-slide-shadow-right"):n.find(".swiper-slide-shadow-bottom");0===t.length&&(t=d(`<div class="swiper-slide-shadow-${e.isHorizontal()?"left":"top"}"></div>`),n.append(t)),0===i.length&&(i=d(`<div class="swiper-slide-shadow-${e.isHorizontal()?"right":"bottom"}"></div>`),n.append(i)),t.length&&(t[0].style.opacity=Math.max(-a,0)),i.length&&(i[0].style.opacity=Math.max(a,0))}n.transform(`translate3d(${l}px, ${p}px, 0px) rotateX(${o}deg) rotateY(${r}deg)`)}},setTransition(e){const t=this,{slides:i,activeIndex:s,$wrapperEl:n}=t;if(i.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),t.params.virtualTranslate&&0!==e){let e=!1;i.eq(s).transitionEnd((function(){if(e)return;if(!t||t.destroyed)return;e=!0,t.animating=!1;const i=["webkitTransitionEnd","transitionend"];for(let e=0;e<i.length;e+=1)n.trigger(i[e])}))}}};const oe={setTranslate(){const{width:e,height:t,slides:i,$wrapperEl:s,slidesSizesGrid:n}=this,a=this.params.coverflowEffect,r=this.isHorizontal(),o=this.translate,l=r?e/2-o:t/2-o,p=r?a.rotate:-a.rotate,c=a.depth;for(let e=0,t=i.length;e<t;e+=1){const t=i.eq(e),s=n[e],o=(l-t[0].swiperSlideOffset-s/2)/s*a.modifier;let u=r?p*o:0,h=r?0:p*o,m=-c*Math.abs(o),f=a.stretch;"string"==typeof f&&-1!==f.indexOf("%")&&(f=parseFloat(a.stretch)/100*s);let g=r?0:f*o,v=r?f*o:0,w=1-(1-a.scale)*Math.abs(o);Math.abs(v)<.001&&(v=0),Math.abs(g)<.001&&(g=0),Math.abs(m)<.001&&(m=0),Math.abs(u)<.001&&(u=0),Math.abs(h)<.001&&(h=0),Math.abs(w)<.001&&(w=0);const b=`translate3d(${v}px,${g}px,${m}px)  rotateX(${h}deg) rotateY(${u}deg) scale(${w})`;if(t.transform(b),t[0].style.zIndex=1-Math.abs(Math.round(o)),a.slideShadows){let e=r?t.find(".swiper-slide-shadow-left"):t.find(".swiper-slide-shadow-top"),i=r?t.find(".swiper-slide-shadow-right"):t.find(".swiper-slide-shadow-bottom");0===e.length&&(e=d(`<div class="swiper-slide-shadow-${r?"left":"top"}"></div>`),t.append(e)),0===i.length&&(i=d(`<div class="swiper-slide-shadow-${r?"right":"bottom"}"></div>`),t.append(i)),e.length&&(e[0].style.opacity=o>0?o:0),i.length&&(i[0].style.opacity=-o>0?-o:0)}}if(h.pointerEvents||h.prefixedPointerEvents){s[0].style.perspectiveOrigin=l+"px 50%"}},setTransition(e){this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}};const le={init(){const e=this,{thumbs:t}=e.params,i=e.constructor;t.swiper instanceof i?(e.thumbs.swiper=t.swiper,u.extend(e.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),u.extend(e.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1})):u.isObject(t.swiper)&&(e.thumbs.swiper=new i(u.extend({},t.swiper,{watchSlidesVisibility:!0,watchSlidesProgress:!0,slideToClickedSlide:!1})),e.thumbs.swiperCreated=!0),e.thumbs.swiper.$el.addClass(e.params.thumbs.thumbsContainerClass),e.thumbs.swiper.on("tap",e.thumbs.onThumbClick)},onThumbClick(){const e=this,t=e.thumbs.swiper;if(!t)return;const i=t.clickedIndex,s=t.clickedSlide;if(s&&d(s).hasClass(e.params.thumbs.slideThumbActiveClass))return;if(null==i)return;let n;if(n=t.params.loop?parseInt(d(t.clickedSlide).attr("data-swiper-slide-index"),10):i,e.params.loop){let t=e.activeIndex;e.slides.eq(t).hasClass(e.params.slideDuplicateClass)&&(e.loopFix(),e._clientLeft=e.$wrapperEl[0].clientLeft,t=e.activeIndex);const i=e.slides.eq(t).prevAll(`[data-swiper-slide-index="${n}"]`).eq(0).index(),s=e.slides.eq(t).nextAll(`[data-swiper-slide-index="${n}"]`).eq(0).index();n=void 0===i?s:void 0===s?i:s-t<t-i?s:i}e.slideTo(n)},update(e){const t=this,i=t.thumbs.swiper;if(!i)return;const s="auto"===i.params.slidesPerView?i.slidesPerViewDynamic():i.params.slidesPerView,n=t.params.thumbs.autoScrollOffset,a=n&&!i.params.loop;if(t.realIndex!==i.realIndex||a){let r,o,l=i.activeIndex;if(i.params.loop){i.slides.eq(l).hasClass(i.params.slideDuplicateClass)&&(i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft,l=i.activeIndex);const e=i.slides.eq(l).prevAll(`[data-swiper-slide-index="${t.realIndex}"]`).eq(0).index(),s=i.slides.eq(l).nextAll(`[data-swiper-slide-index="${t.realIndex}"]`).eq(0).index();r=void 0===e?s:void 0===s?e:s-l==l-e?l:s-l<l-e?s:e,o=t.activeIndex>t.previousIndex?"next":"prev"}else r=t.realIndex,o=r>t.previousIndex?"next":"prev";a&&(r+="next"===o?n:-1*n),i.visibleSlidesIndexes&&i.visibleSlidesIndexes.indexOf(r)<0&&(i.params.centeredSlides?r=r>l?r-Math.floor(s/2)+1:r+Math.floor(s/2)-1:r>l&&(r=r-s+1),i.slideTo(r,e?0:void 0))}let r=1;const o=t.params.thumbs.slideThumbActiveClass;if(t.params.slidesPerView>1&&!t.params.centeredSlides&&(r=t.params.slidesPerView),t.params.thumbs.multipleActiveThumbs||(r=1),r=Math.floor(r),i.slides.removeClass(o),i.params.loop||i.params.virtual&&i.params.virtual.enabled)for(let e=0;e<r;e+=1)i.$wrapperEl.children(`[data-swiper-slide-index="${t.realIndex+e}"]`).addClass(o);else for(let e=0;e<r;e+=1)i.slides.eq(t.realIndex+e).addClass(o)}};const de=[O,B,Y,N,X,F,R,{name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarged:"container"}},create(){u.extend(this,{mousewheel:{enabled:!1,enable:q.enable.bind(this),disable:q.disable.bind(this),handle:q.handle.bind(this),handleMouseEnter:q.handleMouseEnter.bind(this),handleMouseLeave:q.handleMouseLeave.bind(this),animateSlider:q.animateSlider.bind(this),releaseScroll:q.releaseScroll.bind(this),lastScrollTime:u.now(),lastEventBeforeSnap:void 0,recentWheelEvents:[]}})},on:{init(){const e=this;!e.params.mousewheel.enabled&&e.params.cssMode&&e.mousewheel.disable(),e.params.mousewheel.enabled&&e.mousewheel.enable()},destroy(){const e=this;e.params.cssMode&&e.mousewheel.enable(),e.mousewheel.enabled&&e.mousewheel.disable()}}},{name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create(){u.extend(this,{navigation:{init:W.init.bind(this),update:W.update.bind(this),destroy:W.destroy.bind(this),onNextClick:W.onNextClick.bind(this),onPrevClick:W.onPrevClick.bind(this)}})},on:{init(){this.navigation.init(),this.navigation.update()},toEdge(){this.navigation.update()},fromEdge(){this.navigation.update()},destroy(){this.navigation.destroy()},click(e){const t=this,{$nextEl:i,$prevEl:s}=t.navigation;if(t.params.navigation.hideOnClick&&!d(e.target).is(s)&&!d(e.target).is(i)){let e;i?e=i.hasClass(t.params.navigation.hiddenClass):s&&(e=s.hasClass(t.params.navigation.hiddenClass)),!0===e?t.emit("navigationShow",t):t.emit("navigationHide",t),i&&i.toggleClass(t.params.navigation.hiddenClass),s&&s.toggleClass(t.params.navigation.hiddenClass)}}}},{name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create(){u.extend(this,{pagination:{init:U.init.bind(this),render:U.render.bind(this),update:U.update.bind(this),destroy:U.destroy.bind(this),dynamicBulletIndex:0}})},on:{init(){this.pagination.init(),this.pagination.render(),this.pagination.update()},activeIndexChange(){const e=this;(e.params.loop||void 0===e.snapIndex)&&e.pagination.update()},snapIndexChange(){const e=this;e.params.loop||e.pagination.update()},slidesLengthChange(){const e=this;e.params.loop&&(e.pagination.render(),e.pagination.update())},snapGridLengthChange(){const e=this;e.params.loop||(e.pagination.render(),e.pagination.update())},destroy(){this.pagination.destroy()},click(e){const t=this;if(t.params.pagination.el&&t.params.pagination.hideOnClick&&t.pagination.$el.length>0&&!d(e.target).hasClass(t.params.pagination.bulletClass)){!0===t.pagination.$el.hasClass(t.params.pagination.hiddenClass)?t.emit("paginationShow",t):t.emit("paginationHide",t),t.pagination.$el.toggleClass(t.params.pagination.hiddenClass)}}}},{name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}},create(){u.extend(this,{scrollbar:{init:Q.init.bind(this),destroy:Q.destroy.bind(this),updateSize:Q.updateSize.bind(this),setTranslate:Q.setTranslate.bind(this),setTransition:Q.setTransition.bind(this),enableDraggable:Q.enableDraggable.bind(this),disableDraggable:Q.disableDraggable.bind(this),setDragPosition:Q.setDragPosition.bind(this),getPointerPosition:Q.getPointerPosition.bind(this),onDragStart:Q.onDragStart.bind(this),onDragMove:Q.onDragMove.bind(this),onDragEnd:Q.onDragEnd.bind(this),isTouched:!1,timeout:null,dragTimeout:null}})},on:{init(){this.scrollbar.init(),this.scrollbar.updateSize(),this.scrollbar.setTranslate()},update(){this.scrollbar.updateSize()},resize(){this.scrollbar.updateSize()},observerUpdate(){this.scrollbar.updateSize()},setTranslate(){this.scrollbar.setTranslate()},setTransition(e){this.scrollbar.setTransition(e)},destroy(){this.scrollbar.destroy()}}},{name:"parallax",params:{parallax:{enabled:!1}},create(){u.extend(this,{parallax:{setTransform:K.setTransform.bind(this),setTranslate:K.setTranslate.bind(this),setTransition:K.setTransition.bind(this)}})},on:{beforeInit(){this.params.parallax.enabled&&(this.params.watchSlidesProgress=!0,this.originalParams.watchSlidesProgress=!0)},init(){this.params.parallax.enabled&&this.parallax.setTranslate()},setTranslate(){this.params.parallax.enabled&&this.parallax.setTranslate()},setTransition(e){this.params.parallax.enabled&&this.parallax.setTransition(e)}}},{name:"zoom",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}},create(){const e=this,t={enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}};"onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out".split(" ").forEach(i=>{t[i]=Z[i].bind(e)}),u.extend(e,{zoom:t});let i=1;Object.defineProperty(e.zoom,"scale",{get:()=>i,set(t){if(i!==t){const i=e.zoom.gesture.$imageEl?e.zoom.gesture.$imageEl[0]:void 0,s=e.zoom.gesture.$slideEl?e.zoom.gesture.$slideEl[0]:void 0;e.emit("zoomChange",t,i,s)}i=t}})},on:{init(){const e=this;e.params.zoom.enabled&&e.zoom.enable()},destroy(){this.zoom.disable()},touchStart(e){this.zoom.enabled&&this.zoom.onTouchStart(e)},touchEnd(e){this.zoom.enabled&&this.zoom.onTouchEnd(e)},doubleTap(e){const t=this;t.params.zoom.enabled&&t.zoom.enabled&&t.params.zoom.toggle&&t.zoom.toggle(e)},transitionEnd(){const e=this;e.zoom.enabled&&e.params.zoom.enabled&&e.zoom.onTransitionEnd()},slideChange(){const e=this;e.zoom.enabled&&e.params.zoom.enabled&&e.params.cssMode&&e.zoom.onTransitionEnd()}}},{name:"lazy",params:{lazy:{enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}},create(){u.extend(this,{lazy:{initialImageLoaded:!1,load:_.load.bind(this),loadInSlide:_.loadInSlide.bind(this)}})},on:{beforeInit(){const e=this;e.params.lazy.enabled&&e.params.preloadImages&&(e.params.preloadImages=!1)},init(){const e=this;e.params.lazy.enabled&&!e.params.loop&&0===e.params.initialSlide&&e.lazy.load()},scroll(){const e=this;e.params.freeMode&&!e.params.freeModeSticky&&e.lazy.load()},resize(){const e=this;e.params.lazy.enabled&&e.lazy.load()},scrollbarDragMove(){const e=this;e.params.lazy.enabled&&e.lazy.load()},transitionStart(){const e=this;e.params.lazy.enabled&&(e.params.lazy.loadOnTransitionStart||!e.params.lazy.loadOnTransitionStart&&!e.lazy.initialImageLoaded)&&e.lazy.load()},transitionEnd(){const e=this;e.params.lazy.enabled&&!e.params.lazy.loadOnTransitionStart&&e.lazy.load()},slideChange(){const e=this;e.params.lazy.enabled&&e.params.cssMode&&e.lazy.load()}}},{name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create(){u.extend(this,{controller:{control:this.params.controller.control,getInterpolateFunction:J.getInterpolateFunction.bind(this),setTranslate:J.setTranslate.bind(this),setTransition:J.setTransition.bind(this)}})},on:{update(){const e=this;e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},resize(){const e=this;e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},observerUpdate(){const e=this;e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},setTranslate(e,t){this.controller.control&&this.controller.setTranslate(e,t)},setTransition(e,t){this.controller.control&&this.controller.setTransition(e,t)}}},{name:"a11y",params:{a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}"}},create(){const e=this;u.extend(e,{a11y:{liveRegion:d(`<span class="${e.params.a11y.notificationClass}" aria-live="assertive" aria-atomic="true"></span>`)}}),Object.keys(ee).forEach(t=>{e.a11y[t]=ee[t].bind(e)})},on:{init(){this.params.a11y.enabled&&(this.a11y.init(),this.a11y.updateNavigation())},toEdge(){this.params.a11y.enabled&&this.a11y.updateNavigation()},fromEdge(){this.params.a11y.enabled&&this.a11y.updateNavigation()},paginationUpdate(){this.params.a11y.enabled&&this.a11y.updatePagination()},destroy(){this.params.a11y.enabled&&this.a11y.destroy()}}},{name:"history",params:{history:{enabled:!1,replaceState:!1,key:"slides"}},create(){u.extend(this,{history:{init:te.init.bind(this),setHistory:te.setHistory.bind(this),setHistoryPopState:te.setHistoryPopState.bind(this),scrollToSlide:te.scrollToSlide.bind(this),destroy:te.destroy.bind(this)}})},on:{init(){const e=this;e.params.history.enabled&&e.history.init()},destroy(){const e=this;e.params.history.enabled&&e.history.destroy()},transitionEnd(){const e=this;e.history.initialized&&e.history.setHistory(e.params.history.key,e.activeIndex)},slideChange(){const e=this;e.history.initialized&&e.params.cssMode&&e.history.setHistory(e.params.history.key,e.activeIndex)}}},{name:"hash-navigation",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create(){u.extend(this,{hashNavigation:{initialized:!1,init:ie.init.bind(this),destroy:ie.destroy.bind(this),setHash:ie.setHash.bind(this),onHashCange:ie.onHashCange.bind(this)}})},on:{init(){const e=this;e.params.hashNavigation.enabled&&e.hashNavigation.init()},destroy(){const e=this;e.params.hashNavigation.enabled&&e.hashNavigation.destroy()},transitionEnd(){const e=this;e.hashNavigation.initialized&&e.hashNavigation.setHash()},slideChange(){const e=this;e.hashNavigation.initialized&&e.params.cssMode&&e.hashNavigation.setHash()}}},{name:"autoplay",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create(){const e=this;u.extend(e,{autoplay:{running:!1,paused:!1,run:se.run.bind(e),start:se.start.bind(e),stop:se.stop.bind(e),pause:se.pause.bind(e),onVisibilityChange(){"hidden"===document.visibilityState&&e.autoplay.running&&e.autoplay.pause(),"visible"===document.visibilityState&&e.autoplay.paused&&(e.autoplay.run(),e.autoplay.paused=!1)},onTransitionEnd(t){e&&!e.destroyed&&e.$wrapperEl&&t.target===this&&(e.$wrapperEl[0].removeEventListener("transitionend",e.autoplay.onTransitionEnd),e.$wrapperEl[0].removeEventListener("webkitTransitionEnd",e.autoplay.onTransitionEnd),e.autoplay.paused=!1,e.autoplay.running?e.autoplay.run():e.autoplay.stop())}}})},on:{init(){const e=this;e.params.autoplay.enabled&&(e.autoplay.start(),document.addEventListener("visibilitychange",e.autoplay.onVisibilityChange))},beforeTransitionStart(e,t){const i=this;i.autoplay.running&&(t||!i.params.autoplay.disableOnInteraction?i.autoplay.pause(e):i.autoplay.stop())},sliderFirstMove(){const e=this;e.autoplay.running&&(e.params.autoplay.disableOnInteraction?e.autoplay.stop():e.autoplay.pause())},touchEnd(){const e=this;e.params.cssMode&&e.autoplay.paused&&!e.params.autoplay.disableOnInteraction&&e.autoplay.run()},destroy(){const e=this;e.autoplay.running&&e.autoplay.stop(),document.removeEventListener("visibilitychange",e.autoplay.onVisibilityChange)}}},{name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create(){u.extend(this,{fadeEffect:{setTranslate:ne.setTranslate.bind(this),setTransition:ne.setTransition.bind(this)}})},on:{beforeInit(){if("fade"!==this.params.effect)return;this.classNames.push(this.params.containerModifierClass+"fade");const e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};u.extend(this.params,e),u.extend(this.originalParams,e)},setTranslate(){"fade"===this.params.effect&&this.fadeEffect.setTranslate()},setTransition(e){"fade"===this.params.effect&&this.fadeEffect.setTransition(e)}}},{name:"effect-cube",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create(){u.extend(this,{cubeEffect:{setTranslate:ae.setTranslate.bind(this),setTransition:ae.setTransition.bind(this)}})},on:{beforeInit(){if("cube"!==this.params.effect)return;this.classNames.push(this.params.containerModifierClass+"cube"),this.classNames.push(this.params.containerModifierClass+"3d");const e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0};u.extend(this.params,e),u.extend(this.originalParams,e)},setTranslate(){"cube"===this.params.effect&&this.cubeEffect.setTranslate()},setTransition(e){"cube"===this.params.effect&&this.cubeEffect.setTransition(e)}}},{name:"effect-flip",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create(){u.extend(this,{flipEffect:{setTranslate:re.setTranslate.bind(this),setTransition:re.setTransition.bind(this)}})},on:{beforeInit(){if("flip"!==this.params.effect)return;this.classNames.push(this.params.containerModifierClass+"flip"),this.classNames.push(this.params.containerModifierClass+"3d");const e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};u.extend(this.params,e),u.extend(this.originalParams,e)},setTranslate(){"flip"===this.params.effect&&this.flipEffect.setTranslate()},setTransition(e){"flip"===this.params.effect&&this.flipEffect.setTransition(e)}}},{name:"effect-coverflow",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0}},create(){u.extend(this,{coverflowEffect:{setTranslate:oe.setTranslate.bind(this),setTransition:oe.setTransition.bind(this)}})},on:{beforeInit(){"coverflow"===this.params.effect&&(this.classNames.push(this.params.containerModifierClass+"coverflow"),this.classNames.push(this.params.containerModifierClass+"3d"),this.params.watchSlidesProgress=!0,this.originalParams.watchSlidesProgress=!0)},setTranslate(){"coverflow"===this.params.effect&&this.coverflowEffect.setTranslate()},setTransition(e){"coverflow"===this.params.effect&&this.coverflowEffect.setTransition(e)}}},{name:"thumbs",params:{thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-container-thumbs"}},create(){u.extend(this,{thumbs:{swiper:null,init:le.init.bind(this),update:le.update.bind(this),onThumbClick:le.onThumbClick.bind(this)}})},on:{beforeInit(){const{thumbs:e}=this.params;e&&e.swiper&&(this.thumbs.init(),this.thumbs.update(!0))},slideChange(){this.thumbs.swiper&&this.thumbs.update()},update(){this.thumbs.swiper&&this.thumbs.update()},resize(){this.thumbs.swiper&&this.thumbs.update()},observerUpdate(){this.thumbs.swiper&&this.thumbs.update()},setTransition(e){const t=this.thumbs.swiper;t&&t.setTransition(e)},beforeDestroy(){const e=this.thumbs.swiper;e&&this.thumbs.swiperCreated&&e&&e.destroy()}}}];void 0===D.use&&(D.use=D.Class.use,D.installModule=D.Class.installModule),D.use(de);var pe=D,ce=i.p+"images/f969032e573657f6c803e62e8db4e316.png",ue=i.p+"images/d8c5630d7510965c7200ace700047590.png",he=i.p+"images/c00a7838aff9ae14e1671bc0c54e5938.png",me=i.p+"images/ed02089be17aa2f4a4d9a7a194a24f11.png",fe=i.p+"images/88541ec0a7b246787e25041a77e46fd6.png",ge=i.p+"images/f67587912c1109a3dac37254912ab6e7.png",ve=i.p+"images/cbdd178489605cdbc47eb2d4019e697d.png",we=i.p+"images/84a4b2c98d0f976c383b67bfeb79dbaa.png",be=i.p+"images/a178c94e0bbac64b4724e991f5ccf232.png",xe=i.p+"images/82024b1def2196139dc798aefdd543b4.png",ye=i.p+"images/a77818113a4699dfb32c10f008280bb9.png",Ee=i.p+"images/108bb91922f173297b31def85ba458a7.png",Te=i.p+"images/16d118d21f014e5ad80c630e4ede5613.png",Se=i.p+"images/8a3a0c8a2700d40f73270c286d113951.png",Ce=i.p+"images/90609c38ef9dc05de457d58fd788ae0f.png",ke=i.p+"images/e419ca29c091a19abcc46b4b38095314.png",Ae=i.p+"images/10421d17db6bc3bbd887266fea4eb2cd.png";i(2),i(8);var Me=[{title:"Budget Planner",date_dev:"2020",stack:"Ionic, Angular",description:'\n          A simple budget planner that I made using <a href="https://ionicframework.com/" class="underline">Ionic</a>\n          / <a href="https://angular.io/" class="underline">Angular</a> stack. While starting to learn about Ionic, \n          it has come to my idea to make a relatively simple budget planner/tracking app targeted for highschool\n          students that hopefully, they can use to track their allowances and expenses, and might encourage them\n          to save some of their money.\n        ',features:["Day-to-day tracking of allowances and expenses","Generate monthly summary, provide basic insight of expenditures and income","Able to backup data to a file for later recovery","Has a Help & Feedback feature that answers FAQs and provides an email box for suggestions"],prefix:"budget",images:[{url:ce,label:"Swipe to right for more images!"},{url:ue,label:"Supports dark mode"},{url:he,label:"Generate montly overview"},{url:me,label:"View your expenses"},{url:fe,label:"Track your savings"},{url:ge,label:"Never feel clueless! I'm here."},{url:ve,label:"Even supports local backup!"}],links:[{site:"github",url:"#",disabled:!0},{site:"open",url:"#",disabled:!0}]},{title:"School Online Content System",date_dev:"2020",stack:"Django, Python",description:'\n        A yet another simple website using <a href="https://www.djangoproject.com/" class="underline">Django</a>\n        / <a href="https://www.python.org/" class="underline">Python</a> stack. As I have been eager to learn Python, \n        I have stumbled upon the Django framework and has integrated it with \n        <a href="https://django-googledrive-storage.readthedocs.io/en/latest/" class="underline">Google Drive API</a> \n        to host uploaded files by the users.\n    ',features:["Has basic user registration","Also supports email password reset through Gmail's SMTP","Supports uploads of files online using Google Drive API (using a service account)","Limits access of students signed up to access only those lessons they are enrolled to","Targeted for use on small-scale schools only"],prefix:"schoolcms",images:[{url:Se,label:"Login Page"},{url:Ce,label:"Responsive design"},{url:ke,label:"Download lessons hosted online"},{url:Ae,label:"View your subjects depending on your course"}],links:[{site:"github",url:"#",disabled:!0}]},{title:"Edzer Studio Schedule Management System",date_dev:"2019",stack:"C#, MySQL",description:'\n        This is a group project that I made together with a team, as a requirement for one of my \n        database-related subjects on my 2nd year. Along with a planned database schema, an interview \n        with <a href="https://www.facebook.com/EDZERSTUDIO/" class="underline">Edzer Music Studio</a>, this WPF application (C# and MySQL served on XAMPP) features a scheduling \n        system with fees computation based on hours and intrument rentals, intrument management, and a \n        user panel for the administrator to assign other users with less privileges to the system.\n    ',features:["Schedule management that enables system user to create, update, and delete schedule records","Notifies the system user (admin or an employee), on upcoming schedules about to start","Able to calculate rental fee based on duration of rent, as well as add-ons (instrument rentals)","Management of instruments available for rental","User account control with two (2) levels of privileges (administrator and basic user)."],prefix:"edzer",images:[{url:we,label:"A Recording Studio Scheduling System"},{url:Ee,label:"Login"},{url:xe,label:"Dashboard Overview"},{url:be,label:"Add Schedules"},{url:Te,label:"Be reminded of who's next"},{url:ye,label:"Manage Instruments"}],links:[{site:"github",url:"#",disabled:!0}]}],$e=document.querySelector("#works");if("content"in document.createElement("template")&&null!=document.querySelector("#work-template")){var ze=document.querySelector("#work-template");Me.forEach(e=>{let t=ze.content.cloneNode(!0),i=t.querySelector(".swiper-container");i.classList.add(e.prefix+"-slider");let s=i.querySelector(".swiper-wrapper"),n=document.createElement("div");n.classList.add("swiper-slide");let a=document.createElement("img"),r=document.createElement("div");r.classList.add("img-label"),n.appendChild(a),n.appendChild(r),e.images.forEach(e=>{let t=n.cloneNode(!0);t.querySelector("img").src=e.url,t.querySelector(".img-label").innerText=e.label,s.appendChild(t)}),i.querySelector(".swiper-pagination").classList.add(e.prefix+"-pagination"),t.querySelector(".w-title").innerText=e.title,t.querySelector(".w-stack").innerText=`${e.stack} | ${e.date_dev}`;let o=t.querySelector(".w-p"),l=o.querySelector("p");if(l.innerHTML=e.description,e.features){let t=document.createElement("ul");e.features.forEach(e=>{let i=document.createElement("li");i.innerText=e,t.append(i)}),l.appendChild(t)}let d=t.querySelector(".w-links"),p=document.createElement("li");p.appendChild(document.createElement("a")).appendChild(document.createElement("img")),e.links.forEach(e=>{let t=p.cloneNode(!0);t.querySelector("a").href=e.url,e.disabled&&t.querySelector("a").classList.add("disabled"),t.querySelector("img").classList.add(e.site),d.appendChild(t)});let c=t.querySelector(".w-toggle");c.addEventListener("click",()=>{o.classList.contains("show-p")?(o.classList.remove("show-p"),c.innerText="Show More"):(o.classList.add("show-p"),c.innerText="Hide")}),console.log(t),$e.appendChild(t)})}var Pe={direction:"horizontal",slidesPerView:1,freeMode:!0,freeModeMomentum:!0,freeModeMomentumRatio:.3};new pe(".budget-slider",{...Pe,pagination:{el:".budget-pagination",type:"bullets"}}),new pe(".schoolcms-slider",{...Pe,pagination:{el:".schoolcms-pagination",type:"bullets"}}),new pe(".edzer-slider",{...Pe,pagination:{el:".edzer-pagination",type:"bullets"}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
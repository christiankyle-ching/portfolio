!function(e){var t={};function i(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)i.d(n,s,function(t){return e[t]}.bind(null,s));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=18)}([function(e,t,i){"use strict";i.r(t),t.default=i.p+"images/e419ca29c091a19abcc46b4b38095314.png"},function(e,t,i){"use strict";i.r(t),t.default=i.p+"images/108bb91922f173297b31def85ba458a7.png"},function(e,t,i){"use strict";i.r(t),t.default=i.p+"images/cbdd178489605cdbc47eb2d4019e697d.png"},function(e,t,i){"use strict";var n,s=function(){return void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n},a=function(){var e={};return function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}e[t]=i}return e[t]}}(),r=[];function o(e){for(var t=-1,i=0;i<r.length;i++)if(r[i].identifier===e){t=i;break}return t}function l(e,t){for(var i={},n=[],s=0;s<e.length;s++){var a=e[s],l=t.base?a[0]+t.base:a[0],d=i[l]||0,p="".concat(l," ").concat(d);i[l]=d+1;var c=o(p),u={css:a[1],media:a[2],sourceMap:a[3]};-1!==c?(r[c].references++,r[c].updater(u)):r.push({identifier:p,updater:g(u,t),references:1}),n.push(p)}return n}function d(e){var t=document.createElement("style"),n=e.attributes||{};if(void 0===n.nonce){var s=i.nc;s&&(n.nonce=s)}if(Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),"function"==typeof e.insert)e.insert(t);else{var r=a(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}return t}var p,c=(p=[],function(e,t){return p[e]=t,p.filter(Boolean).join("\n")});function u(e,t,i,n){var s=i?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(e.styleSheet)e.styleSheet.cssText=c(t,s);else{var a=document.createTextNode(s),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(a,r[t]):e.appendChild(a)}}function h(e,t,i){var n=i.css,s=i.media,a=i.sourceMap;if(s?e.setAttribute("media",s):e.removeAttribute("media"),a&&btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var m=null,f=0;function g(e,t){var i,n,s;if(t.singleton){var a=f++;i=m||(m=d(t)),n=u.bind(null,i,a,!1),s=u.bind(null,i,a,!0)}else i=d(t),n=h.bind(null,i,t),s=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(i)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else s()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=s());var i=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var n=0;n<i.length;n++){var s=o(i[n]);r[s].references--}for(var a=l(e,t),d=0;d<i.length;d++){var p=o(i[d]);0===r[p].references&&(r[p].updater(),r.splice(p,1))}i=a}}}},function(e,t,i){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var i=function(e,t){var i=e[1]||"",n=e[3];if(!n)return i;if(t&&"function"==typeof btoa){var s=(r=n,o=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),"/*# ".concat(l," */")),a=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[i].concat(a).concat([s]).join("\n")}var r,o,l;return[i].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(i,"}"):i})).join("")},t.i=function(e,i,n){"string"==typeof e&&(e=[[null,e,""]]);var s={};if(n)for(var a=0;a<this.length;a++){var r=this[a][0];null!=r&&(s[r]=!0)}for(var o=0;o<e.length;o++){var l=[].concat(e[o]);n&&s[l[0]]||(i&&(l[2]?l[2]="".concat(i," and ").concat(l[2]):l[2]=i),t.push(l))}},t}},function(e,t,i){var n=i(3),s=i(6);"string"==typeof(s=s.__esModule?s.default:s)&&(s=[[e.i,s,""]]);var a={insert:"head",singleton:!1};n(s,a);e.exports=s.locals||{}},function(e,t,i){var n=i(4),s=i(7),a=i(8),r=i(9),o=i(10),l=i(0),d=i(1),p=i(2),c=i(11),u=i(12),h=i(13),m=i(14),f=i(15);(t=n(!1)).push([e.i,"@import url(https://fonts.googleapis.com/css?family=Montserrat);"]),t.push([e.i,"@import url(https://fonts.googleapis.com/css?family=Inter);"]);var g=s(a),b=s(r),w=s(o),v=s(l),x=s(d),y=s(p),E=s(c),T=s(u),S=s(h),C=s(m),k=s(f);t.push([e.i,"* {\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n}\n\n.card {\n  width: 70%;\n  height: 70%;\n  background-size: cover;\n  position: absolute;\n  bottom: 0;\n  margin-left: 15%;\n  background-color: white;\n  -webkit-box-shadow: 0px -6px 7px rgba(0, 0, 0, 0.32);\n          box-shadow: 0px -6px 7px rgba(0, 0, 0, 0.32);\n  border-radius: 10px;\n  -webkit-transition: all 300ms ease-in-out 0s;\n  transition: all 300ms ease-in-out 0s;\n}\n\n.card.card-right {\n  bottom: unset;\n  right: 0;\n  margin-left: 0 !important;\n  margin-top: 15%;\n  -webkit-box-shadow: -6px 0px 7px rgba(0, 0, 0, 0.32) !important;\n          box-shadow: -6px 0px 7px rgba(0, 0, 0, 0.32) !important;\n}\n\nnav {\n  padding: 15px;\n  position: relative;\n}\n\nnav .float-left {\n  display: block;\n  position: absolute;\n}\n\nnav > h1 {\n  text-align: center;\n}\n\nnav .back-button {\n  content: url("+g+');\n  max-width: 30px;\n}\n\nbody {\n  font-family: "Montserrat";\n  color: white;\n  background-color: #030303;\n}\n\na {\n  text-decoration: none;\n  color: unset;\n}\n\na.disabled {\n  pointer-events: none;\n  cursor: default;\n  opacity: 0.3;\n}\n\na.underline {\n  display: inline-block;\n  color: #84c8ff;\n}\n\na.underline:after {\n  content: "";\n  width: 0px;\n  height: 2px;\n  display: block;\n  background: #84c8ff;\n  -webkit-transition: 300ms;\n  transition: 300ms;\n  -webkit-animation: expand-full-width 600ms ease-in-out 0s alternate 2;\n          animation: expand-full-width 600ms ease-in-out 0s alternate 2;\n}\n\na.underline:hover:after {\n  width: 100%;\n}\n\nbutton {\n  color: #05828e;\n  font-weight: 500;\n  background: none;\n  border: none;\n  font-family: "Montserrat";\n  font-size: 0.75em;\n  cursor: pointer;\n  padding: 0 30px;\n  height: 30px;\n  line-height: 30px;\n  border-radius: 15px;\n  border: 2px #05828e solid;\n  outline: none;\n}\n\n.floaters {\n  position: absolute;\n  z-index: -1;\n  width: 100%;\n  height: 100%;\n}\n\n.floater {\n  position: absolute;\n  width: 10vw;\n  opacity: 0.3;\n}\n\n.floater-waves {\n  content: url('+b+");\n}\n\n.floater-spiral {\n  content: url("+w+');\n}\n\n#index-body {\n  font-size: 0.7em;\n  background-color: #030303;\n}\n\n#index-body .container {\n  width: 100%;\n  height: 100vh;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-flow: column wrap;\n          flex-flow: column wrap;\n  overflow: hidden;\n}\n\n#index-body .container .floaters div:nth-child(2) {\n  bottom: 10vh;\n  right: 3vw;\n  -webkit-transform: rotate(-90deg);\n          transform: rotate(-90deg);\n}\n\n#index-body a {\n  color: white !important;\n}\n\n#index-body a:after {\n  -webkit-animation: expand-full-width 600ms ease-in-out 500ms 2 alternate !important;\n          animation: expand-full-width 600ms ease-in-out 500ms 2 alternate !important;\n}\n\n[class*="box-"] {\n  width: 50%;\n}\n\n.box-1 {\n  background-color: #1e2fc7;\n  -webkit-box-flex: 1;\n      -ms-flex: 1 1 33%;\n          flex: 1 1 33%;\n}\n\n.box-2 {\n  -webkit-box-flex: 2;\n      -ms-flex: 2 2 66%;\n          flex: 2 2 66%;\n}\n\n.box-3 {\n  -webkit-box-flex: 1;\n      -ms-flex: 1 1 33%;\n          flex: 1 1 33%;\n}\n\n.box-4 {\n  background-color: #05828e;\n  -webkit-box-flex: 1;\n      -ms-flex: 1 1 33%;\n          flex: 1 1 33%;\n}\n\n.box-5 {\n  background-color: #d47f00;\n  -webkit-box-flex: 1;\n      -ms-flex: 1 1 33%;\n          flex: 1 1 33%;\n}\n\n@media (min-width: 576px) {\n  #index-body {\n    font-size: 1em !important;\n  }\n}\n\n@media (min-width: 768px) {\n  #index-body {\n    font-size: 1.2em !important;\n  }\n  [class*="box-"] {\n    width: 33.33% !important;\n  }\n  .box-1,\n  .box-2,\n  .box-3,\n  .box-4,\n  .box-5 {\n    -webkit-box-flex: 1;\n        -ms-flex: 1 1 50%;\n            flex: 1 1 50%;\n  }\n  .box-3 {\n    -webkit-box-ordinal-group: 4;\n        -ms-flex-order: 3;\n            order: 3;\n  }\n  .box-4 {\n    -webkit-box-ordinal-group: 3;\n        -ms-flex-order: 2;\n            order: 2;\n  }\n  .box-5 {\n    -webkit-box-ordinal-group: 5;\n        -ms-flex-order: 4;\n            order: 4;\n  }\n  .box-2 {\n    -webkit-box-ordinal-group: 6;\n        -ms-flex-order: 5;\n            order: 5;\n  }\n}\n\n.box-1 {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  font-size: 1.2em;\n}\n\n.box-1 .name {\n  font-size: 2em;\n}\n\n.box-1 .dot {\n  font-size: 2em;\n  color: #d47f00;\n}\n\n.box-3 {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: end;\n      -ms-flex-pack: end;\n          justify-content: flex-end;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  position: relative;\n  overflow: hidden;\n}\n\n.box-3 .text-desc {\n  padding-right: 1em;\n  padding-top: 2em;\n}\n\n.box-3 .text-desc > h1 {\n  text-align: right;\n  font-weight: normal;\n}\n\n.box-3 .text-desc > h1 .text-desc-highlight {\n  font-weight: bold;\n  font-size: 1.4em;\n}\n\n.box-3 .desc-bg {\n  font-size: 8em;\n  font-weight: 1000;\n  opacity: 0.15;\n  position: absolute;\n  top: 0;\n  right: -10%;\n}\n\n.box-4 {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-flow: column nowrap;\n          flex-flow: column nowrap;\n  z-index: 0;\n  position: relative;\n  cursor: pointer;\n}\n\n.box-4 .col {\n  -webkit-box-flex: 1;\n      -ms-flex: 1 1 50%;\n          flex: 1 1 50%;\n}\n\n.box-4 .upper-box {\n  z-index: 2;\n  background-color: #044e55;\n  -webkit-box-shadow: 0 -5px 6px rgba(0, 0, 0, 0.32);\n          box-shadow: 0 -5px 6px rgba(0, 0, 0, 0.32);\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n}\n\n.box-4 .upper-box > h1 {\n  font-size: 2.4em;\n  letter-spacing: 0.05em;\n  opacity: 0.7;\n}\n\n.box-4 .card:nth-child(1) {\n  bottom: 20%;\n  background-image: url('+v+");\n}\n\n.box-4 .card:nth-child(2) {\n  bottom: 10%;\n  background-image: url("+x+");\n}\n\n.box-4 .card:nth-child(3) {\n  bottom: 0%;\n  background-image: url("+y+");\n}\n\n.box-4:hover .upper-box > h1 {\n  -webkit-transition: 0.1s opacity ease-in;\n  transition: 0.1s opacity ease-in;\n  opacity: 1;\n}\n\n.box-4:hover .card:nth-child(1) {\n  bottom: 50%;\n}\n\n.box-4:hover .card:nth-child(2) {\n  bottom: 30%;\n}\n\n.box-4:hover .card:nth-child(3) {\n  bottom: 10%;\n}\n\n.box-5 {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  z-index: 0;\n  position: relative;\n  cursor: pointer;\n  position: relative;\n}\n\n.box-5 .col {\n  -webkit-box-flex: 1;\n      -ms-flex: 1 1 50%;\n          flex: 1 1 50%;\n}\n\n.box-5 .upper-box {\n  z-index: 2;\n  background-color: #945a02;\n  -webkit-box-shadow: -5px 0 6px rgba(0, 0, 0, 0.32);\n          box-shadow: -5px 0 6px rgba(0, 0, 0, 0.32);\n  -webkit-writing-mode: vertical-lr;\n      -ms-writing-mode: tb-lr;\n          writing-mode: vertical-lr;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n}\n\n.box-5 .upper-box > h1 {\n  font-size: 2.4em;\n  letter-spacing: 0.05em;\n  -ms-flex-item-align: center;\n      -ms-grid-row-align: center;\n      align-self: center;\n  opacity: 0.7;\n  -webkit-transform: rotate(180deg);\n          transform: rotate(180deg);\n}\n\n.box-5 .card:nth-child(1) {\n  right: 20%;\n  background-image: url("+E+");\n}\n\n.box-5 .card:nth-child(2) {\n  right: 10%;\n  background-image: url("+T+");\n  background-size: contain;\n  background-repeat: no-repeat;\n}\n\n.box-5 .card:nth-child(3) {\n  right: 0%;\n  background-image: url("+S+');\n  background-size: contain;\n  background-repeat: no-repeat;\n}\n\n.box-5:hover .upper-box > h1 {\n  -webkit-transition: 0.1s opacity ease-in;\n  transition: 0.1s opacity ease-in;\n  opacity: 1;\n}\n\n.box-5:hover .card:nth-child(1) {\n  right: 50%;\n}\n\n.box-5:hover .card:nth-child(2) {\n  right: 30%;\n}\n\n.box-5:hover .card:nth-child(3) {\n  right: 10%;\n}\n\n.box-2 {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  z-index: 0;\n  overflow: hidden;\n}\n\n.box-2 .col-1 {\n  -webkit-writing-mode: vertical-lr;\n      -ms-writing-mode: tb-lr;\n          writing-mode: vertical-lr;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: start;\n      -ms-flex-align: start;\n          align-items: flex-start;\n}\n\n.box-2 .col-1 > h1 {\n  font-size: 2.4em;\n  letter-spacing: 0.2em;\n  opacity: 0.7;\n}\n\n.box-2 .col-2 {\n  -webkit-box-flex: 1;\n      -ms-flex: 1;\n          flex: 1;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n}\n\n.box-2 .col-2 ul {\n  list-style: none;\n  width: 90%;\n  height: 90%;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: column;\n          flex-direction: column;\n  -webkit-box-pack: space-evenly;\n      -ms-flex-pack: space-evenly;\n          justify-content: space-evenly;\n}\n\n.box-2 .col-2 ul li .skill-name {\n  font-size: 1.2em;\n  padding-bottom: 0.4em;\n}\n\n.box-2 .col-2 ul li .skill-name > span {\n  float: right;\n}\n\n.box-2 .col-2 ul li .full-bar,\n.box-2 .col-2 ul li .progress-bar {\n  height: 0.8em;\n  background-color: #1e2fc7;\n  border-radius: 0.8em;\n}\n\n.box-2 .col-2 ul li .progress-bar-container .progress-bar {\n  background-color: #d47f00;\n  -webkit-box-shadow: 0 5px 6px rgba(0, 0, 0, 0.32);\n          box-shadow: 0 5px 6px rgba(0, 0, 0, 0.32);\n}\n\n.box-1 .section-1,\n.box-1 .section-2 {\n  opacity: 0;\n}\n\n.box-1 .section-1 {\n  -webkit-animation: fade-to-right 500ms forwards 0.1s ease-out;\n          animation: fade-to-right 500ms forwards 0.1s ease-out;\n}\n\n.box-1 .section-2 {\n  -webkit-animation: fade-to-right 500ms forwards 0s ease-out;\n          animation: fade-to-right 500ms forwards 0s ease-out;\n}\n\n.box-3 .desc-bg,\n.box-3 .text-desc {\n  opacity: 0;\n}\n\n.box-3 .desc-bg {\n  -webkit-animation: fade-to-left-2 500ms forwards 0.1s ease-out;\n          animation: fade-to-left-2 500ms forwards 0.1s ease-out;\n}\n\n.box-3 .text-desc {\n  -webkit-animation: fade-to-left 500ms forwards 0s ease-out;\n          animation: fade-to-left 500ms forwards 0s ease-out;\n}\n\n.box-4 {\n  -webkit-animation: slide-up 500ms forwards 0s ease-out;\n          animation: slide-up 500ms forwards 0s ease-out;\n}\n\n.box-4 .upper-box {\n  -webkit-animation: slide-up 500ms forwards 0s ease-in;\n          animation: slide-up 500ms forwards 0s ease-in;\n}\n\n.box-5 {\n  -webkit-animation: slide-left 500ms forwards 0s ease-out;\n          animation: slide-left 500ms forwards 0s ease-out;\n}\n\n.box-5 .upper-box {\n  -webkit-animation: slide-left 500ms forwards 0s ease-in;\n          animation: slide-left 500ms forwards 0s ease-in;\n}\n\n.box-2 .col-1 {\n  -webkit-animation: fade-to-right 500ms forwards 0s ease-out;\n          animation: fade-to-right 500ms forwards 0s ease-out;\n}\n\n.box-2 .col-2 {\n  opacity: 0;\n  -webkit-animation: fade-to-right 500ms forwards 0.4s ease-out;\n          animation: fade-to-right 500ms forwards 0.4s ease-out;\n}\n\n.box-2 .col-2 .progress-bar {\n  width: 0;\n  -webkit-animation: expand-full-width 600ms forwards 1000ms ease-out;\n          animation: expand-full-width 600ms forwards 1000ms ease-out;\n}\n\n#works-body p,\n#works-body button,\n#works-body .img-label {\n  font-family: "Inter";\n}\n\n.w-col {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: column;\n          flex-direction: column;\n  padding: 1em 0;\n}\n\n.w-col .w-col-slider {\n  overflow: hidden;\n}\n\n.w-col .w-col-slider img {\n  max-width: 80vw;\n  max-height: 50vh;\n}\n\n.w-col .w-col-slider .swiper-wrapper:hover {\n  cursor: -webkit-grab;\n  cursor: grab;\n}\n\n.w-col .w-col-slider .swiper-wrapper:active {\n  cursor: -webkit-grabbing;\n  cursor: grabbing;\n}\n\n.w-col .w-col-slider .swiper-container {\n  width: 100%;\n  height: 100% !important;\n}\n\n.w-col .w-col-slider .swiper-slide {\n  text-align: center;\n  padding-bottom: 30px;\n  height: unset !important;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: column;\n          flex-direction: column;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n}\n\n.w-col .w-col-slider .swiper-slide > img {\n  border-radius: 20px 50px;\n  background: linear-gradient(145deg, #090909, #070707);\n  -webkit-box-shadow: 20px 20px 60px #070707, -20px -20px 60px #090909;\n          box-shadow: 20px 20px 60px #070707, -20px -20px 60px #090909;\n  max-width: 75vw;\n}\n\n.w-col .w-col-slider .swiper-slide .img-label {\n  padding-top: 1em;\n}\n\n.w-col .w-col-desc {\n  -webkit-box-flex: 1;\n      -ms-flex: 1;\n          flex: 1;\n  padding: 1em;\n  overflow: hidden;\n  text-align: center;\n}\n\n.w-col .w-col-desc .w-stack {\n  display: block;\n  padding: 0.3em 0;\n}\n\n.w-col .w-col-desc .w-p {\n  padding: 0.5em 0 1em 0;\n  line-height: 1.3em;\n  -webkit-transition: -webkit-transform 0.6s ease-in-out;\n  transition: -webkit-transform 0.6s ease-in-out;\n  transition: transform 0.6s ease-in-out;\n  transition: transform 0.6s ease-in-out, -webkit-transform 0.6s ease-in-out;\n  -webkit-transform: translateX(100%);\n          transform: translateX(100%);\n  height: 0;\n}\n\n.w-col .w-col-desc .w-p > p {\n  -webkit-transition: opacity 0.6s ease-out;\n  transition: opacity 0.6s ease-out;\n  opacity: 0;\n  padding: 0 0 1em 0;\n  line-height: 1.6em;\n}\n\n.w-col .w-col-desc .w-p > p > ol {\n  padding-top: 0.5em;\n  list-style-position: inside;\n  font-size: 0.9em;\n}\n\n.show-p {\n  -webkit-transform: translateX(0) !important;\n          transform: translateX(0) !important;\n  height: auto !important;\n}\n\n.show-p > p {\n  opacity: 1 !important;\n}\n\n.swiper-pagination-bullet {\n  background-color: #05828e !important;\n}\n\n.w-links {\n  text-align: center;\n  list-style: none;\n}\n\n.w-links li {\n  display: inline-block;\n  margin-right: 1em;\n}\n\n.w-links li:last-child {\n  margin-right: 0 !important;\n}\n\n.w-links .github {\n  content: url('+C+");\n  width: 30px;\n  height: 30px;\n}\n\n.w-links .open {\n  content: url("+k+');\n  width: 30px;\n  height: 30px;\n}\n\n@media (min-width: 768px) {\n  .w-col {\n    -webkit-box-orient: horizontal !important;\n    -webkit-box-direction: normal !important;\n        -ms-flex-direction: row !important;\n            flex-direction: row !important;\n  }\n  .w-col .w-col-slider {\n    width: 50% !important;\n  }\n  .w-col .w-col-desc {\n    text-align: left;\n  }\n  .w-col .w-links {\n    text-align: left !important;\n  }\n  .w-col .swiper-slide {\n    max-width: 50vw !important;\n  }\n  .w-col .swiper-slide > img {\n    max-width: 40vw !important;\n  }\n  .w-col:nth-of-type(even) .w-col-slider {\n    -webkit-box-ordinal-group: 3;\n        -ms-flex-order: 2;\n            order: 2;\n  }\n  .w-col:nth-of-type(even) .w-col-desc {\n    text-align: right;\n  }\n  .w-col:nth-of-type(even) .w-links {\n    text-align: right !important;\n  }\n  .w-p {\n    -webkit-transition: none !important;\n    transition: none !important;\n    -webkit-transform: scaleY(1) !important;\n            transform: scaleY(1) !important;\n    height: auto !important;\n  }\n  .w-p > p {\n    opacity: 1 !important;\n  }\n  .w-toggle {\n    display: none !important;\n  }\n}\n\n#about-body {\n  font-family: "Inter";\n}\n\n#about-body .container {\n  padding: 0 10%;\n}\n\n#about-body p,\n#about-body blockquote {\n  padding-bottom: 1em;\n}\n\n#about-body p {\n  line-height: 1.6em;\n}\n\n#about-body blockquote {\n  padding-left: 0.3em;\n  font-family: "Montserrat";\n  font-size: 2em;\n  font-style: italic;\n}\n\n#about-body blockquote:after {\n  content: "";\n  display: block;\n  width: 100%;\n  height: 1px;\n  background-color: white;\n  opacity: 0.4;\n  margin-top: 0.6em;\n}\n\n#about-body .swiper-container {\n  width: 100%;\n  height: 100% !important;\n}\n\n#about-body .swiper-container:hover {\n  cursor: -webkit-grab;\n  cursor: grab;\n}\n\n#about-body .swiper-container:active {\n  cursor: -webkit-grabbing;\n  cursor: grabbing;\n}\n\n#about-body .swiper-slide {\n  padding-bottom: 30px;\n  height: unset;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n}\n\n#about-body .swiper-slide img {\n  max-width: 80%;\n  max-height: 60vh;\n  border-radius: 20px 50px;\n}\n\n#about-body .contact-links {\n  position: fixed;\n  top: 70vh;\n  right: 0;\n  background-color: #044e55;\n  border-radius: 10px 0 0 10px;\n  padding: 10px;\n  text-align: center;\n}\n\n#about-body .contact-links strong {\n  display: none;\n}\n\n#about-body .contact-links ul {\n  list-style: none;\n  padding: 0.3em 0 0 0;\n}\n\n#about-body .contact-links li {\n  padding-bottom: 5px;\n}\n\n#about-body .contact-links li > a {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  -webkit-box-pack: start;\n      -ms-flex-pack: start;\n          justify-content: flex-start;\n}\n\n#about-body .contact-links .contact-label {\n  padding-left: 0.3em;\n  display: none;\n}\n\n#about-body .contact-links li:last-child {\n  padding-bottom: 0 !important;\n}\n\n#about-body .contact-links img {\n  width: 25px;\n  opacity: 1 !important;\n}\n\n@media (min-width: 768px) {\n  #about-body .contact-links strong,\n  #about-body .contact-links .contact-label {\n    display: inline;\n  }\n}\n\n@-webkit-keyframes fade-to-right {\n  from {\n    opacity: 0;\n    -webkit-transform: translateX(-2rem);\n            transform: translateX(-2rem);\n  }\n  to {\n    opacity: 1;\n    -webkit-transform: translateX(0);\n            transform: translateX(0);\n  }\n}\n\n@keyframes fade-to-right {\n  from {\n    opacity: 0;\n    -webkit-transform: translateX(-2rem);\n            transform: translateX(-2rem);\n  }\n  to {\n    opacity: 1;\n    -webkit-transform: translateX(0);\n            transform: translateX(0);\n  }\n}\n\n@-webkit-keyframes fade-to-left {\n  from {\n    opacity: 0;\n    -webkit-transform: translateX(2rem);\n            transform: translateX(2rem);\n  }\n  to {\n    opacity: 1;\n    -webkit-transform: translateX(0);\n            transform: translateX(0);\n  }\n}\n\n@keyframes fade-to-left {\n  from {\n    opacity: 0;\n    -webkit-transform: translateX(2rem);\n            transform: translateX(2rem);\n  }\n  to {\n    opacity: 1;\n    -webkit-transform: translateX(0);\n            transform: translateX(0);\n  }\n}\n\n@-webkit-keyframes fade-to-left-2 {\n  from {\n    opacity: 0;\n    -webkit-transform: translateX(2rem);\n            transform: translateX(2rem);\n  }\n  to {\n    opacity: 0.15;\n    -webkit-transform: translateX(0);\n            transform: translateX(0);\n  }\n}\n\n@keyframes fade-to-left-2 {\n  from {\n    opacity: 0;\n    -webkit-transform: translateX(2rem);\n            transform: translateX(2rem);\n  }\n  to {\n    opacity: 0.15;\n    -webkit-transform: translateX(0);\n            transform: translateX(0);\n  }\n}\n\n@-webkit-keyframes slide-up {\n  from {\n    opacity: 0;\n    -webkit-transform: translateY(100%);\n            transform: translateY(100%);\n  }\n  to {\n    opacity: 1;\n    -webkit-transform: translateY(0);\n            transform: translateY(0);\n  }\n}\n\n@keyframes slide-up {\n  from {\n    opacity: 0;\n    -webkit-transform: translateY(100%);\n            transform: translateY(100%);\n  }\n  to {\n    opacity: 1;\n    -webkit-transform: translateY(0);\n            transform: translateY(0);\n  }\n}\n\n@-webkit-keyframes slide-left {\n  from {\n    -webkit-transform: translateX(100%);\n            transform: translateX(100%);\n  }\n  to {\n    -webkit-transform: translateX(0);\n            transform: translateX(0);\n  }\n}\n\n@keyframes slide-left {\n  from {\n    -webkit-transform: translateX(100%);\n            transform: translateX(100%);\n  }\n  to {\n    -webkit-transform: translateX(0);\n            transform: translateX(0);\n  }\n}\n\n@-webkit-keyframes expand-full-width {\n  from {\n    width: 0%;\n  }\n  to {\n    width: 100%;\n  }\n}\n\n@keyframes expand-full-width {\n  from {\n    width: 0%;\n  }\n  to {\n    width: 100%;\n  }\n}',""]),e.exports=t},function(e,t,i){"use strict";e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},function(e,t,i){"use strict";i.r(t),t.default=i.p+"images/3531363a346961b31bde0e8f6e449a50.svg"},function(e,t,i){"use strict";i.r(t),t.default=i.p+"images/d56f6e180eaa6c18d042ce6cc27a0347.svg"},function(e,t,i){"use strict";i.r(t),t.default=i.p+"images/40812535999e56e3d7dc8341707b8c3a.svg"},function(e,t,i){"use strict";i.r(t),t.default=i.p+"images/21c384e5a7e66f2c422c9d0ddab65452.jpg"},function(e,t,i){"use strict";i.r(t),t.default=i.p+"images/0b96559ec35c7e5a6bc18d37d82d3373.jpg"},function(e,t,i){"use strict";i.r(t),t.default=i.p+"images/d5ba2a150661eb54542282ab7d7a9ef6.png"},function(e,t,i){"use strict";i.r(t),t.default=i.p+"images/575986ca592433d730cd248de1a8733e.svg"},function(e,t,i){"use strict";i.r(t),t.default=i.p+"images/64fef803f0610171ae490cae2bc61d2c.svg"},function(e,t,i){var n=i(3),s=i(17);"string"==typeof(s=s.__esModule?s.default:s)&&(s=[[e.i,s,""]]);var a={insert:"head",singleton:!1};n(s,a);e.exports=s.locals||{}},function(e,t,i){(t=i(4)(!1)).push([e.i,"/**\n * Swiper 5.4.3\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * http://swiperjs.com\n *\n * Copyright 2014-2020 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: June 13, 2020\n */\n\n@font-face{font-family:swiper-icons;src:url(\"data:application/font-woff;charset=utf-8;base64, d09GRgABAAAAAAZgABAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAGRAAAABoAAAAci6qHkUdERUYAAAWgAAAAIwAAACQAYABXR1BPUwAABhQAAAAuAAAANuAY7+xHU1VCAAAFxAAAAFAAAABm2fPczU9TLzIAAAHcAAAASgAAAGBP9V5RY21hcAAAAkQAAACIAAABYt6F0cBjdnQgAAACzAAAAAQAAAAEABEBRGdhc3AAAAWYAAAACAAAAAj//wADZ2x5ZgAAAywAAADMAAAD2MHtryVoZWFkAAABbAAAADAAAAA2E2+eoWhoZWEAAAGcAAAAHwAAACQC9gDzaG10eAAAAigAAAAZAAAArgJkABFsb2NhAAAC0AAAAFoAAABaFQAUGG1heHAAAAG8AAAAHwAAACAAcABAbmFtZQAAA/gAAAE5AAACXvFdBwlwb3N0AAAFNAAAAGIAAACE5s74hXjaY2BkYGAAYpf5Hu/j+W2+MnAzMYDAzaX6QjD6/4//Bxj5GA8AuRwMYGkAPywL13jaY2BkYGA88P8Agx4j+/8fQDYfA1AEBWgDAIB2BOoAeNpjYGRgYNBh4GdgYgABEMnIABJzYNADCQAACWgAsQB42mNgYfzCOIGBlYGB0YcxjYGBwR1Kf2WQZGhhYGBiYGVmgAFGBiQQkOaawtDAoMBQxXjg/wEGPcYDDA4wNUA2CCgwsAAAO4EL6gAAeNpj2M0gyAACqxgGNWBkZ2D4/wMA+xkDdgAAAHjaY2BgYGaAYBkGRgYQiAHyGMF8FgYHIM3DwMHABGQrMOgyWDLEM1T9/w8UBfEMgLzE////P/5//f/V/xv+r4eaAAeMbAxwIUYmIMHEgKYAYjUcsDAwsLKxc3BycfPw8jEQA/gZBASFhEVExcQlJKWkZWTl5BUUlZRVVNXUNTQZBgMAAMR+E+gAEQFEAAAAKgAqACoANAA+AEgAUgBcAGYAcAB6AIQAjgCYAKIArAC2AMAAygDUAN4A6ADyAPwBBgEQARoBJAEuATgBQgFMAVYBYAFqAXQBfgGIAZIBnAGmAbIBzgHsAAB42u2NMQ6CUAyGW568x9AneYYgm4MJbhKFaExIOAVX8ApewSt4Bic4AfeAid3VOBixDxfPYEza5O+Xfi04YADggiUIULCuEJK8VhO4bSvpdnktHI5QCYtdi2sl8ZnXaHlqUrNKzdKcT8cjlq+rwZSvIVczNiezsfnP/uznmfPFBNODM2K7MTQ45YEAZqGP81AmGGcF3iPqOop0r1SPTaTbVkfUe4HXj97wYE+yNwWYxwWu4v1ugWHgo3S1XdZEVqWM7ET0cfnLGxWfkgR42o2PvWrDMBSFj/IHLaF0zKjRgdiVMwScNRAoWUoH78Y2icB/yIY09An6AH2Bdu/UB+yxopYshQiEvnvu0dURgDt8QeC8PDw7Fpji3fEA4z/PEJ6YOB5hKh4dj3EvXhxPqH/SKUY3rJ7srZ4FZnh1PMAtPhwP6fl2PMJMPDgeQ4rY8YT6Gzao0eAEA409DuggmTnFnOcSCiEiLMgxCiTI6Cq5DZUd3Qmp10vO0LaLTd2cjN4fOumlc7lUYbSQcZFkutRG7g6JKZKy0RmdLY680CDnEJ+UMkpFFe1RN7nxdVpXrC4aTtnaurOnYercZg2YVmLN/d/gczfEimrE/fs/bOuq29Zmn8tloORaXgZgGa78yO9/cnXm2BpaGvq25Dv9S4E9+5SIc9PqupJKhYFSSl47+Qcr1mYNAAAAeNptw0cKwkAAAMDZJA8Q7OUJvkLsPfZ6zFVERPy8qHh2YER+3i/BP83vIBLLySsoKimrqKqpa2hp6+jq6RsYGhmbmJqZSy0sraxtbO3sHRydnEMU4uR6yx7JJXveP7WrDycAAAAAAAH//wACeNpjYGRgYOABYhkgZgJCZgZNBkYGLQZtIJsFLMYAAAw3ALgAeNolizEKgDAQBCchRbC2sFER0YD6qVQiBCv/H9ezGI6Z5XBAw8CBK/m5iQQVauVbXLnOrMZv2oLdKFa8Pjuru2hJzGabmOSLzNMzvutpB3N42mNgZGBg4GKQYzBhYMxJLMlj4GBgAYow/P/PAJJhLM6sSoWKfWCAAwDAjgbRAAB42mNgYGBkAIIbCZo5IPrmUn0hGA0AO8EFTQAA\") format(\"woff\");font-weight:400;font-style:normal}:root{--swiper-theme-color:#007aff}.swiper-container{margin-left:auto;margin-right:auto;position:relative;overflow:hidden;list-style:none;padding:0;z-index:1}.swiper-container-vertical>.swiper-wrapper{flex-direction:column}.swiper-wrapper{position:relative;width:100%;height:100%;z-index:1;display:flex;transition-property:transform;box-sizing:content-box}.swiper-container-android .swiper-slide,.swiper-wrapper{transform:translate3d(0px,0,0)}.swiper-container-multirow>.swiper-wrapper{flex-wrap:wrap}.swiper-container-multirow-column>.swiper-wrapper{flex-wrap:wrap;flex-direction:column}.swiper-container-free-mode>.swiper-wrapper{transition-timing-function:ease-out;margin:0 auto}.swiper-slide{flex-shrink:0;width:100%;height:100%;position:relative;transition-property:transform}.swiper-slide-invisible-blank{visibility:hidden}.swiper-container-autoheight,.swiper-container-autoheight .swiper-slide{height:auto}.swiper-container-autoheight .swiper-wrapper{align-items:flex-start;transition-property:transform,height}.swiper-container-3d{perspective:1200px}.swiper-container-3d .swiper-cube-shadow,.swiper-container-3d .swiper-slide,.swiper-container-3d .swiper-slide-shadow-bottom,.swiper-container-3d .swiper-slide-shadow-left,.swiper-container-3d .swiper-slide-shadow-right,.swiper-container-3d .swiper-slide-shadow-top,.swiper-container-3d .swiper-wrapper{transform-style:preserve-3d}.swiper-container-3d .swiper-slide-shadow-bottom,.swiper-container-3d .swiper-slide-shadow-left,.swiper-container-3d .swiper-slide-shadow-right,.swiper-container-3d .swiper-slide-shadow-top{position:absolute;left:0;top:0;width:100%;height:100%;pointer-events:none;z-index:10}.swiper-container-3d .swiper-slide-shadow-left{background-image:linear-gradient(to left,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-3d .swiper-slide-shadow-right{background-image:linear-gradient(to right,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-3d .swiper-slide-shadow-top{background-image:linear-gradient(to top,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-3d .swiper-slide-shadow-bottom{background-image:linear-gradient(to bottom,rgba(0,0,0,.5),rgba(0,0,0,0))}.swiper-container-css-mode>.swiper-wrapper{overflow:auto;scrollbar-width:none;-ms-overflow-style:none}.swiper-container-css-mode>.swiper-wrapper::-webkit-scrollbar{display:none}.swiper-container-css-mode>.swiper-wrapper>.swiper-slide{scroll-snap-align:start start}.swiper-container-horizontal.swiper-container-css-mode>.swiper-wrapper{scroll-snap-type:x mandatory}.swiper-container-vertical.swiper-container-css-mode>.swiper-wrapper{scroll-snap-type:y mandatory}:root{--swiper-navigation-size:44px}.swiper-button-next,.swiper-button-prev{position:absolute;top:50%;width:calc(var(--swiper-navigation-size)/ 44 * 27);height:var(--swiper-navigation-size);margin-top:calc(-1 * var(--swiper-navigation-size)/ 2);z-index:10;cursor:pointer;display:flex;align-items:center;justify-content:center;color:var(--swiper-navigation-color,var(--swiper-theme-color))}.swiper-button-next.swiper-button-disabled,.swiper-button-prev.swiper-button-disabled{opacity:.35;cursor:auto;pointer-events:none}.swiper-button-next:after,.swiper-button-prev:after{font-family:swiper-icons;font-size:var(--swiper-navigation-size);text-transform:none!important;letter-spacing:0;text-transform:none;font-variant:initial;line-height:1}.swiper-button-prev,.swiper-container-rtl .swiper-button-next{left:10px;right:auto}.swiper-button-prev:after,.swiper-container-rtl .swiper-button-next:after{content:'prev'}.swiper-button-next,.swiper-container-rtl .swiper-button-prev{right:10px;left:auto}.swiper-button-next:after,.swiper-container-rtl .swiper-button-prev:after{content:'next'}.swiper-button-next.swiper-button-white,.swiper-button-prev.swiper-button-white{--swiper-navigation-color:#ffffff}.swiper-button-next.swiper-button-black,.swiper-button-prev.swiper-button-black{--swiper-navigation-color:#000000}.swiper-button-lock{display:none}.swiper-pagination{position:absolute;text-align:center;transition:.3s opacity;transform:translate3d(0,0,0);z-index:10}.swiper-pagination.swiper-pagination-hidden{opacity:0}.swiper-container-horizontal>.swiper-pagination-bullets,.swiper-pagination-custom,.swiper-pagination-fraction{bottom:10px;left:0;width:100%}.swiper-pagination-bullets-dynamic{overflow:hidden;font-size:0}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transform:scale(.33);position:relative}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active{transform:scale(1)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-main{transform:scale(1)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev{transform:scale(.66)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev-prev{transform:scale(.33)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next{transform:scale(.66)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next-next{transform:scale(.33)}.swiper-pagination-bullet{width:8px;height:8px;display:inline-block;border-radius:100%;background:#000;opacity:.2}button.swiper-pagination-bullet{border:none;margin:0;padding:0;box-shadow:none;-webkit-appearance:none;-moz-appearance:none;appearance:none}.swiper-pagination-clickable .swiper-pagination-bullet{cursor:pointer}.swiper-pagination-bullet-active{opacity:1;background:var(--swiper-pagination-color,var(--swiper-theme-color))}.swiper-container-vertical>.swiper-pagination-bullets{right:10px;top:50%;transform:translate3d(0px,-50%,0)}.swiper-container-vertical>.swiper-pagination-bullets .swiper-pagination-bullet{margin:6px 0;display:block}.swiper-container-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic{top:50%;transform:translateY(-50%);width:8px}.swiper-container-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{display:inline-block;transition:.2s transform,.2s top}.swiper-container-horizontal>.swiper-pagination-bullets .swiper-pagination-bullet{margin:0 4px}.swiper-container-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic{left:50%;transform:translateX(-50%);white-space:nowrap}.swiper-container-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transition:.2s transform,.2s left}.swiper-container-horizontal.swiper-container-rtl>.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transition:.2s transform,.2s right}.swiper-pagination-progressbar{background:rgba(0,0,0,.25);position:absolute}.swiper-pagination-progressbar .swiper-pagination-progressbar-fill{background:var(--swiper-pagination-color,var(--swiper-theme-color));position:absolute;left:0;top:0;width:100%;height:100%;transform:scale(0);transform-origin:left top}.swiper-container-rtl .swiper-pagination-progressbar .swiper-pagination-progressbar-fill{transform-origin:right top}.swiper-container-horizontal>.swiper-pagination-progressbar,.swiper-container-vertical>.swiper-pagination-progressbar.swiper-pagination-progressbar-opposite{width:100%;height:4px;left:0;top:0}.swiper-container-horizontal>.swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,.swiper-container-vertical>.swiper-pagination-progressbar{width:4px;height:100%;left:0;top:0}.swiper-pagination-white{--swiper-pagination-color:#ffffff}.swiper-pagination-black{--swiper-pagination-color:#000000}.swiper-pagination-lock{display:none}.swiper-scrollbar{border-radius:10px;position:relative;-ms-touch-action:none;background:rgba(0,0,0,.1)}.swiper-container-horizontal>.swiper-scrollbar{position:absolute;left:1%;bottom:3px;z-index:50;height:5px;width:98%}.swiper-container-vertical>.swiper-scrollbar{position:absolute;right:3px;top:1%;z-index:50;width:5px;height:98%}.swiper-scrollbar-drag{height:100%;width:100%;position:relative;background:rgba(0,0,0,.5);border-radius:10px;left:0;top:0}.swiper-scrollbar-cursor-drag{cursor:move}.swiper-scrollbar-lock{display:none}.swiper-zoom-container{width:100%;height:100%;display:flex;justify-content:center;align-items:center;text-align:center}.swiper-zoom-container>canvas,.swiper-zoom-container>img,.swiper-zoom-container>svg{max-width:100%;max-height:100%;object-fit:contain}.swiper-slide-zoomed{cursor:move}.swiper-lazy-preloader{width:42px;height:42px;position:absolute;left:50%;top:50%;margin-left:-21px;margin-top:-21px;z-index:10;transform-origin:50%;animation:swiper-preloader-spin 1s infinite linear;box-sizing:border-box;border:4px solid var(--swiper-preloader-color,var(--swiper-theme-color));border-radius:50%;border-top-color:transparent}.swiper-lazy-preloader-white{--swiper-preloader-color:#fff}.swiper-lazy-preloader-black{--swiper-preloader-color:#000}@keyframes swiper-preloader-spin{100%{transform:rotate(360deg)}}.swiper-container .swiper-notification{position:absolute;left:0;top:0;pointer-events:none;opacity:0;z-index:-1000}.swiper-container-fade.swiper-container-free-mode .swiper-slide{transition-timing-function:ease-out}.swiper-container-fade .swiper-slide{pointer-events:none;transition-property:opacity}.swiper-container-fade .swiper-slide .swiper-slide{pointer-events:none}.swiper-container-fade .swiper-slide-active,.swiper-container-fade .swiper-slide-active .swiper-slide-active{pointer-events:auto}.swiper-container-cube{overflow:visible}.swiper-container-cube .swiper-slide{pointer-events:none;-webkit-backface-visibility:hidden;backface-visibility:hidden;z-index:1;visibility:hidden;transform-origin:0 0;width:100%;height:100%}.swiper-container-cube .swiper-slide .swiper-slide{pointer-events:none}.swiper-container-cube.swiper-container-rtl .swiper-slide{transform-origin:100% 0}.swiper-container-cube .swiper-slide-active,.swiper-container-cube .swiper-slide-active .swiper-slide-active{pointer-events:auto}.swiper-container-cube .swiper-slide-active,.swiper-container-cube .swiper-slide-next,.swiper-container-cube .swiper-slide-next+.swiper-slide,.swiper-container-cube .swiper-slide-prev{pointer-events:auto;visibility:visible}.swiper-container-cube .swiper-slide-shadow-bottom,.swiper-container-cube .swiper-slide-shadow-left,.swiper-container-cube .swiper-slide-shadow-right,.swiper-container-cube .swiper-slide-shadow-top{z-index:0;-webkit-backface-visibility:hidden;backface-visibility:hidden}.swiper-container-cube .swiper-cube-shadow{position:absolute;left:0;bottom:0px;width:100%;height:100%;background:#000;opacity:.6;-webkit-filter:blur(50px);filter:blur(50px);z-index:0}.swiper-container-flip{overflow:visible}.swiper-container-flip .swiper-slide{pointer-events:none;-webkit-backface-visibility:hidden;backface-visibility:hidden;z-index:1}.swiper-container-flip .swiper-slide .swiper-slide{pointer-events:none}.swiper-container-flip .swiper-slide-active,.swiper-container-flip .swiper-slide-active .swiper-slide-active{pointer-events:auto}.swiper-container-flip .swiper-slide-shadow-bottom,.swiper-container-flip .swiper-slide-shadow-left,.swiper-container-flip .swiper-slide-shadow-right,.swiper-container-flip .swiper-slide-shadow-top{z-index:0;-webkit-backface-visibility:hidden;backface-visibility:hidden}",""]),e.exports=t},function(e,t,i){"use strict";function n(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function s(e,t){void 0===e&&(e={}),void 0===t&&(t={}),Object.keys(t).forEach((function(i){void 0===e[i]?e[i]=t[i]:n(t[i])&&n(e[i])&&Object.keys(t[i]).length>0&&s(e[i],t[i])}))}i.r(t);var a="undefined"!=typeof document?document:{},r={body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},createElementNS:function(){return{}},importNode:function(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};s(a,r);var o="undefined"!=typeof window?window:{};s(o,{document:r,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState:function(){},pushState:function(){},go:function(){},back:function(){}},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){},matchMedia:function(){return{}}});class l{constructor(e){const t=this;for(let i=0;i<e.length;i+=1)t[i]=e[i];return t.length=e.length,this}}function d(e,t){const i=[];let n=0;if(e&&!t&&e instanceof l)return e;if(e)if("string"==typeof e){let s,r;const o=e.trim();if(o.indexOf("<")>=0&&o.indexOf(">")>=0){let e="div";for(0===o.indexOf("<li")&&(e="ul"),0===o.indexOf("<tr")&&(e="tbody"),0!==o.indexOf("<td")&&0!==o.indexOf("<th")||(e="tr"),0===o.indexOf("<tbody")&&(e="table"),0===o.indexOf("<option")&&(e="select"),r=a.createElement(e),r.innerHTML=o,n=0;n<r.childNodes.length;n+=1)i.push(r.childNodes[n])}else for(s=t||"#"!==e[0]||e.match(/[ .<>:~]/)?(t||a).querySelectorAll(e.trim()):[a.getElementById(e.trim().split("#")[1])],n=0;n<s.length;n+=1)s[n]&&i.push(s[n])}else if(e.nodeType||e===o||e===a)i.push(e);else if(e.length>0&&e[0].nodeType)for(n=0;n<e.length;n+=1)i.push(e[n]);return new l(i)}function p(e){const t=[];for(let i=0;i<e.length;i+=1)-1===t.indexOf(e[i])&&t.push(e[i]);return t}d.fn=l.prototype,d.Class=l,d.Dom7=l;"resize scroll".split(" ");const c={addClass:function(e){if(void 0===e)return this;const t=e.split(" ");for(let e=0;e<t.length;e+=1)for(let i=0;i<this.length;i+=1)void 0!==this[i]&&void 0!==this[i].classList&&this[i].classList.add(t[e]);return this},removeClass:function(e){const t=e.split(" ");for(let e=0;e<t.length;e+=1)for(let i=0;i<this.length;i+=1)void 0!==this[i]&&void 0!==this[i].classList&&this[i].classList.remove(t[e]);return this},hasClass:function(e){return!!this[0]&&this[0].classList.contains(e)},toggleClass:function(e){const t=e.split(" ");for(let e=0;e<t.length;e+=1)for(let i=0;i<this.length;i+=1)void 0!==this[i]&&void 0!==this[i].classList&&this[i].classList.toggle(t[e]);return this},attr:function(e,t){if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(let i=0;i<this.length;i+=1)if(2===arguments.length)this[i].setAttribute(e,t);else for(const t in e)this[i][t]=e[t],this[i].setAttribute(t,e[t]);return this},removeAttr:function(e){for(let t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},data:function(e,t){let i;if(void 0!==t){for(let n=0;n<this.length;n+=1)i=this[n],i.dom7ElementDataStorage||(i.dom7ElementDataStorage={}),i.dom7ElementDataStorage[e]=t;return this}if(i=this[0],i){if(i.dom7ElementDataStorage&&e in i.dom7ElementDataStorage)return i.dom7ElementDataStorage[e];const t=i.getAttribute("data-"+e);return t||void 0}},transform:function(e){for(let t=0;t<this.length;t+=1){const i=this[t].style;i.webkitTransform=e,i.transform=e}return this},transition:function(e){"string"!=typeof e&&(e+="ms");for(let t=0;t<this.length;t+=1){const i=this[t].style;i.webkitTransitionDuration=e,i.transitionDuration=e}return this},on:function(...e){let[t,i,n,s]=e;function a(e){const t=e.target;if(!t)return;const s=e.target.dom7EventData||[];if(s.indexOf(e)<0&&s.unshift(e),d(t).is(i))n.apply(t,s);else{const e=d(t).parents();for(let t=0;t<e.length;t+=1)d(e[t]).is(i)&&n.apply(e[t],s)}}function r(e){const t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),n.apply(this,t)}"function"==typeof e[1]&&([t,n,s]=e,i=void 0),s||(s=!1);const o=t.split(" ");let l;for(let e=0;e<this.length;e+=1){const t=this[e];if(i)for(l=0;l<o.length;l+=1){const e=o[l];t.dom7LiveListeners||(t.dom7LiveListeners={}),t.dom7LiveListeners[e]||(t.dom7LiveListeners[e]=[]),t.dom7LiveListeners[e].push({listener:n,proxyListener:a}),t.addEventListener(e,a,s)}else for(l=0;l<o.length;l+=1){const e=o[l];t.dom7Listeners||(t.dom7Listeners={}),t.dom7Listeners[e]||(t.dom7Listeners[e]=[]),t.dom7Listeners[e].push({listener:n,proxyListener:r}),t.addEventListener(e,r,s)}}return this},off:function(...e){let[t,i,n,s]=e;"function"==typeof e[1]&&([t,n,s]=e,i=void 0),s||(s=!1);const a=t.split(" ");for(let e=0;e<a.length;e+=1){const t=a[e];for(let e=0;e<this.length;e+=1){const a=this[e];let r;if(!i&&a.dom7Listeners?r=a.dom7Listeners[t]:i&&a.dom7LiveListeners&&(r=a.dom7LiveListeners[t]),r&&r.length)for(let e=r.length-1;e>=0;e-=1){const i=r[e];n&&i.listener===n||n&&i.listener&&i.listener.dom7proxy&&i.listener.dom7proxy===n?(a.removeEventListener(t,i.proxyListener,s),r.splice(e,1)):n||(a.removeEventListener(t,i.proxyListener,s),r.splice(e,1))}}}return this},trigger:function(...e){const t=e[0].split(" "),i=e[1];for(let n=0;n<t.length;n+=1){const s=t[n];for(let t=0;t<this.length;t+=1){const n=this[t];let r;try{r=new o.CustomEvent(s,{detail:i,bubbles:!0,cancelable:!0})}catch(e){r=a.createEvent("Event"),r.initEvent(s,!0,!0),r.detail=i}n.dom7EventData=e.filter((e,t)=>t>0),n.dispatchEvent(r),n.dom7EventData=[],delete n.dom7EventData}}return this},transitionEnd:function(e){const t=["webkitTransitionEnd","transitionend"],i=this;let n;function s(a){if(a.target===this)for(e.call(this,a),n=0;n<t.length;n+=1)i.off(t[n],s)}if(e)for(n=0;n<t.length;n+=1)i.on(t[n],s);return this},outerWidth:function(e){if(this.length>0){if(e){const e=this.styles();return this[0].offsetWidth+parseFloat(e.getPropertyValue("margin-right"))+parseFloat(e.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(this.length>0){if(e){const e=this.styles();return this[0].offsetHeight+parseFloat(e.getPropertyValue("margin-top"))+parseFloat(e.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},offset:function(){if(this.length>0){const e=this[0],t=e.getBoundingClientRect(),i=a.body,n=e.clientTop||i.clientTop||0,s=e.clientLeft||i.clientLeft||0,r=e===o?o.scrollY:e.scrollTop,l=e===o?o.scrollX:e.scrollLeft;return{top:t.top+r-n,left:t.left+l-s}}return null},css:function(e,t){let i;if(1===arguments.length){if("string"!=typeof e){for(i=0;i<this.length;i+=1)for(let t in e)this[i].style[t]=e[t];return this}if(this[0])return o.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e){for(i=0;i<this.length;i+=1)this[i].style[e]=t;return this}return this},each:function(e){if(!e)return this;for(let t=0;t<this.length;t+=1)if(!1===e.call(this[t],t,this[t]))return this;return this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:void 0;for(let t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(let t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){const t=this[0];let i,n;if(!t||void 0===e)return!1;if("string"==typeof e){if(t.matches)return t.matches(e);if(t.webkitMatchesSelector)return t.webkitMatchesSelector(e);if(t.msMatchesSelector)return t.msMatchesSelector(e);for(i=d(e),n=0;n<i.length;n+=1)if(i[n]===t)return!0;return!1}if(e===a)return t===a;if(e===o)return t===o;if(e.nodeType||e instanceof l){for(i=e.nodeType?[e]:e,n=0;n<i.length;n+=1)if(i[n]===t)return!0;return!1}return!1},index:function(){let e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;const t=this.length;let i;return e>t-1?new l([]):e<0?(i=t+e,new l(i<0?[]:[this[i]])):new l([this[e]])},append:function(...e){let t;for(let i=0;i<e.length;i+=1){t=e[i];for(let e=0;e<this.length;e+=1)if("string"==typeof t){const i=a.createElement("div");for(i.innerHTML=t;i.firstChild;)this[e].appendChild(i.firstChild)}else if(t instanceof l)for(let i=0;i<t.length;i+=1)this[e].appendChild(t[i]);else this[e].appendChild(t)}return this},prepend:function(e){let t,i;for(t=0;t<this.length;t+=1)if("string"==typeof e){const n=a.createElement("div");for(n.innerHTML=e,i=n.childNodes.length-1;i>=0;i-=1)this[t].insertBefore(n.childNodes[i],this[t].childNodes[0])}else if(e instanceof l)for(i=0;i<e.length;i+=1)this[t].insertBefore(e[i],this[t].childNodes[0]);else this[t].insertBefore(e,this[t].childNodes[0]);return this},next:function(e){return this.length>0?e?this[0].nextElementSibling&&d(this[0].nextElementSibling).is(e)?new l([this[0].nextElementSibling]):new l([]):this[0].nextElementSibling?new l([this[0].nextElementSibling]):new l([]):new l([])},nextAll:function(e){const t=[];let i=this[0];if(!i)return new l([]);for(;i.nextElementSibling;){const n=i.nextElementSibling;e?d(n).is(e)&&t.push(n):t.push(n),i=n}return new l(t)},prev:function(e){if(this.length>0){const t=this[0];return e?t.previousElementSibling&&d(t.previousElementSibling).is(e)?new l([t.previousElementSibling]):new l([]):t.previousElementSibling?new l([t.previousElementSibling]):new l([])}return new l([])},prevAll:function(e){const t=[];let i=this[0];if(!i)return new l([]);for(;i.previousElementSibling;){const n=i.previousElementSibling;e?d(n).is(e)&&t.push(n):t.push(n),i=n}return new l(t)},parent:function(e){const t=[];for(let i=0;i<this.length;i+=1)null!==this[i].parentNode&&(e?d(this[i].parentNode).is(e)&&t.push(this[i].parentNode):t.push(this[i].parentNode));return d(p(t))},parents:function(e){const t=[];for(let i=0;i<this.length;i+=1){let n=this[i].parentNode;for(;n;)e?d(n).is(e)&&t.push(n):t.push(n),n=n.parentNode}return d(p(t))},closest:function(e){let t=this;return void 0===e?new l([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){const t=[];for(let i=0;i<this.length;i+=1){const n=this[i].querySelectorAll(e);for(let e=0;e<n.length;e+=1)t.push(n[e])}return new l(t)},children:function(e){const t=[];for(let i=0;i<this.length;i+=1){const n=this[i].childNodes;for(let i=0;i<n.length;i+=1)e?1===n[i].nodeType&&d(n[i]).is(e)&&t.push(n[i]):1===n[i].nodeType&&t.push(n[i])}return new l(p(t))},filter:function(e){const t=[],i=this;for(let n=0;n<i.length;n+=1)e.call(i[n],n,i[n])&&t.push(i[n]);return new l(t)},remove:function(){for(let e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this},add:function(...e){const t=this;let i,n;for(i=0;i<e.length;i+=1){const s=d(e[i]);for(n=0;n<s.length;n+=1)t[t.length]=s[n],t.length+=1}return t},styles:function(){return this[0]?o.getComputedStyle(this[0],null):{}}};Object.keys(c).forEach(e=>{d.fn[e]=d.fn[e]||c[e]});const u={deleteProps(e){const t=e;Object.keys(t).forEach(e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}})},nextTick:(e,t=0)=>setTimeout(e,t),now:()=>Date.now(),getTranslate(e,t="x"){let i,n,s;const a=o.getComputedStyle(e,null);return o.WebKitCSSMatrix?(n=a.transform||a.webkitTransform,n.split(",").length>6&&(n=n.split(", ").map(e=>e.replace(",",".")).join(", ")),s=new o.WebKitCSSMatrix("none"===n?"":n)):(s=a.MozTransform||a.OTransform||a.MsTransform||a.msTransform||a.transform||a.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),i=s.toString().split(",")),"x"===t&&(n=o.WebKitCSSMatrix?s.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(n=o.WebKitCSSMatrix?s.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),n||0},parseUrlQuery(e){const t={};let i,n,s,a,r=e||o.location.href;if("string"==typeof r&&r.length)for(r=r.indexOf("?")>-1?r.replace(/\S*\?/,""):"",n=r.split("&").filter(e=>""!==e),a=n.length,i=0;i<a;i+=1)s=n[i].replace(/#\S+/g,"").split("="),t[decodeURIComponent(s[0])]=void 0===s[1]?void 0:decodeURIComponent(s[1])||"";return t},isObject:e=>"object"==typeof e&&null!==e&&e.constructor&&e.constructor===Object,extend(...e){const t=Object(e[0]);for(let i=1;i<e.length;i+=1){const n=e[i];if(null!=n){const e=Object.keys(Object(n));for(let i=0,s=e.length;i<s;i+=1){const s=e[i],a=Object.getOwnPropertyDescriptor(n,s);void 0!==a&&a.enumerable&&(u.isObject(t[s])&&u.isObject(n[s])?u.extend(t[s],n[s]):!u.isObject(t[s])&&u.isObject(n[s])?(t[s]={},u.extend(t[s],n[s])):t[s]=n[s])}}}return t}},h={touch:!!("ontouchstart"in o||o.DocumentTouch&&a instanceof o.DocumentTouch),pointerEvents:!!o.PointerEvent&&"maxTouchPoints"in o.navigator&&o.navigator.maxTouchPoints>=0,observer:"MutationObserver"in o||"WebkitMutationObserver"in o,passiveListener:function(){let e=!1;try{const t=Object.defineProperty({},"passive",{get(){e=!0}});o.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:"ongesturestart"in o};class m{constructor(e={}){const t=this;t.params=e,t.eventsListeners={},t.params&&t.params.on&&Object.keys(t.params.on).forEach(e=>{t.on(e,t.params.on[e])})}on(e,t,i){const n=this;if("function"!=typeof t)return n;const s=i?"unshift":"push";return e.split(" ").forEach(e=>{n.eventsListeners[e]||(n.eventsListeners[e]=[]),n.eventsListeners[e][s](t)}),n}once(e,t,i){const n=this;if("function"!=typeof t)return n;function s(...i){n.off(e,s),s.f7proxy&&delete s.f7proxy,t.apply(n,i)}return s.f7proxy=t,n.on(e,s,i)}off(e,t){const i=this;return i.eventsListeners?(e.split(" ").forEach(e=>{void 0===t?i.eventsListeners[e]=[]:i.eventsListeners[e]&&i.eventsListeners[e].length&&i.eventsListeners[e].forEach((n,s)=>{(n===t||n.f7proxy&&n.f7proxy===t)&&i.eventsListeners[e].splice(s,1)})}),i):i}emit(...e){const t=this;if(!t.eventsListeners)return t;let i,n,s;"string"==typeof e[0]||Array.isArray(e[0])?(i=e[0],n=e.slice(1,e.length),s=t):(i=e[0].events,n=e[0].data,s=e[0].context||t);return(Array.isArray(i)?i:i.split(" ")).forEach(e=>{if(t.eventsListeners&&t.eventsListeners[e]){const i=[];t.eventsListeners[e].forEach(e=>{i.push(e)}),i.forEach(e=>{e.apply(s,n)})}}),t}useModulesParams(e){const t=this;t.modules&&Object.keys(t.modules).forEach(i=>{const n=t.modules[i];n.params&&u.extend(e,n.params)})}useModules(e={}){const t=this;t.modules&&Object.keys(t.modules).forEach(i=>{const n=t.modules[i],s=e[i]||{};n.instance&&Object.keys(n.instance).forEach(e=>{const i=n.instance[e];t[e]="function"==typeof i?i.bind(t):i}),n.on&&t.on&&Object.keys(n.on).forEach(e=>{t.on(e,n.on[e])}),n.create&&n.create.bind(t)(s)})}static set components(e){this.use&&this.use(e)}static installModule(e,...t){const i=this;i.prototype.modules||(i.prototype.modules={});const n=e.name||`${Object.keys(i.prototype.modules).length}_${u.now()}`;return i.prototype.modules[n]=e,e.proto&&Object.keys(e.proto).forEach(t=>{i.prototype[t]=e.proto[t]}),e.static&&Object.keys(e.static).forEach(t=>{i[t]=e.static[t]}),e.install&&e.install.apply(i,t),i}static use(e,...t){const i=this;return Array.isArray(e)?(e.forEach(e=>i.installModule(e)),i):i.installModule(e,...t)}}var f={updateSize:function(){const e=this;let t,i;const n=e.$el;t=void 0!==e.params.width?e.params.width:n[0].clientWidth,i=void 0!==e.params.height?e.params.height:n[0].clientHeight,0===t&&e.isHorizontal()||0===i&&e.isVertical()||(t=t-parseInt(n.css("padding-left"),10)-parseInt(n.css("padding-right"),10),i=i-parseInt(n.css("padding-top"),10)-parseInt(n.css("padding-bottom"),10),u.extend(e,{width:t,height:i,size:e.isHorizontal()?t:i}))},updateSlides:function(){const e=this,t=e.params,{$wrapperEl:i,size:n,rtlTranslate:s,wrongRTL:a}=e,r=e.virtual&&t.virtual.enabled,l=r?e.virtual.slides.length:e.slides.length,d=i.children("."+e.params.slideClass),p=r?e.virtual.slides.length:d.length;let c=[];const h=[],m=[];function f(e){return!t.cssMode||e!==d.length-1}let g=t.slidesOffsetBefore;"function"==typeof g&&(g=t.slidesOffsetBefore.call(e));let b=t.slidesOffsetAfter;"function"==typeof b&&(b=t.slidesOffsetAfter.call(e));const w=e.snapGrid.length,v=e.snapGrid.length;let x,y,E=t.spaceBetween,T=-g,S=0,C=0;if(void 0===n)return;"string"==typeof E&&E.indexOf("%")>=0&&(E=parseFloat(E.replace("%",""))/100*n),e.virtualSize=-E,s?d.css({marginLeft:"",marginTop:""}):d.css({marginRight:"",marginBottom:""}),t.slidesPerColumn>1&&(x=Math.floor(p/t.slidesPerColumn)===p/e.params.slidesPerColumn?p:Math.ceil(p/t.slidesPerColumn)*t.slidesPerColumn,"auto"!==t.slidesPerView&&"row"===t.slidesPerColumnFill&&(x=Math.max(x,t.slidesPerView*t.slidesPerColumn)));const k=t.slidesPerColumn,A=x/k,M=Math.floor(p/t.slidesPerColumn);for(let i=0;i<p;i+=1){y=0;const s=d.eq(i);if(t.slidesPerColumn>1){let n,a,r;if("row"===t.slidesPerColumnFill&&t.slidesPerGroup>1){const e=Math.floor(i/(t.slidesPerGroup*t.slidesPerColumn)),o=i-t.slidesPerColumn*t.slidesPerGroup*e,l=0===e?t.slidesPerGroup:Math.min(Math.ceil((p-e*k*t.slidesPerGroup)/k),t.slidesPerGroup);r=Math.floor(o/l),a=o-r*l+e*t.slidesPerGroup,n=a+r*x/k,s.css({"-webkit-box-ordinal-group":n,"-moz-box-ordinal-group":n,"-ms-flex-order":n,"-webkit-order":n,order:n})}else"column"===t.slidesPerColumnFill?(a=Math.floor(i/k),r=i-a*k,(a>M||a===M&&r===k-1)&&(r+=1,r>=k&&(r=0,a+=1))):(r=Math.floor(i/A),a=i-r*A);s.css("margin-"+(e.isHorizontal()?"top":"left"),0!==r&&t.spaceBetween&&t.spaceBetween+"px")}if("none"!==s.css("display")){if("auto"===t.slidesPerView){const i=o.getComputedStyle(s[0],null),n=s[0].style.transform,a=s[0].style.webkitTransform;if(n&&(s[0].style.transform="none"),a&&(s[0].style.webkitTransform="none"),t.roundLengths)y=e.isHorizontal()?s.outerWidth(!0):s.outerHeight(!0);else if(e.isHorizontal()){const e=parseFloat(i.getPropertyValue("width")),t=parseFloat(i.getPropertyValue("padding-left")),n=parseFloat(i.getPropertyValue("padding-right")),s=parseFloat(i.getPropertyValue("margin-left")),a=parseFloat(i.getPropertyValue("margin-right")),r=i.getPropertyValue("box-sizing");y=r&&"border-box"===r?e+s+a:e+t+n+s+a}else{const e=parseFloat(i.getPropertyValue("height")),t=parseFloat(i.getPropertyValue("padding-top")),n=parseFloat(i.getPropertyValue("padding-bottom")),s=parseFloat(i.getPropertyValue("margin-top")),a=parseFloat(i.getPropertyValue("margin-bottom")),r=i.getPropertyValue("box-sizing");y=r&&"border-box"===r?e+s+a:e+t+n+s+a}n&&(s[0].style.transform=n),a&&(s[0].style.webkitTransform=a),t.roundLengths&&(y=Math.floor(y))}else y=(n-(t.slidesPerView-1)*E)/t.slidesPerView,t.roundLengths&&(y=Math.floor(y)),d[i]&&(e.isHorizontal()?d[i].style.width=y+"px":d[i].style.height=y+"px");d[i]&&(d[i].swiperSlideSize=y),m.push(y),t.centeredSlides?(T=T+y/2+S/2+E,0===S&&0!==i&&(T=T-n/2-E),0===i&&(T=T-n/2-E),Math.abs(T)<.001&&(T=0),t.roundLengths&&(T=Math.floor(T)),C%t.slidesPerGroup==0&&c.push(T),h.push(T)):(t.roundLengths&&(T=Math.floor(T)),(C-Math.min(e.params.slidesPerGroupSkip,C))%e.params.slidesPerGroup==0&&c.push(T),h.push(T),T=T+y+E),e.virtualSize+=y+E,S=y,C+=1}}let $;if(e.virtualSize=Math.max(e.virtualSize,n)+b,s&&a&&("slide"===t.effect||"coverflow"===t.effect)&&i.css({width:e.virtualSize+t.spaceBetween+"px"}),t.setWrapperSize&&(e.isHorizontal()?i.css({width:e.virtualSize+t.spaceBetween+"px"}):i.css({height:e.virtualSize+t.spaceBetween+"px"})),t.slidesPerColumn>1&&(e.virtualSize=(y+t.spaceBetween)*x,e.virtualSize=Math.ceil(e.virtualSize/t.slidesPerColumn)-t.spaceBetween,e.isHorizontal()?i.css({width:e.virtualSize+t.spaceBetween+"px"}):i.css({height:e.virtualSize+t.spaceBetween+"px"}),t.centeredSlides)){$=[];for(let i=0;i<c.length;i+=1){let n=c[i];t.roundLengths&&(n=Math.floor(n)),c[i]<e.virtualSize+c[0]&&$.push(n)}c=$}if(!t.centeredSlides){$=[];for(let i=0;i<c.length;i+=1){let s=c[i];t.roundLengths&&(s=Math.floor(s)),c[i]<=e.virtualSize-n&&$.push(s)}c=$,Math.floor(e.virtualSize-n)-Math.floor(c[c.length-1])>1&&c.push(e.virtualSize-n)}if(0===c.length&&(c=[0]),0!==t.spaceBetween&&(e.isHorizontal()?s?d.filter(f).css({marginLeft:E+"px"}):d.filter(f).css({marginRight:E+"px"}):d.filter(f).css({marginBottom:E+"px"})),t.centeredSlides&&t.centeredSlidesBounds){let e=0;m.forEach(i=>{e+=i+(t.spaceBetween?t.spaceBetween:0)}),e-=t.spaceBetween;const i=e-n;c=c.map(e=>e<0?-g:e>i?i+b:e)}if(t.centerInsufficientSlides){let e=0;if(m.forEach(i=>{e+=i+(t.spaceBetween?t.spaceBetween:0)}),e-=t.spaceBetween,e<n){const t=(n-e)/2;c.forEach((e,i)=>{c[i]=e-t}),h.forEach((e,i)=>{h[i]=e+t})}}u.extend(e,{slides:d,snapGrid:c,slidesGrid:h,slidesSizesGrid:m}),p!==l&&e.emit("slidesLengthChange"),c.length!==w&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),h.length!==v&&e.emit("slidesGridLengthChange"),(t.watchSlidesProgress||t.watchSlidesVisibility)&&e.updateSlidesOffset()},updateAutoHeight:function(e){const t=this,i=[];let n,s=0;if("number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed),"auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)t.visibleSlides.each((e,t)=>{i.push(t)});else for(n=0;n<Math.ceil(t.params.slidesPerView);n+=1){const e=t.activeIndex+n;if(e>t.slides.length)break;i.push(t.slides.eq(e)[0])}else i.push(t.slides.eq(t.activeIndex)[0]);for(n=0;n<i.length;n+=1)if(void 0!==i[n]){const e=i[n].offsetHeight;s=e>s?e:s}s&&t.$wrapperEl.css("height",s+"px")},updateSlidesOffset:function(){const e=this,t=e.slides;for(let i=0;i<t.length;i+=1)t[i].swiperSlideOffset=e.isHorizontal()?t[i].offsetLeft:t[i].offsetTop},updateSlidesProgress:function(e=this&&this.translate||0){const t=this,i=t.params,{slides:n,rtlTranslate:s}=t;if(0===n.length)return;void 0===n[0].swiperSlideOffset&&t.updateSlidesOffset();let a=-e;s&&(a=e),n.removeClass(i.slideVisibleClass),t.visibleSlidesIndexes=[],t.visibleSlides=[];for(let e=0;e<n.length;e+=1){const r=n[e],o=(a+(i.centeredSlides?t.minTranslate():0)-r.swiperSlideOffset)/(r.swiperSlideSize+i.spaceBetween);if(i.watchSlidesVisibility||i.centeredSlides&&i.autoHeight){const s=-(a-r.swiperSlideOffset),o=s+t.slidesSizesGrid[e];(s>=0&&s<t.size-1||o>1&&o<=t.size||s<=0&&o>=t.size)&&(t.visibleSlides.push(r),t.visibleSlidesIndexes.push(e),n.eq(e).addClass(i.slideVisibleClass))}r.progress=s?-o:o}t.visibleSlides=d(t.visibleSlides)},updateProgress:function(e){const t=this;if(void 0===e){const i=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*i||0}const i=t.params,n=t.maxTranslate()-t.minTranslate();let{progress:s,isBeginning:a,isEnd:r}=t;const o=a,l=r;0===n?(s=0,a=!0,r=!0):(s=(e-t.minTranslate())/n,a=s<=0,r=s>=1),u.extend(t,{progress:s,isBeginning:a,isEnd:r}),(i.watchSlidesProgress||i.watchSlidesVisibility||i.centeredSlides&&i.autoHeight)&&t.updateSlidesProgress(e),a&&!o&&t.emit("reachBeginning toEdge"),r&&!l&&t.emit("reachEnd toEdge"),(o&&!a||l&&!r)&&t.emit("fromEdge"),t.emit("progress",s)},updateSlidesClasses:function(){const e=this,{slides:t,params:i,$wrapperEl:n,activeIndex:s,realIndex:a}=e,r=e.virtual&&i.virtual.enabled;let o;t.removeClass(`${i.slideActiveClass} ${i.slideNextClass} ${i.slidePrevClass} ${i.slideDuplicateActiveClass} ${i.slideDuplicateNextClass} ${i.slideDuplicatePrevClass}`),o=r?e.$wrapperEl.find(`.${i.slideClass}[data-swiper-slide-index="${s}"]`):t.eq(s),o.addClass(i.slideActiveClass),i.loop&&(o.hasClass(i.slideDuplicateClass)?n.children(`.${i.slideClass}:not(.${i.slideDuplicateClass})[data-swiper-slide-index="${a}"]`).addClass(i.slideDuplicateActiveClass):n.children(`.${i.slideClass}.${i.slideDuplicateClass}[data-swiper-slide-index="${a}"]`).addClass(i.slideDuplicateActiveClass));let l=o.nextAll("."+i.slideClass).eq(0).addClass(i.slideNextClass);i.loop&&0===l.length&&(l=t.eq(0),l.addClass(i.slideNextClass));let d=o.prevAll("."+i.slideClass).eq(0).addClass(i.slidePrevClass);i.loop&&0===d.length&&(d=t.eq(-1),d.addClass(i.slidePrevClass)),i.loop&&(l.hasClass(i.slideDuplicateClass)?n.children(`.${i.slideClass}:not(.${i.slideDuplicateClass})[data-swiper-slide-index="${l.attr("data-swiper-slide-index")}"]`).addClass(i.slideDuplicateNextClass):n.children(`.${i.slideClass}.${i.slideDuplicateClass}[data-swiper-slide-index="${l.attr("data-swiper-slide-index")}"]`).addClass(i.slideDuplicateNextClass),d.hasClass(i.slideDuplicateClass)?n.children(`.${i.slideClass}:not(.${i.slideDuplicateClass})[data-swiper-slide-index="${d.attr("data-swiper-slide-index")}"]`).addClass(i.slideDuplicatePrevClass):n.children(`.${i.slideClass}.${i.slideDuplicateClass}[data-swiper-slide-index="${d.attr("data-swiper-slide-index")}"]`).addClass(i.slideDuplicatePrevClass))},updateActiveIndex:function(e){const t=this,i=t.rtlTranslate?t.translate:-t.translate,{slidesGrid:n,snapGrid:s,params:a,activeIndex:r,realIndex:o,snapIndex:l}=t;let d,p=e;if(void 0===p){for(let e=0;e<n.length;e+=1)void 0!==n[e+1]?i>=n[e]&&i<n[e+1]-(n[e+1]-n[e])/2?p=e:i>=n[e]&&i<n[e+1]&&(p=e+1):i>=n[e]&&(p=e);a.normalizeSlideIndex&&(p<0||void 0===p)&&(p=0)}if(s.indexOf(i)>=0)d=s.indexOf(i);else{const e=Math.min(a.slidesPerGroupSkip,p);d=e+Math.floor((p-e)/a.slidesPerGroup)}if(d>=s.length&&(d=s.length-1),p===r)return void(d!==l&&(t.snapIndex=d,t.emit("snapIndexChange")));const c=parseInt(t.slides.eq(p).attr("data-swiper-slide-index")||p,10);u.extend(t,{snapIndex:d,realIndex:c,previousIndex:r,activeIndex:p}),t.emit("activeIndexChange"),t.emit("snapIndexChange"),o!==c&&t.emit("realIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&t.emit("slideChange")},updateClickedSlide:function(e){const t=this,i=t.params,n=d(e.target).closest("."+i.slideClass)[0];let s=!1;if(n)for(let e=0;e<t.slides.length;e+=1)t.slides[e]===n&&(s=!0);if(!n||!s)return t.clickedSlide=void 0,void(t.clickedIndex=void 0);t.clickedSlide=n,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt(d(n).attr("data-swiper-slide-index"),10):t.clickedIndex=d(n).index(),i.slideToClickedSlide&&void 0!==t.clickedIndex&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()}};var g={getTranslate:function(e=(this.isHorizontal()?"x":"y")){const{params:t,rtlTranslate:i,translate:n,$wrapperEl:s}=this;if(t.virtualTranslate)return i?-n:n;if(t.cssMode)return n;let a=u.getTranslate(s[0],e);return i&&(a=-a),a||0},setTranslate:function(e,t){const i=this,{rtlTranslate:n,params:s,$wrapperEl:a,wrapperEl:r,progress:o}=i;let l,d=0,p=0;i.isHorizontal()?d=n?-e:e:p=e,s.roundLengths&&(d=Math.floor(d),p=Math.floor(p)),s.cssMode?r[i.isHorizontal()?"scrollLeft":"scrollTop"]=i.isHorizontal()?-d:-p:s.virtualTranslate||a.transform(`translate3d(${d}px, ${p}px, 0px)`),i.previousTranslate=i.translate,i.translate=i.isHorizontal()?d:p;const c=i.maxTranslate()-i.minTranslate();l=0===c?0:(e-i.minTranslate())/c,l!==o&&i.updateProgress(e),i.emit("setTranslate",i.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e=0,t=this.params.speed,i=!0,n=!0,s){const a=this,{params:r,wrapperEl:o}=a;if(a.animating&&r.preventInteractionOnTransition)return!1;const l=a.minTranslate(),d=a.maxTranslate();let p;if(p=n&&e>l?l:n&&e<d?d:e,a.updateProgress(p),r.cssMode){const e=a.isHorizontal();return 0===t?o[e?"scrollLeft":"scrollTop"]=-p:o.scrollTo?o.scrollTo({[e?"left":"top"]:-p,behavior:"smooth"}):o[e?"scrollLeft":"scrollTop"]=-p,!0}return 0===t?(a.setTransition(0),a.setTranslate(p),i&&(a.emit("beforeTransitionStart",t,s),a.emit("transitionEnd"))):(a.setTransition(t),a.setTranslate(p),i&&(a.emit("beforeTransitionStart",t,s),a.emit("transitionStart")),a.animating||(a.animating=!0,a.onTranslateToWrapperTransitionEnd||(a.onTranslateToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.$wrapperEl[0].removeEventListener("transitionend",a.onTranslateToWrapperTransitionEnd),a.$wrapperEl[0].removeEventListener("webkitTransitionEnd",a.onTranslateToWrapperTransitionEnd),a.onTranslateToWrapperTransitionEnd=null,delete a.onTranslateToWrapperTransitionEnd,i&&a.emit("transitionEnd"))}),a.$wrapperEl[0].addEventListener("transitionend",a.onTranslateToWrapperTransitionEnd),a.$wrapperEl[0].addEventListener("webkitTransitionEnd",a.onTranslateToWrapperTransitionEnd))),!0}};var b={setTransition:function(e,t){const i=this;i.params.cssMode||i.$wrapperEl.transition(e),i.emit("setTransition",e,t)},transitionStart:function(e=!0,t){const i=this,{activeIndex:n,params:s,previousIndex:a}=i;if(s.cssMode)return;s.autoHeight&&i.updateAutoHeight();let r=t;if(r||(r=n>a?"next":n<a?"prev":"reset"),i.emit("transitionStart"),e&&n!==a){if("reset"===r)return void i.emit("slideResetTransitionStart");i.emit("slideChangeTransitionStart"),"next"===r?i.emit("slideNextTransitionStart"):i.emit("slidePrevTransitionStart")}},transitionEnd:function(e=!0,t){const i=this,{activeIndex:n,previousIndex:s,params:a}=i;if(i.animating=!1,a.cssMode)return;i.setTransition(0);let r=t;if(r||(r=n>s?"next":n<s?"prev":"reset"),i.emit("transitionEnd"),e&&n!==s){if("reset"===r)return void i.emit("slideResetTransitionEnd");i.emit("slideChangeTransitionEnd"),"next"===r?i.emit("slideNextTransitionEnd"):i.emit("slidePrevTransitionEnd")}}};var w={slideTo:function(e=0,t=this.params.speed,i=!0,n){const s=this;let a=e;a<0&&(a=0);const{params:r,snapGrid:o,slidesGrid:l,previousIndex:d,activeIndex:p,rtlTranslate:c,wrapperEl:u}=s;if(s.animating&&r.preventInteractionOnTransition)return!1;const h=Math.min(s.params.slidesPerGroupSkip,a);let m=h+Math.floor((a-h)/s.params.slidesPerGroup);m>=o.length&&(m=o.length-1),(p||r.initialSlide||0)===(d||0)&&i&&s.emit("beforeSlideChangeStart");const f=-o[m];if(s.updateProgress(f),r.normalizeSlideIndex)for(let e=0;e<l.length;e+=1)-Math.floor(100*f)>=Math.floor(100*l[e])&&(a=e);if(s.initialized&&a!==p){if(!s.allowSlideNext&&f<s.translate&&f<s.minTranslate())return!1;if(!s.allowSlidePrev&&f>s.translate&&f>s.maxTranslate()&&(p||0)!==a)return!1}let g;if(g=a>p?"next":a<p?"prev":"reset",c&&-f===s.translate||!c&&f===s.translate)return s.updateActiveIndex(a),r.autoHeight&&s.updateAutoHeight(),s.updateSlidesClasses(),"slide"!==r.effect&&s.setTranslate(f),"reset"!==g&&(s.transitionStart(i,g),s.transitionEnd(i,g)),!1;if(r.cssMode){const e=s.isHorizontal();let i=-f;return c&&(i=u.scrollWidth-u.offsetWidth-i),0===t?u[e?"scrollLeft":"scrollTop"]=i:u.scrollTo?u.scrollTo({[e?"left":"top"]:i,behavior:"smooth"}):u[e?"scrollLeft":"scrollTop"]=i,!0}return 0===t?(s.setTransition(0),s.setTranslate(f),s.updateActiveIndex(a),s.updateSlidesClasses(),s.emit("beforeTransitionStart",t,n),s.transitionStart(i,g),s.transitionEnd(i,g)):(s.setTransition(t),s.setTranslate(f),s.updateActiveIndex(a),s.updateSlidesClasses(),s.emit("beforeTransitionStart",t,n),s.transitionStart(i,g),s.animating||(s.animating=!0,s.onSlideToWrapperTransitionEnd||(s.onSlideToWrapperTransitionEnd=function(e){s&&!s.destroyed&&e.target===this&&(s.$wrapperEl[0].removeEventListener("transitionend",s.onSlideToWrapperTransitionEnd),s.$wrapperEl[0].removeEventListener("webkitTransitionEnd",s.onSlideToWrapperTransitionEnd),s.onSlideToWrapperTransitionEnd=null,delete s.onSlideToWrapperTransitionEnd,s.transitionEnd(i,g))}),s.$wrapperEl[0].addEventListener("transitionend",s.onSlideToWrapperTransitionEnd),s.$wrapperEl[0].addEventListener("webkitTransitionEnd",s.onSlideToWrapperTransitionEnd))),!0},slideToLoop:function(e=0,t=this.params.speed,i=!0,n){const s=this;let a=e;return s.params.loop&&(a+=s.loopedSlides),s.slideTo(a,t,i,n)},slideNext:function(e=this.params.speed,t=!0,i){const n=this,{params:s,animating:a}=n,r=n.activeIndex<s.slidesPerGroupSkip?1:s.slidesPerGroup;if(s.loop){if(a)return!1;n.loopFix(),n._clientLeft=n.$wrapperEl[0].clientLeft}return n.slideTo(n.activeIndex+r,e,t,i)},slidePrev:function(e=this.params.speed,t=!0,i){const n=this,{params:s,animating:a,snapGrid:r,slidesGrid:o,rtlTranslate:l}=n;if(s.loop){if(a)return!1;n.loopFix(),n._clientLeft=n.$wrapperEl[0].clientLeft}function d(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const p=d(l?n.translate:-n.translate),c=r.map(e=>d(e));o.map(e=>d(e)),r[c.indexOf(p)];let u,h=r[c.indexOf(p)-1];return void 0===h&&s.cssMode&&r.forEach(e=>{!h&&p>=e&&(h=e)}),void 0!==h&&(u=o.indexOf(h),u<0&&(u=n.activeIndex-1)),n.slideTo(u,e,t,i)},slideReset:function(e=this.params.speed,t=!0,i){return this.slideTo(this.activeIndex,e,t,i)},slideToClosest:function(e=this.params.speed,t=!0,i,n=.5){const s=this;let a=s.activeIndex;const r=Math.min(s.params.slidesPerGroupSkip,a),o=r+Math.floor((a-r)/s.params.slidesPerGroup),l=s.rtlTranslate?s.translate:-s.translate;if(l>=s.snapGrid[o]){const e=s.snapGrid[o];l-e>(s.snapGrid[o+1]-e)*n&&(a+=s.params.slidesPerGroup)}else{const e=s.snapGrid[o-1];l-e<=(s.snapGrid[o]-e)*n&&(a-=s.params.slidesPerGroup)}return a=Math.max(a,0),a=Math.min(a,s.slidesGrid.length-1),s.slideTo(a,e,t,i)},slideToClickedSlide:function(){const e=this,{params:t,$wrapperEl:i}=e,n="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let s,a=e.clickedIndex;if(t.loop){if(e.animating)return;s=parseInt(d(e.clickedSlide).attr("data-swiper-slide-index"),10),t.centeredSlides?a<e.loopedSlides-n/2||a>e.slides.length-e.loopedSlides+n/2?(e.loopFix(),a=i.children(`.${t.slideClass}[data-swiper-slide-index="${s}"]:not(.${t.slideDuplicateClass})`).eq(0).index(),u.nextTick(()=>{e.slideTo(a)})):e.slideTo(a):a>e.slides.length-n?(e.loopFix(),a=i.children(`.${t.slideClass}[data-swiper-slide-index="${s}"]:not(.${t.slideDuplicateClass})`).eq(0).index(),u.nextTick(()=>{e.slideTo(a)})):e.slideTo(a)}else e.slideTo(a)}};var v={loopCreate:function(){const e=this,{params:t,$wrapperEl:i}=e;i.children(`.${t.slideClass}.${t.slideDuplicateClass}`).remove();let n=i.children("."+t.slideClass);if(t.loopFillGroupWithBlank){const e=t.slidesPerGroup-n.length%t.slidesPerGroup;if(e!==t.slidesPerGroup){for(let n=0;n<e;n+=1){const e=d(a.createElement("div")).addClass(`${t.slideClass} ${t.slideBlankClass}`);i.append(e)}n=i.children("."+t.slideClass)}}"auto"!==t.slidesPerView||t.loopedSlides||(t.loopedSlides=n.length),e.loopedSlides=Math.ceil(parseFloat(t.loopedSlides||t.slidesPerView,10)),e.loopedSlides+=t.loopAdditionalSlides,e.loopedSlides>n.length&&(e.loopedSlides=n.length);const s=[],r=[];n.each((t,i)=>{const a=d(i);t<e.loopedSlides&&r.push(i),t<n.length&&t>=n.length-e.loopedSlides&&s.push(i),a.attr("data-swiper-slide-index",t)});for(let e=0;e<r.length;e+=1)i.append(d(r[e].cloneNode(!0)).addClass(t.slideDuplicateClass));for(let e=s.length-1;e>=0;e-=1)i.prepend(d(s[e].cloneNode(!0)).addClass(t.slideDuplicateClass))},loopFix:function(){const e=this;e.emit("beforeLoopFix");const{activeIndex:t,slides:i,loopedSlides:n,allowSlidePrev:s,allowSlideNext:a,snapGrid:r,rtlTranslate:o}=e;let l;e.allowSlidePrev=!0,e.allowSlideNext=!0;const d=-r[t]-e.getTranslate();if(t<n){l=i.length-3*n+t,l+=n;e.slideTo(l,0,!1,!0)&&0!==d&&e.setTranslate((o?-e.translate:e.translate)-d)}else if(t>=i.length-n){l=-i.length+t+n,l+=n;e.slideTo(l,0,!1,!0)&&0!==d&&e.setTranslate((o?-e.translate:e.translate)-d)}e.allowSlidePrev=s,e.allowSlideNext=a,e.emit("loopFix")},loopDestroy:function(){const{$wrapperEl:e,params:t,slides:i}=this;e.children(`.${t.slideClass}.${t.slideDuplicateClass},.${t.slideClass}.${t.slideBlankClass}`).remove(),i.removeAttr("data-swiper-slide-index")}};var x={setGrabCursor:function(e){if(h.touch||!this.params.simulateTouch||this.params.watchOverflow&&this.isLocked||this.params.cssMode)return;const t=this.el;t.style.cursor="move",t.style.cursor=e?"-webkit-grabbing":"-webkit-grab",t.style.cursor=e?"-moz-grabbin":"-moz-grab",t.style.cursor=e?"grabbing":"grab"},unsetGrabCursor:function(){h.touch||this.params.watchOverflow&&this.isLocked||this.params.cssMode||(this.el.style.cursor="")}};var y={appendSlide:function(e){const t=this,{$wrapperEl:i,params:n}=t;if(n.loop&&t.loopDestroy(),"object"==typeof e&&"length"in e)for(let t=0;t<e.length;t+=1)e[t]&&i.append(e[t]);else i.append(e);n.loop&&t.loopCreate(),n.observer&&h.observer||t.update()},prependSlide:function(e){const t=this,{params:i,$wrapperEl:n,activeIndex:s}=t;i.loop&&t.loopDestroy();let a=s+1;if("object"==typeof e&&"length"in e){for(let t=0;t<e.length;t+=1)e[t]&&n.prepend(e[t]);a=s+e.length}else n.prepend(e);i.loop&&t.loopCreate(),i.observer&&h.observer||t.update(),t.slideTo(a,0,!1)},addSlide:function(e,t){const i=this,{$wrapperEl:n,params:s,activeIndex:a}=i;let r=a;s.loop&&(r-=i.loopedSlides,i.loopDestroy(),i.slides=n.children("."+s.slideClass));const o=i.slides.length;if(e<=0)return void i.prependSlide(t);if(e>=o)return void i.appendSlide(t);let l=r>e?r+1:r;const d=[];for(let t=o-1;t>=e;t-=1){const e=i.slides.eq(t);e.remove(),d.unshift(e)}if("object"==typeof t&&"length"in t){for(let e=0;e<t.length;e+=1)t[e]&&n.append(t[e]);l=r>e?r+t.length:r}else n.append(t);for(let e=0;e<d.length;e+=1)n.append(d[e]);s.loop&&i.loopCreate(),s.observer&&h.observer||i.update(),s.loop?i.slideTo(l+i.loopedSlides,0,!1):i.slideTo(l,0,!1)},removeSlide:function(e){const t=this,{params:i,$wrapperEl:n,activeIndex:s}=t;let a=s;i.loop&&(a-=t.loopedSlides,t.loopDestroy(),t.slides=n.children("."+i.slideClass));let r,o=a;if("object"==typeof e&&"length"in e){for(let i=0;i<e.length;i+=1)r=e[i],t.slides[r]&&t.slides.eq(r).remove(),r<o&&(o-=1);o=Math.max(o,0)}else r=e,t.slides[r]&&t.slides.eq(r).remove(),r<o&&(o-=1),o=Math.max(o,0);i.loop&&t.loopCreate(),i.observer&&h.observer||t.update(),i.loop?t.slideTo(o+t.loopedSlides,0,!1):t.slideTo(o,0,!1)},removeAllSlides:function(){const e=this,t=[];for(let i=0;i<e.slides.length;i+=1)t.push(i);e.removeSlide(t)}};const E=function(){const e=o.navigator.platform,t=o.navigator.userAgent,i={ios:!1,android:!1,androidChrome:!1,desktop:!1,iphone:!1,ipod:!1,ipad:!1,edge:!1,ie:!1,firefox:!1,macos:!1,windows:!1,cordova:!(!o.cordova&&!o.phonegap),phonegap:!(!o.cordova&&!o.phonegap),electron:!1},n=o.screen.width,s=o.screen.height,a=t.match(/(Android);?[\s\/]+([\d.]+)?/);let r=t.match(/(iPad).*OS\s([\d_]+)/);const l=t.match(/(iPod)(.*OS\s([\d_]+))?/),d=!r&&t.match(/(iPhone\sOS|iOS)\s([\d_]+)/),p=t.indexOf("MSIE ")>=0||t.indexOf("Trident/")>=0,c=t.indexOf("Edge/")>=0,u=t.indexOf("Gecko/")>=0&&t.indexOf("Firefox/")>=0,m="Win32"===e,f=t.toLowerCase().indexOf("electron")>=0;let g="MacIntel"===e;return!r&&g&&h.touch&&(1024===n&&1366===s||834===n&&1194===s||834===n&&1112===s||768===n&&1024===s)&&(r=t.match(/(Version)\/([\d.]+)/),g=!1),i.ie=p,i.edge=c,i.firefox=u,a&&!m&&(i.os="android",i.osVersion=a[2],i.android=!0,i.androidChrome=t.toLowerCase().indexOf("chrome")>=0),(r||d||l)&&(i.os="ios",i.ios=!0),d&&!l&&(i.osVersion=d[2].replace(/_/g,"."),i.iphone=!0),r&&(i.osVersion=r[2].replace(/_/g,"."),i.ipad=!0),l&&(i.osVersion=l[3]?l[3].replace(/_/g,"."):null,i.ipod=!0),i.ios&&i.osVersion&&t.indexOf("Version/")>=0&&"10"===i.osVersion.split(".")[0]&&(i.osVersion=t.toLowerCase().split("version/")[1].split(" ")[0]),i.webView=!(!(d||r||l)||!t.match(/.*AppleWebKit(?!.*Safari)/i)&&!o.navigator.standalone)||o.matchMedia&&o.matchMedia("(display-mode: standalone)").matches,i.webview=i.webView,i.standalone=i.webView,i.desktop=!(i.ios||i.android)||f,i.desktop&&(i.electron=f,i.macos=g,i.windows=m,i.macos&&(i.os="macos"),i.windows&&(i.os="windows")),i.pixelRatio=o.devicePixelRatio||1,i}();function T(e){const t=this,i=t.touchEventsData,{params:n,touches:s}=t;if(t.animating&&n.preventInteractionOnTransition)return;let r=e;r.originalEvent&&(r=r.originalEvent);const l=d(r.target);if("wrapper"===n.touchEventsTarget&&!l.closest(t.wrapperEl).length)return;if(i.isTouchEvent="touchstart"===r.type,!i.isTouchEvent&&"which"in r&&3===r.which)return;if(!i.isTouchEvent&&"button"in r&&r.button>0)return;if(i.isTouched&&i.isMoved)return;if(n.noSwiping&&l.closest(n.noSwipingSelector?n.noSwipingSelector:"."+n.noSwipingClass)[0])return void(t.allowClick=!0);if(n.swipeHandler&&!l.closest(n.swipeHandler)[0])return;s.currentX="touchstart"===r.type?r.targetTouches[0].pageX:r.pageX,s.currentY="touchstart"===r.type?r.targetTouches[0].pageY:r.pageY;const p=s.currentX,c=s.currentY,h=n.edgeSwipeDetection||n.iOSEdgeSwipeDetection,m=n.edgeSwipeThreshold||n.iOSEdgeSwipeThreshold;if(!h||!(p<=m||p>=o.screen.width-m)){if(u.extend(i,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),s.startX=p,s.startY=c,i.touchStartTime=u.now(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,n.threshold>0&&(i.allowThresholdMove=!1),"touchstart"!==r.type){let e=!0;l.is(i.formElements)&&(e=!1),a.activeElement&&d(a.activeElement).is(i.formElements)&&a.activeElement!==l[0]&&a.activeElement.blur();const s=e&&t.allowTouchMove&&n.touchStartPreventDefault;(n.touchStartForcePreventDefault||s)&&r.preventDefault()}t.emit("touchStart",r)}}function S(e){const t=this,i=t.touchEventsData,{params:n,touches:s,rtlTranslate:r}=t;let o=e;if(o.originalEvent&&(o=o.originalEvent),!i.isTouched)return void(i.startMoving&&i.isScrolling&&t.emit("touchMoveOpposite",o));if(i.isTouchEvent&&"touchmove"!==o.type)return;const l="touchmove"===o.type&&o.targetTouches&&(o.targetTouches[0]||o.changedTouches[0]),p="touchmove"===o.type?l.pageX:o.pageX,c="touchmove"===o.type?l.pageY:o.pageY;if(o.preventedByNestedSwiper)return s.startX=p,void(s.startY=c);if(!t.allowTouchMove)return t.allowClick=!1,void(i.isTouched&&(u.extend(s,{startX:p,startY:c,currentX:p,currentY:c}),i.touchStartTime=u.now()));if(i.isTouchEvent&&n.touchReleaseOnEdges&&!n.loop)if(t.isVertical()){if(c<s.startY&&t.translate<=t.maxTranslate()||c>s.startY&&t.translate>=t.minTranslate())return i.isTouched=!1,void(i.isMoved=!1)}else if(p<s.startX&&t.translate<=t.maxTranslate()||p>s.startX&&t.translate>=t.minTranslate())return;if(i.isTouchEvent&&a.activeElement&&o.target===a.activeElement&&d(o.target).is(i.formElements))return i.isMoved=!0,void(t.allowClick=!1);if(i.allowTouchCallbacks&&t.emit("touchMove",o),o.targetTouches&&o.targetTouches.length>1)return;s.currentX=p,s.currentY=c;const h=s.currentX-s.startX,m=s.currentY-s.startY;if(t.params.threshold&&Math.sqrt(h**2+m**2)<t.params.threshold)return;if(void 0===i.isScrolling){let e;t.isHorizontal()&&s.currentY===s.startY||t.isVertical()&&s.currentX===s.startX?i.isScrolling=!1:h*h+m*m>=25&&(e=180*Math.atan2(Math.abs(m),Math.abs(h))/Math.PI,i.isScrolling=t.isHorizontal()?e>n.touchAngle:90-e>n.touchAngle)}if(i.isScrolling&&t.emit("touchMoveOpposite",o),void 0===i.startMoving&&(s.currentX===s.startX&&s.currentY===s.startY||(i.startMoving=!0)),i.isScrolling)return void(i.isTouched=!1);if(!i.startMoving)return;t.allowClick=!1,!n.cssMode&&o.cancelable&&o.preventDefault(),n.touchMoveStopPropagation&&!n.nested&&o.stopPropagation(),i.isMoved||(n.loop&&t.loopFix(),i.startTranslate=t.getTranslate(),t.setTransition(0),t.animating&&t.$wrapperEl.trigger("webkitTransitionEnd transitionend"),i.allowMomentumBounce=!1,!n.grabCursor||!0!==t.allowSlideNext&&!0!==t.allowSlidePrev||t.setGrabCursor(!0),t.emit("sliderFirstMove",o)),t.emit("sliderMove",o),i.isMoved=!0;let f=t.isHorizontal()?h:m;s.diff=f,f*=n.touchRatio,r&&(f=-f),t.swipeDirection=f>0?"prev":"next",i.currentTranslate=f+i.startTranslate;let g=!0,b=n.resistanceRatio;if(n.touchReleaseOnEdges&&(b=0),f>0&&i.currentTranslate>t.minTranslate()?(g=!1,n.resistance&&(i.currentTranslate=t.minTranslate()-1+(-t.minTranslate()+i.startTranslate+f)**b)):f<0&&i.currentTranslate<t.maxTranslate()&&(g=!1,n.resistance&&(i.currentTranslate=t.maxTranslate()+1-(t.maxTranslate()-i.startTranslate-f)**b)),g&&(o.preventedByNestedSwiper=!0),!t.allowSlideNext&&"next"===t.swipeDirection&&i.currentTranslate<i.startTranslate&&(i.currentTranslate=i.startTranslate),!t.allowSlidePrev&&"prev"===t.swipeDirection&&i.currentTranslate>i.startTranslate&&(i.currentTranslate=i.startTranslate),n.threshold>0){if(!(Math.abs(f)>n.threshold||i.allowThresholdMove))return void(i.currentTranslate=i.startTranslate);if(!i.allowThresholdMove)return i.allowThresholdMove=!0,s.startX=s.currentX,s.startY=s.currentY,i.currentTranslate=i.startTranslate,void(s.diff=t.isHorizontal()?s.currentX-s.startX:s.currentY-s.startY)}n.followFinger&&!n.cssMode&&((n.freeMode||n.watchSlidesProgress||n.watchSlidesVisibility)&&(t.updateActiveIndex(),t.updateSlidesClasses()),n.freeMode&&(0===i.velocities.length&&i.velocities.push({position:s[t.isHorizontal()?"startX":"startY"],time:i.touchStartTime}),i.velocities.push({position:s[t.isHorizontal()?"currentX":"currentY"],time:u.now()})),t.updateProgress(i.currentTranslate),t.setTranslate(i.currentTranslate))}function C(e){const t=this,i=t.touchEventsData,{params:n,touches:s,rtlTranslate:a,$wrapperEl:r,slidesGrid:o,snapGrid:l}=t;let d=e;if(d.originalEvent&&(d=d.originalEvent),i.allowTouchCallbacks&&t.emit("touchEnd",d),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&n.grabCursor&&t.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);n.grabCursor&&i.isMoved&&i.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const p=u.now(),c=p-i.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(d),t.emit("tap click",d),c<300&&p-i.lastClickTime<300&&t.emit("doubleTap doubleClick",d)),i.lastClickTime=u.now(),u.nextTick(()=>{t.destroyed||(t.allowClick=!0)}),!i.isTouched||!i.isMoved||!t.swipeDirection||0===s.diff||i.currentTranslate===i.startTranslate)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);let h;if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,h=n.followFinger?a?t.translate:-t.translate:-i.currentTranslate,n.cssMode)return;if(n.freeMode){if(h<-t.minTranslate())return void t.slideTo(t.activeIndex);if(h>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(n.freeModeMomentum){if(i.velocities.length>1){const e=i.velocities.pop(),s=i.velocities.pop(),a=e.position-s.position,r=e.time-s.time;t.velocity=a/r,t.velocity/=2,Math.abs(t.velocity)<n.freeModeMinimumVelocity&&(t.velocity=0),(r>150||u.now()-e.time>300)&&(t.velocity=0)}else t.velocity=0;t.velocity*=n.freeModeMomentumVelocityRatio,i.velocities.length=0;let e=1e3*n.freeModeMomentumRatio;const s=t.velocity*e;let o=t.translate+s;a&&(o=-o);let d,p=!1;const c=20*Math.abs(t.velocity)*n.freeModeMomentumBounceRatio;let h;if(o<t.maxTranslate())n.freeModeMomentumBounce?(o+t.maxTranslate()<-c&&(o=t.maxTranslate()-c),d=t.maxTranslate(),p=!0,i.allowMomentumBounce=!0):o=t.maxTranslate(),n.loop&&n.centeredSlides&&(h=!0);else if(o>t.minTranslate())n.freeModeMomentumBounce?(o-t.minTranslate()>c&&(o=t.minTranslate()+c),d=t.minTranslate(),p=!0,i.allowMomentumBounce=!0):o=t.minTranslate(),n.loop&&n.centeredSlides&&(h=!0);else if(n.freeModeSticky){let e;for(let t=0;t<l.length;t+=1)if(l[t]>-o){e=t;break}o=Math.abs(l[e]-o)<Math.abs(l[e-1]-o)||"next"===t.swipeDirection?l[e]:l[e-1],o=-o}if(h&&t.once("transitionEnd",()=>{t.loopFix()}),0!==t.velocity){if(e=a?Math.abs((-o-t.translate)/t.velocity):Math.abs((o-t.translate)/t.velocity),n.freeModeSticky){const i=Math.abs((a?-o:o)-t.translate),s=t.slidesSizesGrid[t.activeIndex];e=i<s?n.speed:i<2*s?1.5*n.speed:2.5*n.speed}}else if(n.freeModeSticky)return void t.slideToClosest();n.freeModeMomentumBounce&&p?(t.updateProgress(d),t.setTransition(e),t.setTranslate(o),t.transitionStart(!0,t.swipeDirection),t.animating=!0,r.transitionEnd(()=>{t&&!t.destroyed&&i.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(n.speed),setTimeout(()=>{t.setTranslate(d),r.transitionEnd(()=>{t&&!t.destroyed&&t.transitionEnd()})},0))})):t.velocity?(t.updateProgress(o),t.setTransition(e),t.setTranslate(o),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,r.transitionEnd(()=>{t&&!t.destroyed&&t.transitionEnd()}))):t.updateProgress(o),t.updateActiveIndex(),t.updateSlidesClasses()}else if(n.freeModeSticky)return void t.slideToClosest();return void((!n.freeModeMomentum||c>=n.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses()))}let m=0,f=t.slidesSizesGrid[0];for(let e=0;e<o.length;e+=e<n.slidesPerGroupSkip?1:n.slidesPerGroup){const t=e<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;void 0!==o[e+t]?h>=o[e]&&h<o[e+t]&&(m=e,f=o[e+t]-o[e]):h>=o[e]&&(m=e,f=o[o.length-1]-o[o.length-2])}const g=(h-o[m])/f,b=m<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;if(c>n.longSwipesMs){if(!n.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(g>=n.longSwipesRatio?t.slideTo(m+b):t.slideTo(m)),"prev"===t.swipeDirection&&(g>1-n.longSwipesRatio?t.slideTo(m+b):t.slideTo(m))}else{if(!n.shortSwipes)return void t.slideTo(t.activeIndex);t.navigation&&(d.target===t.navigation.nextEl||d.target===t.navigation.prevEl)?d.target===t.navigation.nextEl?t.slideTo(m+b):t.slideTo(m):("next"===t.swipeDirection&&t.slideTo(m+b),"prev"===t.swipeDirection&&t.slideTo(m))}}function k(){const e=this,{params:t,el:i}=e;if(i&&0===i.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:n,allowSlidePrev:s,snapGrid:a}=e;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses(),("auto"===t.slidesPerView||t.slidesPerView>1)&&e.isEnd&&!e.isBeginning&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.run(),e.allowSlidePrev=s,e.allowSlideNext=n,e.params.watchOverflow&&a!==e.snapGrid&&e.checkOverflow()}function A(e){const t=this;t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}function M(){const e=this,{wrapperEl:t,rtlTranslate:i}=e;let n;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=i?t.scrollWidth-t.offsetWidth-t.scrollLeft:-t.scrollLeft:e.translate=-t.scrollTop,-0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const s=e.maxTranslate()-e.minTranslate();n=0===s?0:(e.translate-e.minTranslate())/s,n!==e.progress&&e.updateProgress(i?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}let $=!1;function z(){}var P={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,preventInteractionOnTransition:!1,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,slidesPerGroupSkip:0,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0};const L={update:f,translate:g,transition:b,slide:w,loop:v,grabCursor:x,manipulation:y,events:{attachEvents:function(){const e=this,{params:t,touchEvents:i,el:n,wrapperEl:s}=e;e.onTouchStart=T.bind(e),e.onTouchMove=S.bind(e),e.onTouchEnd=C.bind(e),t.cssMode&&(e.onScroll=M.bind(e)),e.onClick=A.bind(e);const r=!!t.nested;if(!h.touch&&h.pointerEvents)n.addEventListener(i.start,e.onTouchStart,!1),a.addEventListener(i.move,e.onTouchMove,r),a.addEventListener(i.end,e.onTouchEnd,!1);else{if(h.touch){const s=!("touchstart"!==i.start||!h.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};n.addEventListener(i.start,e.onTouchStart,s),n.addEventListener(i.move,e.onTouchMove,h.passiveListener?{passive:!1,capture:r}:r),n.addEventListener(i.end,e.onTouchEnd,s),i.cancel&&n.addEventListener(i.cancel,e.onTouchEnd,s),$||(a.addEventListener("touchstart",z),$=!0)}(t.simulateTouch&&!E.ios&&!E.android||t.simulateTouch&&!h.touch&&E.ios)&&(n.addEventListener("mousedown",e.onTouchStart,!1),a.addEventListener("mousemove",e.onTouchMove,r),a.addEventListener("mouseup",e.onTouchEnd,!1))}(t.preventClicks||t.preventClicksPropagation)&&n.addEventListener("click",e.onClick,!0),t.cssMode&&s.addEventListener("scroll",e.onScroll),t.updateOnWindowResize?e.on(E.ios||E.android?"resize orientationchange observerUpdate":"resize observerUpdate",k,!0):e.on("observerUpdate",k,!0)},detachEvents:function(){const e=this,{params:t,touchEvents:i,el:n,wrapperEl:s}=e,r=!!t.nested;if(!h.touch&&h.pointerEvents)n.removeEventListener(i.start,e.onTouchStart,!1),a.removeEventListener(i.move,e.onTouchMove,r),a.removeEventListener(i.end,e.onTouchEnd,!1);else{if(h.touch){const s=!("onTouchStart"!==i.start||!h.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};n.removeEventListener(i.start,e.onTouchStart,s),n.removeEventListener(i.move,e.onTouchMove,r),n.removeEventListener(i.end,e.onTouchEnd,s),i.cancel&&n.removeEventListener(i.cancel,e.onTouchEnd,s)}(t.simulateTouch&&!E.ios&&!E.android||t.simulateTouch&&!h.touch&&E.ios)&&(n.removeEventListener("mousedown",e.onTouchStart,!1),a.removeEventListener("mousemove",e.onTouchMove,r),a.removeEventListener("mouseup",e.onTouchEnd,!1))}(t.preventClicks||t.preventClicksPropagation)&&n.removeEventListener("click",e.onClick,!0),t.cssMode&&s.removeEventListener("scroll",e.onScroll),e.off(E.ios||E.android?"resize orientationchange observerUpdate":"resize observerUpdate",k)}},breakpoints:{setBreakpoint:function(){const e=this,{activeIndex:t,initialized:i,loopedSlides:n=0,params:s,$el:a}=e,r=s.breakpoints;if(!r||r&&0===Object.keys(r).length)return;const o=e.getBreakpoint(r);if(o&&e.currentBreakpoint!==o){const l=o in r?r[o]:void 0;l&&["slidesPerView","spaceBetween","slidesPerGroup","slidesPerGroupSkip","slidesPerColumn"].forEach(e=>{const t=l[e];void 0!==t&&(l[e]="slidesPerView"!==e||"AUTO"!==t&&"auto"!==t?"slidesPerView"===e?parseFloat(t):parseInt(t,10):"auto")});const d=l||e.originalParams,p=s.slidesPerColumn>1,c=d.slidesPerColumn>1;p&&!c?a.removeClass(`${s.containerModifierClass}multirow ${s.containerModifierClass}multirow-column`):!p&&c&&(a.addClass(s.containerModifierClass+"multirow"),"column"===d.slidesPerColumnFill&&a.addClass(s.containerModifierClass+"multirow-column"));const h=d.direction&&d.direction!==s.direction,m=s.loop&&(d.slidesPerView!==s.slidesPerView||h);h&&i&&e.changeDirection(),u.extend(e.params,d),u.extend(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),e.currentBreakpoint=o,m&&i&&(e.loopDestroy(),e.loopCreate(),e.updateSlides(),e.slideTo(t-n+e.loopedSlides,0,!1)),e.emit("breakpoint",d)}},getBreakpoint:function(e){if(!e)return;let t=!1;const i=Object.keys(e).map(e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:o.innerHeight*t,point:e}}return{value:e,point:e}});i.sort((e,t)=>parseInt(e.value,10)-parseInt(t.value,10));for(let e=0;e<i.length;e+=1){const{point:n,value:s}=i[e];s<=o.innerWidth&&(t=n)}return t||"max"}},checkOverflow:{checkOverflow:function(){const e=this,t=e.params,i=e.isLocked,n=e.slides.length>0&&t.slidesOffsetBefore+t.spaceBetween*(e.slides.length-1)+e.slides[0].offsetWidth*e.slides.length;t.slidesOffsetBefore&&t.slidesOffsetAfter&&n?e.isLocked=n<=e.size:e.isLocked=1===e.snapGrid.length,e.allowSlideNext=!e.isLocked,e.allowSlidePrev=!e.isLocked,i!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock"),i&&i!==e.isLocked&&(e.isEnd=!1,e.navigation.update())}},classes:{addClasses:function(){const{classNames:e,params:t,rtl:i,$el:n}=this,s=[];s.push("initialized"),s.push(t.direction),t.freeMode&&s.push("free-mode"),t.autoHeight&&s.push("autoheight"),i&&s.push("rtl"),t.slidesPerColumn>1&&(s.push("multirow"),"column"===t.slidesPerColumnFill&&s.push("multirow-column")),E.android&&s.push("android"),E.ios&&s.push("ios"),t.cssMode&&s.push("css-mode"),s.forEach(i=>{e.push(t.containerModifierClass+i)}),n.addClass(e.join(" "))},removeClasses:function(){const{$el:e,classNames:t}=this;e.removeClass(t.join(" "))}},images:{loadImage:function(e,t,i,n,s,a){let r;function l(){a&&a()}d(e).parent("picture")[0]||e.complete&&s?l():t?(r=new o.Image,r.onload=l,r.onerror=l,n&&(r.sizes=n),i&&(r.srcset=i),t&&(r.src=t)):l()},preloadImages:function(){const e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(let i=0;i<e.imagesToLoad.length;i+=1){const n=e.imagesToLoad[i];e.loadImage(n,n.currentSrc||n.getAttribute("src"),n.srcset||n.getAttribute("srcset"),n.sizes||n.getAttribute("sizes"),!0,t)}}}},I={};class D extends m{constructor(...e){let t,i;1===e.length&&e[0].constructor&&e[0].constructor===Object?i=e[0]:[t,i]=e,i||(i={}),i=u.extend({},i),t&&!i.el&&(i.el=t),super(i),Object.keys(L).forEach(e=>{Object.keys(L[e]).forEach(t=>{D.prototype[t]||(D.prototype[t]=L[e][t])})});const n=this;void 0===n.modules&&(n.modules={}),Object.keys(n.modules).forEach(e=>{const t=n.modules[e];if(t.params){const e=Object.keys(t.params)[0],n=t.params[e];if("object"!=typeof n||null===n)return;if(!(e in i)||!("enabled"in n))return;!0===i[e]&&(i[e]={enabled:!0}),"object"!=typeof i[e]||"enabled"in i[e]||(i[e].enabled=!0),i[e]||(i[e]={enabled:!1})}});const s=u.extend({},P);n.useModulesParams(s),n.params=u.extend({},s,I,i),n.originalParams=u.extend({},n.params),n.passedParams=u.extend({},i),n.$=d;const a=d(n.params.el);if(t=a[0],!t)return;if(a.length>1){const e=[];return a.each((t,n)=>{const s=u.extend({},i,{el:n});e.push(new D(s))}),e}let r;return t.swiper=n,a.data("swiper",n),t&&t.shadowRoot&&t.shadowRoot.querySelector?(r=d(t.shadowRoot.querySelector("."+n.params.wrapperClass)),r.children=e=>a.children(e)):r=a.children("."+n.params.wrapperClass),u.extend(n,{$el:a,el:t,$wrapperEl:r,wrapperEl:r[0],classNames:[],slides:d(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===n.params.direction,isVertical:()=>"vertical"===n.params.direction,rtl:"rtl"===t.dir.toLowerCase()||"rtl"===a.css("direction"),rtlTranslate:"horizontal"===n.params.direction&&("rtl"===t.dir.toLowerCase()||"rtl"===a.css("direction")),wrongRTL:"-webkit-box"===r.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:n.params.allowSlideNext,allowSlidePrev:n.params.allowSlidePrev,touchEvents:function(){const e=["touchstart","touchmove","touchend","touchcancel"];let t=["mousedown","mousemove","mouseup"];return h.pointerEvents&&(t=["pointerdown","pointermove","pointerup"]),n.touchEventsTouch={start:e[0],move:e[1],end:e[2],cancel:e[3]},n.touchEventsDesktop={start:t[0],move:t[1],end:t[2]},h.touch||!n.params.simulateTouch?n.touchEventsTouch:n.touchEventsDesktop}(),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video, label",lastClickTime:u.now(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:n.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),n.useModules(),n.params.init&&n.init(),n}slidesPerViewDynamic(){const{params:e,slides:t,slidesGrid:i,size:n,activeIndex:s}=this;let a=1;if(e.centeredSlides){let e,i=t[s].swiperSlideSize;for(let r=s+1;r<t.length;r+=1)t[r]&&!e&&(i+=t[r].swiperSlideSize,a+=1,i>n&&(e=!0));for(let r=s-1;r>=0;r-=1)t[r]&&!e&&(i+=t[r].swiperSlideSize,a+=1,i>n&&(e=!0))}else for(let e=s+1;e<t.length;e+=1)i[e]-i[s]<n&&(a+=1);return a}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:i}=e;function n(){const t=e.rtlTranslate?-1*e.translate:e.translate,i=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(i),e.updateActiveIndex(),e.updateSlidesClasses()}let s;i.breakpoints&&e.setBreakpoint(),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.params.freeMode?(n(),e.params.autoHeight&&e.updateAutoHeight()):(s=("auto"===e.params.slidesPerView||e.params.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0),s||n()),i.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t=!0){const i=this,n=i.params.direction;return e||(e="horizontal"===n?"vertical":"horizontal"),e===n||"horizontal"!==e&&"vertical"!==e||(i.$el.removeClass(`${i.params.containerModifierClass}${n}`).addClass(`${i.params.containerModifierClass}${e}`),i.params.direction=e,i.slides.each((t,i)=>{"vertical"===e?i.style.width="":i.style.height=""}),i.emit("changeDirection"),t&&i.update()),i}init(){const e=this;e.initialized||(e.emit("beforeInit"),e.params.breakpoints&&e.setBreakpoint(),e.addClasses(),e.params.loop&&e.loopCreate(),e.updateSize(),e.updateSlides(),e.params.watchOverflow&&e.checkOverflow(),e.params.grabCursor&&e.setGrabCursor(),e.params.preloadImages&&e.preloadImages(),e.params.loop?e.slideTo(e.params.initialSlide+e.loopedSlides,0,e.params.runCallbacksOnInit):e.slideTo(e.params.initialSlide,0,e.params.runCallbacksOnInit),e.attachEvents(),e.initialized=!0,e.emit("init"))}destroy(e=!0,t=!0){const i=this,{params:n,$el:s,$wrapperEl:a,slides:r}=i;return void 0===i.params||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),n.loop&&i.loopDestroy(),t&&(i.removeClasses(),s.removeAttr("style"),a.removeAttr("style"),r&&r.length&&r.removeClass([n.slideVisibleClass,n.slideActiveClass,n.slideNextClass,n.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")),i.emit("destroy"),Object.keys(i.eventsListeners).forEach(e=>{i.off(e)}),!1!==e&&(i.$el[0].swiper=null,i.$el.data("swiper",null),u.deleteProps(i)),i.destroyed=!0),null}static extendDefaults(e){u.extend(I,e)}static get extendedDefaults(){return I}static get defaults(){return P}static get Class(){return m}static get $(){return d}}var O={name:"device",proto:{device:E},static:{device:E}},B={name:"support",proto:{support:h},static:{support:h}};const G={isEdge:!!o.navigator.userAgent.match(/Edge/g),isSafari:function(){const e=o.navigator.userAgent.toLowerCase();return e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0}(),isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(o.navigator.userAgent)};var Y={name:"browser",proto:{browser:G},static:{browser:G}},N={name:"resize",create(){const e=this;u.extend(e,{resize:{resizeHandler(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init(){o.addEventListener("resize",this.resize.resizeHandler),o.addEventListener("orientationchange",this.resize.orientationChangeHandler)},destroy(){o.removeEventListener("resize",this.resize.resizeHandler),o.removeEventListener("orientationchange",this.resize.orientationChangeHandler)}}};const X={func:o.MutationObserver||o.WebkitMutationObserver,attach(e,t={}){const i=this,n=new(0,X.func)(e=>{if(1===e.length)return void i.emit("observerUpdate",e[0]);const t=function(){i.emit("observerUpdate",e[0])};o.requestAnimationFrame?o.requestAnimationFrame(t):o.setTimeout(t,0)});n.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),i.observer.observers.push(n)},init(){const e=this;if(h.observer&&e.params.observer){if(e.params.observeParents){const t=e.$el.parents();for(let i=0;i<t.length;i+=1)e.observer.attach(t[i])}e.observer.attach(e.$el[0],{childList:e.params.observeSlideChildren}),e.observer.attach(e.$wrapperEl[0],{attributes:!1})}},destroy(){this.observer.observers.forEach(e=>{e.disconnect()}),this.observer.observers=[]}};var H={name:"observer",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create(){u.extend(this,{observer:{init:X.init.bind(this),attach:X.attach.bind(this),destroy:X.destroy.bind(this),observers:[]}})},on:{init(){this.observer.init()},destroy(){this.observer.destroy()}}};const V={update(e){const t=this,{slidesPerView:i,slidesPerGroup:n,centeredSlides:s}=t.params,{addSlidesBefore:a,addSlidesAfter:r}=t.params.virtual,{from:o,to:l,slides:d,slidesGrid:p,renderSlide:c,offset:h}=t.virtual;t.updateActiveIndex();const m=t.activeIndex||0;let f,g,b;f=t.rtlTranslate?"right":t.isHorizontal()?"left":"top",s?(g=Math.floor(i/2)+n+a,b=Math.floor(i/2)+n+r):(g=i+(n-1)+a,b=n+r);const w=Math.max((m||0)-b,0),v=Math.min((m||0)+g,d.length-1),x=(t.slidesGrid[w]||0)-(t.slidesGrid[0]||0);function y(){t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.lazy&&t.params.lazy.enabled&&t.lazy.load()}if(u.extend(t.virtual,{from:w,to:v,offset:x,slidesGrid:t.slidesGrid}),o===w&&l===v&&!e)return t.slidesGrid!==p&&x!==h&&t.slides.css(f,x+"px"),void t.updateProgress();if(t.params.virtual.renderExternal)return t.params.virtual.renderExternal.call(t,{offset:x,from:w,to:v,slides:function(){const e=[];for(let t=w;t<=v;t+=1)e.push(d[t]);return e}()}),void y();const E=[],T=[];if(e)t.$wrapperEl.find("."+t.params.slideClass).remove();else for(let e=o;e<=l;e+=1)(e<w||e>v)&&t.$wrapperEl.find(`.${t.params.slideClass}[data-swiper-slide-index="${e}"]`).remove();for(let t=0;t<d.length;t+=1)t>=w&&t<=v&&(void 0===l||e?T.push(t):(t>l&&T.push(t),t<o&&E.push(t)));T.forEach(e=>{t.$wrapperEl.append(c(d[e],e))}),E.sort((e,t)=>t-e).forEach(e=>{t.$wrapperEl.prepend(c(d[e],e))}),t.$wrapperEl.children(".swiper-slide").css(f,x+"px"),y()},renderSlide(e,t){const i=this,n=i.params.virtual;if(n.cache&&i.virtual.cache[t])return i.virtual.cache[t];const s=n.renderSlide?d(n.renderSlide.call(i,e,t)):d(`<div class="${i.params.slideClass}" data-swiper-slide-index="${t}">${e}</div>`);return s.attr("data-swiper-slide-index")||s.attr("data-swiper-slide-index",t),n.cache&&(i.virtual.cache[t]=s),s},appendSlide(e){const t=this;if("object"==typeof e&&"length"in e)for(let i=0;i<e.length;i+=1)e[i]&&t.virtual.slides.push(e[i]);else t.virtual.slides.push(e);t.virtual.update(!0)},prependSlide(e){const t=this,i=t.activeIndex;let n=i+1,s=1;if(Array.isArray(e)){for(let i=0;i<e.length;i+=1)e[i]&&t.virtual.slides.unshift(e[i]);n=i+e.length,s=e.length}else t.virtual.slides.unshift(e);if(t.params.virtual.cache){const e=t.virtual.cache,i={};Object.keys(e).forEach(t=>{const n=e[t],a=n.attr("data-swiper-slide-index");a&&n.attr("data-swiper-slide-index",parseInt(a,10)+1),i[parseInt(t,10)+s]=n}),t.virtual.cache=i}t.virtual.update(!0),t.slideTo(n,0)},removeSlide(e){const t=this;if(null==e)return;let i=t.activeIndex;if(Array.isArray(e))for(let n=e.length-1;n>=0;n-=1)t.virtual.slides.splice(e[n],1),t.params.virtual.cache&&delete t.virtual.cache[e[n]],e[n]<i&&(i-=1),i=Math.max(i,0);else t.virtual.slides.splice(e,1),t.params.virtual.cache&&delete t.virtual.cache[e],e<i&&(i-=1),i=Math.max(i,0);t.virtual.update(!0),t.slideTo(i,0)},removeAllSlides(){const e=this;e.virtual.slides=[],e.params.virtual.cache&&(e.virtual.cache={}),e.virtual.update(!0),e.slideTo(0,0)}};var j={name:"virtual",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,addSlidesBefore:0,addSlidesAfter:0}},create(){u.extend(this,{virtual:{update:V.update.bind(this),appendSlide:V.appendSlide.bind(this),prependSlide:V.prependSlide.bind(this),removeSlide:V.removeSlide.bind(this),removeAllSlides:V.removeAllSlides.bind(this),renderSlide:V.renderSlide.bind(this),slides:this.params.virtual.slides,cache:{}}})},on:{beforeInit(){const e=this;if(!e.params.virtual.enabled)return;e.classNames.push(e.params.containerModifierClass+"virtual");const t={watchSlidesProgress:!0};u.extend(e.params,t),u.extend(e.originalParams,t),e.params.initialSlide||e.virtual.update()},setTranslate(){this.params.virtual.enabled&&this.virtual.update()}}};const F={handle(e){const t=this,{rtlTranslate:i}=t;let n=e;n.originalEvent&&(n=n.originalEvent);const s=n.keyCode||n.charCode;if(!t.allowSlideNext&&(t.isHorizontal()&&39===s||t.isVertical()&&40===s||34===s))return!1;if(!t.allowSlidePrev&&(t.isHorizontal()&&37===s||t.isVertical()&&38===s||33===s))return!1;if(!(n.shiftKey||n.altKey||n.ctrlKey||n.metaKey||a.activeElement&&a.activeElement.nodeName&&("input"===a.activeElement.nodeName.toLowerCase()||"textarea"===a.activeElement.nodeName.toLowerCase()))){if(t.params.keyboard.onlyInViewport&&(33===s||34===s||37===s||39===s||38===s||40===s)){let e=!1;if(t.$el.parents("."+t.params.slideClass).length>0&&0===t.$el.parents("."+t.params.slideActiveClass).length)return;const n=o.innerWidth,s=o.innerHeight,a=t.$el.offset();i&&(a.left-=t.$el[0].scrollLeft);const r=[[a.left,a.top],[a.left+t.width,a.top],[a.left,a.top+t.height],[a.left+t.width,a.top+t.height]];for(let t=0;t<r.length;t+=1){const i=r[t];i[0]>=0&&i[0]<=n&&i[1]>=0&&i[1]<=s&&(e=!0)}if(!e)return}t.isHorizontal()?(33!==s&&34!==s&&37!==s&&39!==s||(n.preventDefault?n.preventDefault():n.returnValue=!1),(34!==s&&39!==s||i)&&(33!==s&&37!==s||!i)||t.slideNext(),(33!==s&&37!==s||i)&&(34!==s&&39!==s||!i)||t.slidePrev()):(33!==s&&34!==s&&38!==s&&40!==s||(n.preventDefault?n.preventDefault():n.returnValue=!1),34!==s&&40!==s||t.slideNext(),33!==s&&38!==s||t.slidePrev()),t.emit("keyPress",s)}},enable(){this.keyboard.enabled||(d(a).on("keydown",this.keyboard.handle),this.keyboard.enabled=!0)},disable(){this.keyboard.enabled&&(d(a).off("keydown",this.keyboard.handle),this.keyboard.enabled=!1)}};var q={name:"keyboard",params:{keyboard:{enabled:!1,onlyInViewport:!0}},create(){u.extend(this,{keyboard:{enabled:!1,enable:F.enable.bind(this),disable:F.disable.bind(this),handle:F.handle.bind(this)}})},on:{init(){const e=this;e.params.keyboard.enabled&&e.keyboard.enable()},destroy(){const e=this;e.keyboard.enabled&&e.keyboard.disable()}}};const R={lastScrollTime:u.now(),lastEventBeforeSnap:void 0,recentWheelEvents:[],event:()=>o.navigator.userAgent.indexOf("firefox")>-1?"DOMMouseScroll":function(){let e="onwheel"in a;if(!e){const t=a.createElement("div");t.setAttribute("onwheel","return;"),e="function"==typeof t.onwheel}return!e&&a.implementation&&a.implementation.hasFeature&&!0!==a.implementation.hasFeature("","")&&(e=a.implementation.hasFeature("Events.wheel","3.0")),e}()?"wheel":"mousewheel",normalize(e){let t=0,i=0,n=0,s=0;return"detail"in e&&(i=e.detail),"wheelDelta"in e&&(i=-e.wheelDelta/120),"wheelDeltaY"in e&&(i=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=i,i=0),n=10*t,s=10*i,"deltaY"in e&&(s=e.deltaY),"deltaX"in e&&(n=e.deltaX),e.shiftKey&&!n&&(n=s,s=0),(n||s)&&e.deltaMode&&(1===e.deltaMode?(n*=40,s*=40):(n*=800,s*=800)),n&&!t&&(t=n<1?-1:1),s&&!i&&(i=s<1?-1:1),{spinX:t,spinY:i,pixelX:n,pixelY:s}},handleMouseEnter(){this.mouseEntered=!0},handleMouseLeave(){this.mouseEntered=!1},handle(e){let t=e;const i=this,n=i.params.mousewheel;i.params.cssMode&&t.preventDefault();let s=i.$el;if("container"!==i.params.mousewheel.eventsTarged&&(s=d(i.params.mousewheel.eventsTarged)),!i.mouseEntered&&!s[0].contains(t.target)&&!n.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);let a=0;const r=i.rtlTranslate?-1:1,o=R.normalize(t);if(n.forceToAxis)if(i.isHorizontal()){if(!(Math.abs(o.pixelX)>Math.abs(o.pixelY)))return!0;a=-o.pixelX*r}else{if(!(Math.abs(o.pixelY)>Math.abs(o.pixelX)))return!0;a=-o.pixelY}else a=Math.abs(o.pixelX)>Math.abs(o.pixelY)?-o.pixelX*r:-o.pixelY;if(0===a)return!0;if(n.invert&&(a=-a),i.params.freeMode){const e={time:u.now(),delta:Math.abs(a),direction:Math.sign(a)},{lastEventBeforeSnap:s}=i.mousewheel,r=s&&e.time<s.time+500&&e.delta<=s.delta&&e.direction===s.direction;if(!r){i.mousewheel.lastEventBeforeSnap=void 0,i.params.loop&&i.loopFix();let s=i.getTranslate()+a*n.sensitivity;const o=i.isBeginning,l=i.isEnd;if(s>=i.minTranslate()&&(s=i.minTranslate()),s<=i.maxTranslate()&&(s=i.maxTranslate()),i.setTransition(0),i.setTranslate(s),i.updateProgress(),i.updateActiveIndex(),i.updateSlidesClasses(),(!o&&i.isBeginning||!l&&i.isEnd)&&i.updateSlidesClasses(),i.params.freeModeSticky){clearTimeout(i.mousewheel.timeout),i.mousewheel.timeout=void 0;const t=i.mousewheel.recentWheelEvents;t.length>=15&&t.shift();const n=t.length?t[t.length-1]:void 0,s=t[0];if(t.push(e),n&&(e.delta>n.delta||e.direction!==n.direction))t.splice(0);else if(t.length>=15&&e.time-s.time<500&&s.delta-e.delta>=1&&e.delta<=6){const n=a>0?.8:.2;i.mousewheel.lastEventBeforeSnap=e,t.splice(0),i.mousewheel.timeout=u.nextTick(()=>{i.slideToClosest(i.params.speed,!0,void 0,n)},0)}i.mousewheel.timeout||(i.mousewheel.timeout=u.nextTick(()=>{i.mousewheel.lastEventBeforeSnap=e,t.splice(0),i.slideToClosest(i.params.speed,!0,void 0,.5)},500))}if(r||i.emit("scroll",t),i.params.autoplay&&i.params.autoplayDisableOnInteraction&&i.autoplay.stop(),s===i.minTranslate()||s===i.maxTranslate())return!0}}else{const t={time:u.now(),delta:Math.abs(a),direction:Math.sign(a),raw:e},n=i.mousewheel.recentWheelEvents;n.length>=2&&n.shift();const s=n.length?n[n.length-1]:void 0;if(n.push(t),s?(t.direction!==s.direction||t.delta>s.delta||t.time>s.time+150)&&i.mousewheel.animateSlider(t):i.mousewheel.animateSlider(t),i.mousewheel.releaseScroll(t))return!0}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},animateSlider(e){const t=this;return e.delta>=6&&u.now()-t.mousewheel.lastScrollTime<60||(e.direction<0?t.isEnd&&!t.params.loop||t.animating||(t.slideNext(),t.emit("scroll",e.raw)):t.isBeginning&&!t.params.loop||t.animating||(t.slidePrev(),t.emit("scroll",e.raw)),t.mousewheel.lastScrollTime=(new o.Date).getTime(),!1)},releaseScroll(e){const t=this,i=t.params.mousewheel;if(e.direction<0){if(t.isEnd&&!t.params.loop&&i.releaseOnEdges)return!0}else if(t.isBeginning&&!t.params.loop&&i.releaseOnEdges)return!0;return!1},enable(){const e=this,t=R.event();if(e.params.cssMode)return e.wrapperEl.removeEventListener(t,e.mousewheel.handle),!0;if(!t)return!1;if(e.mousewheel.enabled)return!1;let i=e.$el;return"container"!==e.params.mousewheel.eventsTarged&&(i=d(e.params.mousewheel.eventsTarged)),i.on("mouseenter",e.mousewheel.handleMouseEnter),i.on("mouseleave",e.mousewheel.handleMouseLeave),i.on(t,e.mousewheel.handle),e.mousewheel.enabled=!0,!0},disable(){const e=this,t=R.event();if(e.params.cssMode)return e.wrapperEl.addEventListener(t,e.mousewheel.handle),!0;if(!t)return!1;if(!e.mousewheel.enabled)return!1;let i=e.$el;return"container"!==e.params.mousewheel.eventsTarged&&(i=d(e.params.mousewheel.eventsTarged)),i.off(t,e.mousewheel.handle),e.mousewheel.enabled=!1,!0}};const W={update(){const e=this,t=e.params.navigation;if(e.params.loop)return;const{$nextEl:i,$prevEl:n}=e.navigation;n&&n.length>0&&(e.isBeginning?n.addClass(t.disabledClass):n.removeClass(t.disabledClass),n[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](t.lockClass)),i&&i.length>0&&(e.isEnd?i.addClass(t.disabledClass):i.removeClass(t.disabledClass),i[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](t.lockClass))},onPrevClick(e){e.preventDefault(),this.isBeginning&&!this.params.loop||this.slidePrev()},onNextClick(e){e.preventDefault(),this.isEnd&&!this.params.loop||this.slideNext()},init(){const e=this,t=e.params.navigation;if(!t.nextEl&&!t.prevEl)return;let i,n;t.nextEl&&(i=d(t.nextEl),e.params.uniqueNavElements&&"string"==typeof t.nextEl&&i.length>1&&1===e.$el.find(t.nextEl).length&&(i=e.$el.find(t.nextEl))),t.prevEl&&(n=d(t.prevEl),e.params.uniqueNavElements&&"string"==typeof t.prevEl&&n.length>1&&1===e.$el.find(t.prevEl).length&&(n=e.$el.find(t.prevEl))),i&&i.length>0&&i.on("click",e.navigation.onNextClick),n&&n.length>0&&n.on("click",e.navigation.onPrevClick),u.extend(e.navigation,{$nextEl:i,nextEl:i&&i[0],$prevEl:n,prevEl:n&&n[0]})},destroy(){const e=this,{$nextEl:t,$prevEl:i}=e.navigation;t&&t.length&&(t.off("click",e.navigation.onNextClick),t.removeClass(e.params.navigation.disabledClass)),i&&i.length&&(i.off("click",e.navigation.onPrevClick),i.removeClass(e.params.navigation.disabledClass))}};const U={update(){const e=this,t=e.rtl,i=e.params.pagination;if(!i.el||!e.pagination.el||!e.pagination.$el||0===e.pagination.$el.length)return;const n=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,s=e.pagination.$el;let a;const r=e.params.loop?Math.ceil((n-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?(a=Math.ceil((e.activeIndex-e.loopedSlides)/e.params.slidesPerGroup),a>n-1-2*e.loopedSlides&&(a-=n-2*e.loopedSlides),a>r-1&&(a-=r),a<0&&"bullets"!==e.params.paginationType&&(a=r+a)):a=void 0!==e.snapIndex?e.snapIndex:e.activeIndex||0,"bullets"===i.type&&e.pagination.bullets&&e.pagination.bullets.length>0){const n=e.pagination.bullets;let r,o,l;if(i.dynamicBullets&&(e.pagination.bulletSize=n.eq(0)[e.isHorizontal()?"outerWidth":"outerHeight"](!0),s.css(e.isHorizontal()?"width":"height",e.pagination.bulletSize*(i.dynamicMainBullets+4)+"px"),i.dynamicMainBullets>1&&void 0!==e.previousIndex&&(e.pagination.dynamicBulletIndex+=a-e.previousIndex,e.pagination.dynamicBulletIndex>i.dynamicMainBullets-1?e.pagination.dynamicBulletIndex=i.dynamicMainBullets-1:e.pagination.dynamicBulletIndex<0&&(e.pagination.dynamicBulletIndex=0)),r=a-e.pagination.dynamicBulletIndex,o=r+(Math.min(n.length,i.dynamicMainBullets)-1),l=(o+r)/2),n.removeClass(`${i.bulletActiveClass} ${i.bulletActiveClass}-next ${i.bulletActiveClass}-next-next ${i.bulletActiveClass}-prev ${i.bulletActiveClass}-prev-prev ${i.bulletActiveClass}-main`),s.length>1)n.each((e,t)=>{const n=d(t),s=n.index();s===a&&n.addClass(i.bulletActiveClass),i.dynamicBullets&&(s>=r&&s<=o&&n.addClass(i.bulletActiveClass+"-main"),s===r&&n.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),s===o&&n.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next"))});else{const t=n.eq(a),s=t.index();if(t.addClass(i.bulletActiveClass),i.dynamicBullets){const t=n.eq(r),a=n.eq(o);for(let e=r;e<=o;e+=1)n.eq(e).addClass(i.bulletActiveClass+"-main");if(e.params.loop)if(s>=n.length-i.dynamicMainBullets){for(let e=i.dynamicMainBullets;e>=0;e-=1)n.eq(n.length-e).addClass(i.bulletActiveClass+"-main");n.eq(n.length-i.dynamicMainBullets-1).addClass(i.bulletActiveClass+"-prev")}else t.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),a.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next");else t.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),a.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next")}}if(i.dynamicBullets){const s=Math.min(n.length,i.dynamicMainBullets+4),a=(e.pagination.bulletSize*s-e.pagination.bulletSize)/2-l*e.pagination.bulletSize,r=t?"right":"left";n.css(e.isHorizontal()?r:"top",a+"px")}}if("fraction"===i.type&&(s.find("."+i.currentClass).text(i.formatFractionCurrent(a+1)),s.find("."+i.totalClass).text(i.formatFractionTotal(r))),"progressbar"===i.type){let t;t=i.progressbarOpposite?e.isHorizontal()?"vertical":"horizontal":e.isHorizontal()?"horizontal":"vertical";const n=(a+1)/r;let o=1,l=1;"horizontal"===t?o=n:l=n,s.find("."+i.progressbarFillClass).transform(`translate3d(0,0,0) scaleX(${o}) scaleY(${l})`).transition(e.params.speed)}"custom"===i.type&&i.renderCustom?(s.html(i.renderCustom(e,a+1,r)),e.emit("paginationRender",e,s[0])):e.emit("paginationUpdate",e,s[0]),s[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](i.lockClass)},render(){const e=this,t=e.params.pagination;if(!t.el||!e.pagination.el||!e.pagination.$el||0===e.pagination.$el.length)return;const i=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,n=e.pagination.$el;let s="";if("bullets"===t.type){const a=e.params.loop?Math.ceil((i-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;for(let i=0;i<a;i+=1)t.renderBullet?s+=t.renderBullet.call(e,i,t.bulletClass):s+=`<${t.bulletElement} class="${t.bulletClass}"></${t.bulletElement}>`;n.html(s),e.pagination.bullets=n.find("."+t.bulletClass)}"fraction"===t.type&&(s=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):`<span class="${t.currentClass}"></span> / <span class="${t.totalClass}"></span>`,n.html(s)),"progressbar"===t.type&&(s=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):`<span class="${t.progressbarFillClass}"></span>`,n.html(s)),"custom"!==t.type&&e.emit("paginationRender",e.pagination.$el[0])},init(){const e=this,t=e.params.pagination;if(!t.el)return;let i=d(t.el);0!==i.length&&(e.params.uniqueNavElements&&"string"==typeof t.el&&i.length>1&&(i=e.$el.find(t.el)),"bullets"===t.type&&t.clickable&&i.addClass(t.clickableClass),i.addClass(t.modifierClass+t.type),"bullets"===t.type&&t.dynamicBullets&&(i.addClass(`${t.modifierClass}${t.type}-dynamic`),e.pagination.dynamicBulletIndex=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&i.addClass(t.progressbarOppositeClass),t.clickable&&i.on("click","."+t.bulletClass,(function(t){t.preventDefault();let i=d(this).index()*e.params.slidesPerGroup;e.params.loop&&(i+=e.loopedSlides),e.slideTo(i)})),u.extend(e.pagination,{$el:i,el:i[0]}))},destroy(){const e=this.params.pagination;if(!e.el||!this.pagination.el||!this.pagination.$el||0===this.pagination.$el.length)return;const t=this.pagination.$el;t.removeClass(e.hiddenClass),t.removeClass(e.modifierClass+e.type),this.pagination.bullets&&this.pagination.bullets.removeClass(e.bulletActiveClass),e.clickable&&t.off("click","."+e.bulletClass)}};const Q={setTranslate(){const e=this;if(!e.params.scrollbar.el||!e.scrollbar.el)return;const{scrollbar:t,rtlTranslate:i,progress:n}=e,{dragSize:s,trackSize:a,$dragEl:r,$el:o}=t,l=e.params.scrollbar;let d=s,p=(a-s)*n;i?(p=-p,p>0?(d=s-p,p=0):-p+s>a&&(d=a+p)):p<0?(d=s+p,p=0):p+s>a&&(d=a-p),e.isHorizontal()?(r.transform(`translate3d(${p}px, 0, 0)`),r[0].style.width=d+"px"):(r.transform(`translate3d(0px, ${p}px, 0)`),r[0].style.height=d+"px"),l.hide&&(clearTimeout(e.scrollbar.timeout),o[0].style.opacity=1,e.scrollbar.timeout=setTimeout(()=>{o[0].style.opacity=0,o.transition(400)},1e3))},setTransition(e){this.params.scrollbar.el&&this.scrollbar.el&&this.scrollbar.$dragEl.transition(e)},updateSize(){const e=this;if(!e.params.scrollbar.el||!e.scrollbar.el)return;const{scrollbar:t}=e,{$dragEl:i,$el:n}=t;i[0].style.width="",i[0].style.height="";const s=e.isHorizontal()?n[0].offsetWidth:n[0].offsetHeight,a=e.size/e.virtualSize,r=a*(s/e.size);let o;o="auto"===e.params.scrollbar.dragSize?s*a:parseInt(e.params.scrollbar.dragSize,10),e.isHorizontal()?i[0].style.width=o+"px":i[0].style.height=o+"px",n[0].style.display=a>=1?"none":"",e.params.scrollbar.hide&&(n[0].style.opacity=0),u.extend(t,{trackSize:s,divider:a,moveDivider:r,dragSize:o}),t.$el[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](e.params.scrollbar.lockClass)},getPointerPosition(e){return this.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientX:e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientY:e.clientY},setDragPosition(e){const{scrollbar:t,rtlTranslate:i}=this,{$el:n,dragSize:s,trackSize:a,dragStartPos:r}=t;let o;o=(t.getPointerPosition(e)-n.offset()[this.isHorizontal()?"left":"top"]-(null!==r?r:s/2))/(a-s),o=Math.max(Math.min(o,1),0),i&&(o=1-o);const l=this.minTranslate()+(this.maxTranslate()-this.minTranslate())*o;this.updateProgress(l),this.setTranslate(l),this.updateActiveIndex(),this.updateSlidesClasses()},onDragStart(e){const t=this,i=t.params.scrollbar,{scrollbar:n,$wrapperEl:s}=t,{$el:a,$dragEl:r}=n;t.scrollbar.isTouched=!0,t.scrollbar.dragStartPos=e.target===r[0]||e.target===r?n.getPointerPosition(e)-e.target.getBoundingClientRect()[t.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),s.transition(100),r.transition(100),n.setDragPosition(e),clearTimeout(t.scrollbar.dragTimeout),a.transition(0),i.hide&&a.css("opacity",1),t.params.cssMode&&t.$wrapperEl.css("scroll-snap-type","none"),t.emit("scrollbarDragStart",e)},onDragMove(e){const{scrollbar:t,$wrapperEl:i}=this,{$el:n,$dragEl:s}=t;this.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),i.transition(0),n.transition(0),s.transition(0),this.emit("scrollbarDragMove",e))},onDragEnd(e){const t=this,i=t.params.scrollbar,{scrollbar:n,$wrapperEl:s}=t,{$el:a}=n;t.scrollbar.isTouched&&(t.scrollbar.isTouched=!1,t.params.cssMode&&(t.$wrapperEl.css("scroll-snap-type",""),s.transition("")),i.hide&&(clearTimeout(t.scrollbar.dragTimeout),t.scrollbar.dragTimeout=u.nextTick(()=>{a.css("opacity",0),a.transition(400)},1e3)),t.emit("scrollbarDragEnd",e),i.snapOnRelease&&t.slideToClosest())},enableDraggable(){const e=this;if(!e.params.scrollbar.el)return;const{scrollbar:t,touchEventsTouch:i,touchEventsDesktop:n,params:s}=e,r=t.$el[0],o=!(!h.passiveListener||!s.passiveListeners)&&{passive:!1,capture:!1},l=!(!h.passiveListener||!s.passiveListeners)&&{passive:!0,capture:!1};h.touch?(r.addEventListener(i.start,e.scrollbar.onDragStart,o),r.addEventListener(i.move,e.scrollbar.onDragMove,o),r.addEventListener(i.end,e.scrollbar.onDragEnd,l)):(r.addEventListener(n.start,e.scrollbar.onDragStart,o),a.addEventListener(n.move,e.scrollbar.onDragMove,o),a.addEventListener(n.end,e.scrollbar.onDragEnd,l))},disableDraggable(){const e=this;if(!e.params.scrollbar.el)return;const{scrollbar:t,touchEventsTouch:i,touchEventsDesktop:n,params:s}=e,r=t.$el[0],o=!(!h.passiveListener||!s.passiveListeners)&&{passive:!1,capture:!1},l=!(!h.passiveListener||!s.passiveListeners)&&{passive:!0,capture:!1};h.touch?(r.removeEventListener(i.start,e.scrollbar.onDragStart,o),r.removeEventListener(i.move,e.scrollbar.onDragMove,o),r.removeEventListener(i.end,e.scrollbar.onDragEnd,l)):(r.removeEventListener(n.start,e.scrollbar.onDragStart,o),a.removeEventListener(n.move,e.scrollbar.onDragMove,o),a.removeEventListener(n.end,e.scrollbar.onDragEnd,l))},init(){const e=this;if(!e.params.scrollbar.el)return;const{scrollbar:t,$el:i}=e,n=e.params.scrollbar;let s=d(n.el);e.params.uniqueNavElements&&"string"==typeof n.el&&s.length>1&&1===i.find(n.el).length&&(s=i.find(n.el));let a=s.find("."+e.params.scrollbar.dragClass);0===a.length&&(a=d(`<div class="${e.params.scrollbar.dragClass}"></div>`),s.append(a)),u.extend(t,{$el:s,el:s[0],$dragEl:a,dragEl:a[0]}),n.draggable&&t.enableDraggable()},destroy(){this.scrollbar.disableDraggable()}};const K={setTransform(e,t){const{rtl:i}=this,n=d(e),s=i?-1:1,a=n.attr("data-swiper-parallax")||"0";let r=n.attr("data-swiper-parallax-x"),o=n.attr("data-swiper-parallax-y");const l=n.attr("data-swiper-parallax-scale"),p=n.attr("data-swiper-parallax-opacity");if(r||o?(r=r||"0",o=o||"0"):this.isHorizontal()?(r=a,o="0"):(o=a,r="0"),r=r.indexOf("%")>=0?parseInt(r,10)*t*s+"%":r*t*s+"px",o=o.indexOf("%")>=0?parseInt(o,10)*t+"%":o*t+"px",null!=p){const e=p-(p-1)*(1-Math.abs(t));n[0].style.opacity=e}if(null==l)n.transform(`translate3d(${r}, ${o}, 0px)`);else{const e=l-(l-1)*(1-Math.abs(t));n.transform(`translate3d(${r}, ${o}, 0px) scale(${e})`)}},setTranslate(){const e=this,{$el:t,slides:i,progress:n,snapGrid:s}=e;t.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((t,i)=>{e.parallax.setTransform(i,n)}),i.each((t,i)=>{let a=i.progress;e.params.slidesPerGroup>1&&"auto"!==e.params.slidesPerView&&(a+=Math.ceil(t/2)-n*(s.length-1)),a=Math.min(Math.max(a,-1),1),d(i).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((t,i)=>{e.parallax.setTransform(i,a)})})},setTransition(e=this.params.speed){const{$el:t}=this;t.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((t,i)=>{const n=d(i);let s=parseInt(n.attr("data-swiper-parallax-duration"),10)||e;0===e&&(s=0),n.transition(s)})}};const Z={getDistanceBetweenTouches(e){if(e.targetTouches.length<2)return 1;const t=e.targetTouches[0].pageX,i=e.targetTouches[0].pageY,n=e.targetTouches[1].pageX,s=e.targetTouches[1].pageY;return Math.sqrt((n-t)**2+(s-i)**2)},onGestureStart(e){const t=this,i=t.params.zoom,n=t.zoom,{gesture:s}=n;if(n.fakeGestureTouched=!1,n.fakeGestureMoved=!1,!h.gestures){if("touchstart"!==e.type||"touchstart"===e.type&&e.targetTouches.length<2)return;n.fakeGestureTouched=!0,s.scaleStart=Z.getDistanceBetweenTouches(e)}s.$slideEl&&s.$slideEl.length||(s.$slideEl=d(e.target).closest("."+t.params.slideClass),0===s.$slideEl.length&&(s.$slideEl=t.slides.eq(t.activeIndex)),s.$imageEl=s.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),s.$imageWrapEl=s.$imageEl.parent("."+i.containerClass),s.maxRatio=s.$imageWrapEl.attr("data-swiper-zoom")||i.maxRatio,0!==s.$imageWrapEl.length)?(s.$imageEl&&s.$imageEl.transition(0),t.zoom.isScaling=!0):s.$imageEl=void 0},onGestureChange(e){const t=this.params.zoom,i=this.zoom,{gesture:n}=i;if(!h.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;i.fakeGestureMoved=!0,n.scaleMove=Z.getDistanceBetweenTouches(e)}n.$imageEl&&0!==n.$imageEl.length&&(i.scale=h.gestures?e.scale*i.currentScale:n.scaleMove/n.scaleStart*i.currentScale,i.scale>n.maxRatio&&(i.scale=n.maxRatio-1+(i.scale-n.maxRatio+1)**.5),i.scale<t.minRatio&&(i.scale=t.minRatio+1-(t.minRatio-i.scale+1)**.5),n.$imageEl.transform(`translate3d(0,0,0) scale(${i.scale})`))},onGestureEnd(e){const t=this.params.zoom,i=this.zoom,{gesture:n}=i;if(!h.gestures){if(!i.fakeGestureTouched||!i.fakeGestureMoved)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!E.android)return;i.fakeGestureTouched=!1,i.fakeGestureMoved=!1}n.$imageEl&&0!==n.$imageEl.length&&(i.scale=Math.max(Math.min(i.scale,n.maxRatio),t.minRatio),n.$imageEl.transition(this.params.speed).transform(`translate3d(0,0,0) scale(${i.scale})`),i.currentScale=i.scale,i.isScaling=!1,1===i.scale&&(n.$slideEl=void 0))},onTouchStart(e){const t=this.zoom,{gesture:i,image:n}=t;i.$imageEl&&0!==i.$imageEl.length&&(n.isTouched||(E.android&&e.cancelable&&e.preventDefault(),n.isTouched=!0,n.touchesStart.x="touchstart"===e.type?e.targetTouches[0].pageX:e.pageX,n.touchesStart.y="touchstart"===e.type?e.targetTouches[0].pageY:e.pageY))},onTouchMove(e){const t=this,i=t.zoom,{gesture:n,image:s,velocity:a}=i;if(!n.$imageEl||0===n.$imageEl.length)return;if(t.allowClick=!1,!s.isTouched||!n.$slideEl)return;s.isMoved||(s.width=n.$imageEl[0].offsetWidth,s.height=n.$imageEl[0].offsetHeight,s.startX=u.getTranslate(n.$imageWrapEl[0],"x")||0,s.startY=u.getTranslate(n.$imageWrapEl[0],"y")||0,n.slideWidth=n.$slideEl[0].offsetWidth,n.slideHeight=n.$slideEl[0].offsetHeight,n.$imageWrapEl.transition(0),t.rtl&&(s.startX=-s.startX,s.startY=-s.startY));const r=s.width*i.scale,o=s.height*i.scale;if(!(r<n.slideWidth&&o<n.slideHeight)){if(s.minX=Math.min(n.slideWidth/2-r/2,0),s.maxX=-s.minX,s.minY=Math.min(n.slideHeight/2-o/2,0),s.maxY=-s.minY,s.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,s.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!s.isMoved&&!i.isScaling){if(t.isHorizontal()&&(Math.floor(s.minX)===Math.floor(s.startX)&&s.touchesCurrent.x<s.touchesStart.x||Math.floor(s.maxX)===Math.floor(s.startX)&&s.touchesCurrent.x>s.touchesStart.x))return void(s.isTouched=!1);if(!t.isHorizontal()&&(Math.floor(s.minY)===Math.floor(s.startY)&&s.touchesCurrent.y<s.touchesStart.y||Math.floor(s.maxY)===Math.floor(s.startY)&&s.touchesCurrent.y>s.touchesStart.y))return void(s.isTouched=!1)}e.cancelable&&e.preventDefault(),e.stopPropagation(),s.isMoved=!0,s.currentX=s.touchesCurrent.x-s.touchesStart.x+s.startX,s.currentY=s.touchesCurrent.y-s.touchesStart.y+s.startY,s.currentX<s.minX&&(s.currentX=s.minX+1-(s.minX-s.currentX+1)**.8),s.currentX>s.maxX&&(s.currentX=s.maxX-1+(s.currentX-s.maxX+1)**.8),s.currentY<s.minY&&(s.currentY=s.minY+1-(s.minY-s.currentY+1)**.8),s.currentY>s.maxY&&(s.currentY=s.maxY-1+(s.currentY-s.maxY+1)**.8),a.prevPositionX||(a.prevPositionX=s.touchesCurrent.x),a.prevPositionY||(a.prevPositionY=s.touchesCurrent.y),a.prevTime||(a.prevTime=Date.now()),a.x=(s.touchesCurrent.x-a.prevPositionX)/(Date.now()-a.prevTime)/2,a.y=(s.touchesCurrent.y-a.prevPositionY)/(Date.now()-a.prevTime)/2,Math.abs(s.touchesCurrent.x-a.prevPositionX)<2&&(a.x=0),Math.abs(s.touchesCurrent.y-a.prevPositionY)<2&&(a.y=0),a.prevPositionX=s.touchesCurrent.x,a.prevPositionY=s.touchesCurrent.y,a.prevTime=Date.now(),n.$imageWrapEl.transform(`translate3d(${s.currentX}px, ${s.currentY}px,0)`)}},onTouchEnd(){const e=this.zoom,{gesture:t,image:i,velocity:n}=e;if(!t.$imageEl||0===t.$imageEl.length)return;if(!i.isTouched||!i.isMoved)return i.isTouched=!1,void(i.isMoved=!1);i.isTouched=!1,i.isMoved=!1;let s=300,a=300;const r=n.x*s,o=i.currentX+r,l=n.y*a,d=i.currentY+l;0!==n.x&&(s=Math.abs((o-i.currentX)/n.x)),0!==n.y&&(a=Math.abs((d-i.currentY)/n.y));const p=Math.max(s,a);i.currentX=o,i.currentY=d;const c=i.width*e.scale,u=i.height*e.scale;i.minX=Math.min(t.slideWidth/2-c/2,0),i.maxX=-i.minX,i.minY=Math.min(t.slideHeight/2-u/2,0),i.maxY=-i.minY,i.currentX=Math.max(Math.min(i.currentX,i.maxX),i.minX),i.currentY=Math.max(Math.min(i.currentY,i.maxY),i.minY),t.$imageWrapEl.transition(p).transform(`translate3d(${i.currentX}px, ${i.currentY}px,0)`)},onTransitionEnd(){const e=this.zoom,{gesture:t}=e;t.$slideEl&&this.previousIndex!==this.activeIndex&&(t.$imageEl&&t.$imageEl.transform("translate3d(0,0,0) scale(1)"),t.$imageWrapEl&&t.$imageWrapEl.transform("translate3d(0,0,0)"),e.scale=1,e.currentScale=1,t.$slideEl=void 0,t.$imageEl=void 0,t.$imageWrapEl=void 0)},toggle(e){const t=this.zoom;t.scale&&1!==t.scale?t.out():t.in(e)},in(e){const t=this,i=t.zoom,n=t.params.zoom,{gesture:s,image:a}=i;if(s.$slideEl||(t.params.virtual&&t.params.virtual.enabled&&t.virtual?s.$slideEl=t.$wrapperEl.children("."+t.params.slideActiveClass):s.$slideEl=t.slides.eq(t.activeIndex),s.$imageEl=s.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),s.$imageWrapEl=s.$imageEl.parent("."+n.containerClass)),!s.$imageEl||0===s.$imageEl.length)return;let r,o,l,d,p,c,u,h,m,f,g,b,w,v,x,y,E,T;s.$slideEl.addClass(""+n.zoomedSlideClass),void 0===a.touchesStart.x&&e?(r="touchend"===e.type?e.changedTouches[0].pageX:e.pageX,o="touchend"===e.type?e.changedTouches[0].pageY:e.pageY):(r=a.touchesStart.x,o=a.touchesStart.y),i.scale=s.$imageWrapEl.attr("data-swiper-zoom")||n.maxRatio,i.currentScale=s.$imageWrapEl.attr("data-swiper-zoom")||n.maxRatio,e?(E=s.$slideEl[0].offsetWidth,T=s.$slideEl[0].offsetHeight,l=s.$slideEl.offset().left,d=s.$slideEl.offset().top,p=l+E/2-r,c=d+T/2-o,m=s.$imageEl[0].offsetWidth,f=s.$imageEl[0].offsetHeight,g=m*i.scale,b=f*i.scale,w=Math.min(E/2-g/2,0),v=Math.min(T/2-b/2,0),x=-w,y=-v,u=p*i.scale,h=c*i.scale,u<w&&(u=w),u>x&&(u=x),h<v&&(h=v),h>y&&(h=y)):(u=0,h=0),s.$imageWrapEl.transition(300).transform(`translate3d(${u}px, ${h}px,0)`),s.$imageEl.transition(300).transform(`translate3d(0,0,0) scale(${i.scale})`)},out(){const e=this,t=e.zoom,i=e.params.zoom,{gesture:n}=t;n.$slideEl||(e.params.virtual&&e.params.virtual.enabled&&e.virtual?n.$slideEl=e.$wrapperEl.children("."+e.params.slideActiveClass):n.$slideEl=e.slides.eq(e.activeIndex),n.$imageEl=n.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),n.$imageWrapEl=n.$imageEl.parent("."+i.containerClass)),n.$imageEl&&0!==n.$imageEl.length&&(t.scale=1,t.currentScale=1,n.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),n.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),n.$slideEl.removeClass(""+i.zoomedSlideClass),n.$slideEl=void 0)},enable(){const e=this,t=e.zoom;if(t.enabled)return;t.enabled=!0;const i=!("touchstart"!==e.touchEvents.start||!h.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1},n=!h.passiveListener||{passive:!1,capture:!0},s="."+e.params.slideClass;h.gestures?(e.$wrapperEl.on("gesturestart",s,t.onGestureStart,i),e.$wrapperEl.on("gesturechange",s,t.onGestureChange,i),e.$wrapperEl.on("gestureend",s,t.onGestureEnd,i)):"touchstart"===e.touchEvents.start&&(e.$wrapperEl.on(e.touchEvents.start,s,t.onGestureStart,i),e.$wrapperEl.on(e.touchEvents.move,s,t.onGestureChange,n),e.$wrapperEl.on(e.touchEvents.end,s,t.onGestureEnd,i),e.touchEvents.cancel&&e.$wrapperEl.on(e.touchEvents.cancel,s,t.onGestureEnd,i)),e.$wrapperEl.on(e.touchEvents.move,"."+e.params.zoom.containerClass,t.onTouchMove,n)},disable(){const e=this,t=e.zoom;if(!t.enabled)return;e.zoom.enabled=!1;const i=!("touchstart"!==e.touchEvents.start||!h.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1},n=!h.passiveListener||{passive:!1,capture:!0},s="."+e.params.slideClass;h.gestures?(e.$wrapperEl.off("gesturestart",s,t.onGestureStart,i),e.$wrapperEl.off("gesturechange",s,t.onGestureChange,i),e.$wrapperEl.off("gestureend",s,t.onGestureEnd,i)):"touchstart"===e.touchEvents.start&&(e.$wrapperEl.off(e.touchEvents.start,s,t.onGestureStart,i),e.$wrapperEl.off(e.touchEvents.move,s,t.onGestureChange,n),e.$wrapperEl.off(e.touchEvents.end,s,t.onGestureEnd,i),e.touchEvents.cancel&&e.$wrapperEl.off(e.touchEvents.cancel,s,t.onGestureEnd,i)),e.$wrapperEl.off(e.touchEvents.move,"."+e.params.zoom.containerClass,t.onTouchMove,n)}};const J={loadInSlide(e,t=!0){const i=this,n=i.params.lazy;if(void 0===e)return;if(0===i.slides.length)return;const s=i.virtual&&i.params.virtual.enabled?i.$wrapperEl.children(`.${i.params.slideClass}[data-swiper-slide-index="${e}"]`):i.slides.eq(e);let a=s.find(`.${n.elementClass}:not(.${n.loadedClass}):not(.${n.loadingClass})`);!s.hasClass(n.elementClass)||s.hasClass(n.loadedClass)||s.hasClass(n.loadingClass)||(a=a.add(s[0])),0!==a.length&&a.each((e,a)=>{const r=d(a);r.addClass(n.loadingClass);const o=r.attr("data-background"),l=r.attr("data-src"),p=r.attr("data-srcset"),c=r.attr("data-sizes"),u=r.parent("picture");i.loadImage(r[0],l||o,p,c,!1,()=>{if(null!=i&&i&&(!i||i.params)&&!i.destroyed){if(o?(r.css("background-image",`url("${o}")`),r.removeAttr("data-background")):(p&&(r.attr("srcset",p),r.removeAttr("data-srcset")),c&&(r.attr("sizes",c),r.removeAttr("data-sizes")),u.length&&u.children("source").each((e,t)=>{const i=d(t);i.attr("data-srcset")&&(i.attr("srcset",i.attr("data-srcset")),i.removeAttr("data-srcset"))}),l&&(r.attr("src",l),r.removeAttr("data-src"))),r.addClass(n.loadedClass).removeClass(n.loadingClass),s.find("."+n.preloaderClass).remove(),i.params.loop&&t){const e=s.attr("data-swiper-slide-index");if(s.hasClass(i.params.slideDuplicateClass)){const t=i.$wrapperEl.children(`[data-swiper-slide-index="${e}"]:not(.${i.params.slideDuplicateClass})`);i.lazy.loadInSlide(t.index(),!1)}else{const t=i.$wrapperEl.children(`.${i.params.slideDuplicateClass}[data-swiper-slide-index="${e}"]`);i.lazy.loadInSlide(t.index(),!1)}}i.emit("lazyImageReady",s[0],r[0]),i.params.autoHeight&&i.updateAutoHeight()}}),i.emit("lazyImageLoad",s[0],r[0])})},load(){const e=this,{$wrapperEl:t,params:i,slides:n,activeIndex:s}=e,a=e.virtual&&i.virtual.enabled,r=i.lazy;let o=i.slidesPerView;function l(e){if(a){if(t.children(`.${i.slideClass}[data-swiper-slide-index="${e}"]`).length)return!0}else if(n[e])return!0;return!1}function p(e){return a?d(e).attr("data-swiper-slide-index"):d(e).index()}if("auto"===o&&(o=0),e.lazy.initialImageLoaded||(e.lazy.initialImageLoaded=!0),e.params.watchSlidesVisibility)t.children("."+i.slideVisibleClass).each((t,i)=>{const n=a?d(i).attr("data-swiper-slide-index"):d(i).index();e.lazy.loadInSlide(n)});else if(o>1)for(let t=s;t<s+o;t+=1)l(t)&&e.lazy.loadInSlide(t);else e.lazy.loadInSlide(s);if(r.loadPrevNext)if(o>1||r.loadPrevNextAmount&&r.loadPrevNextAmount>1){const t=r.loadPrevNextAmount,i=o,a=Math.min(s+i+Math.max(t,i),n.length),d=Math.max(s-Math.max(i,t),0);for(let t=s+o;t<a;t+=1)l(t)&&e.lazy.loadInSlide(t);for(let t=d;t<s;t+=1)l(t)&&e.lazy.loadInSlide(t)}else{const n=t.children("."+i.slideNextClass);n.length>0&&e.lazy.loadInSlide(p(n));const s=t.children("."+i.slidePrevClass);s.length>0&&e.lazy.loadInSlide(p(s))}}};const _={LinearSpline:function(e,t){const i=function(){let e,t,i;return(n,s)=>{for(t=-1,e=n.length;e-t>1;)i=e+t>>1,n[i]<=s?t=i:e=i;return e}}();let n,s;return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(s=i(this.x,e),n=s-1,(e-this.x[n])*(this.y[s]-this.y[n])/(this.x[s]-this.x[n])+this.y[n]):0},this},getInterpolateFunction(e){const t=this;t.controller.spline||(t.controller.spline=t.params.loop?new _.LinearSpline(t.slidesGrid,e.slidesGrid):new _.LinearSpline(t.snapGrid,e.snapGrid))},setTranslate(e,t){const i=this,n=i.controller.control;let s,a;function r(e){const t=i.rtlTranslate?-i.translate:i.translate;"slide"===i.params.controller.by&&(i.controller.getInterpolateFunction(e),a=-i.controller.spline.interpolate(-t)),a&&"container"!==i.params.controller.by||(s=(e.maxTranslate()-e.minTranslate())/(i.maxTranslate()-i.minTranslate()),a=(t-i.minTranslate())*s+e.minTranslate()),i.params.controller.inverse&&(a=e.maxTranslate()-a),e.updateProgress(a),e.setTranslate(a,i),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(n))for(let e=0;e<n.length;e+=1)n[e]!==t&&n[e]instanceof D&&r(n[e]);else n instanceof D&&t!==n&&r(n)},setTransition(e,t){const i=this,n=i.controller.control;let s;function a(t){t.setTransition(e,i),0!==e&&(t.transitionStart(),t.params.autoHeight&&u.nextTick(()=>{t.updateAutoHeight()}),t.$wrapperEl.transitionEnd(()=>{n&&(t.params.loop&&"slide"===i.params.controller.by&&t.loopFix(),t.transitionEnd())}))}if(Array.isArray(n))for(s=0;s<n.length;s+=1)n[s]!==t&&n[s]instanceof D&&a(n[s]);else n instanceof D&&t!==n&&a(n)}};const ee={makeElFocusable:e=>(e.attr("tabIndex","0"),e),makeElNotFocusable:e=>(e.attr("tabIndex","-1"),e),addElRole:(e,t)=>(e.attr("role",t),e),addElLabel:(e,t)=>(e.attr("aria-label",t),e),disableEl:e=>(e.attr("aria-disabled",!0),e),enableEl:e=>(e.attr("aria-disabled",!1),e),onEnterKey(e){const t=this,i=t.params.a11y;if(13!==e.keyCode)return;const n=d(e.target);t.navigation&&t.navigation.$nextEl&&n.is(t.navigation.$nextEl)&&(t.isEnd&&!t.params.loop||t.slideNext(),t.isEnd?t.a11y.notify(i.lastSlideMessage):t.a11y.notify(i.nextSlideMessage)),t.navigation&&t.navigation.$prevEl&&n.is(t.navigation.$prevEl)&&(t.isBeginning&&!t.params.loop||t.slidePrev(),t.isBeginning?t.a11y.notify(i.firstSlideMessage):t.a11y.notify(i.prevSlideMessage)),t.pagination&&n.is("."+t.params.pagination.bulletClass)&&n[0].click()},notify(e){const t=this.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},updateNavigation(){const e=this;if(e.params.loop||!e.navigation)return;const{$nextEl:t,$prevEl:i}=e.navigation;i&&i.length>0&&(e.isBeginning?(e.a11y.disableEl(i),e.a11y.makeElNotFocusable(i)):(e.a11y.enableEl(i),e.a11y.makeElFocusable(i))),t&&t.length>0&&(e.isEnd?(e.a11y.disableEl(t),e.a11y.makeElNotFocusable(t)):(e.a11y.enableEl(t),e.a11y.makeElFocusable(t)))},updatePagination(){const e=this,t=e.params.a11y;e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.bullets.each((i,n)=>{const s=d(n);e.a11y.makeElFocusable(s),e.a11y.addElRole(s,"button"),e.a11y.addElLabel(s,t.paginationBulletMessage.replace(/\{\{index\}\}/,s.index()+1))})},init(){const e=this;e.$el.append(e.a11y.liveRegion);const t=e.params.a11y;let i,n;e.navigation&&e.navigation.$nextEl&&(i=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(n=e.navigation.$prevEl),i&&(e.a11y.makeElFocusable(i),e.a11y.addElRole(i,"button"),e.a11y.addElLabel(i,t.nextSlideMessage),i.on("keydown",e.a11y.onEnterKey)),n&&(e.a11y.makeElFocusable(n),e.a11y.addElRole(n,"button"),e.a11y.addElLabel(n,t.prevSlideMessage),n.on("keydown",e.a11y.onEnterKey)),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.on("keydown","."+e.params.pagination.bulletClass,e.a11y.onEnterKey)},destroy(){const e=this;let t,i;e.a11y.liveRegion&&e.a11y.liveRegion.length>0&&e.a11y.liveRegion.remove(),e.navigation&&e.navigation.$nextEl&&(t=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(i=e.navigation.$prevEl),t&&t.off("keydown",e.a11y.onEnterKey),i&&i.off("keydown",e.a11y.onEnterKey),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.off("keydown","."+e.params.pagination.bulletClass,e.a11y.onEnterKey)}};const te={init(){const e=this;if(!e.params.history)return;if(!o.history||!o.history.pushState)return e.params.history.enabled=!1,void(e.params.hashNavigation.enabled=!0);const t=e.history;t.initialized=!0,t.paths=te.getPathValues(),(t.paths.key||t.paths.value)&&(t.scrollToSlide(0,t.paths.value,e.params.runCallbacksOnInit),e.params.history.replaceState||o.addEventListener("popstate",e.history.setHistoryPopState))},destroy(){const e=this;e.params.history.replaceState||o.removeEventListener("popstate",e.history.setHistoryPopState)},setHistoryPopState(){this.history.paths=te.getPathValues(),this.history.scrollToSlide(this.params.speed,this.history.paths.value,!1)},getPathValues(){const e=o.location.pathname.slice(1).split("/").filter(e=>""!==e),t=e.length;return{key:e[t-2],value:e[t-1]}},setHistory(e,t){if(!this.history.initialized||!this.params.history.enabled)return;const i=this.slides.eq(t);let n=te.slugify(i.attr("data-history"));o.location.pathname.includes(e)||(n=`${e}/${n}`);const s=o.history.state;s&&s.value===n||(this.params.history.replaceState?o.history.replaceState({value:n},null,n):o.history.pushState({value:n},null,n))},slugify:e=>e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,""),scrollToSlide(e,t,i){const n=this;if(t)for(let s=0,a=n.slides.length;s<a;s+=1){const a=n.slides.eq(s);if(te.slugify(a.attr("data-history"))===t&&!a.hasClass(n.params.slideDuplicateClass)){const t=a.index();n.slideTo(t,e,i)}}else n.slideTo(0,e,i)}};const ie={onHashCange(){const e=this;e.emit("hashChange");const t=a.location.hash.replace("#","");if(t!==e.slides.eq(e.activeIndex).attr("data-hash")){const i=e.$wrapperEl.children(`.${e.params.slideClass}[data-hash="${t}"]`).index();if(void 0===i)return;e.slideTo(i)}},setHash(){const e=this;if(e.hashNavigation.initialized&&e.params.hashNavigation.enabled)if(e.params.hashNavigation.replaceState&&o.history&&o.history.replaceState)o.history.replaceState(null,null,"#"+e.slides.eq(e.activeIndex).attr("data-hash")||""),e.emit("hashSet");else{const t=e.slides.eq(e.activeIndex),i=t.attr("data-hash")||t.attr("data-history");a.location.hash=i||"",e.emit("hashSet")}},init(){const e=this;if(!e.params.hashNavigation.enabled||e.params.history&&e.params.history.enabled)return;e.hashNavigation.initialized=!0;const t=a.location.hash.replace("#","");if(t){const i=0;for(let n=0,s=e.slides.length;n<s;n+=1){const s=e.slides.eq(n);if((s.attr("data-hash")||s.attr("data-history"))===t&&!s.hasClass(e.params.slideDuplicateClass)){const t=s.index();e.slideTo(t,i,e.params.runCallbacksOnInit,!0)}}}e.params.hashNavigation.watchState&&d(o).on("hashchange",e.hashNavigation.onHashCange)},destroy(){const e=this;e.params.hashNavigation.watchState&&d(o).off("hashchange",e.hashNavigation.onHashCange)}};const ne={run(){const e=this,t=e.slides.eq(e.activeIndex);let i=e.params.autoplay.delay;t.attr("data-swiper-autoplay")&&(i=t.attr("data-swiper-autoplay")||e.params.autoplay.delay),clearTimeout(e.autoplay.timeout),e.autoplay.timeout=u.nextTick(()=>{e.params.autoplay.reverseDirection?e.params.loop?(e.loopFix(),e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.isBeginning?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(e.slides.length-1,e.params.speed,!0,!0),e.emit("autoplay")):(e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.params.loop?(e.loopFix(),e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")):e.isEnd?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(0,e.params.speed,!0,!0),e.emit("autoplay")):(e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")),e.params.cssMode&&e.autoplay.running&&e.autoplay.run()},i)},start(){return void 0===this.autoplay.timeout&&(!this.autoplay.running&&(this.autoplay.running=!0,this.emit("autoplayStart"),this.autoplay.run(),!0))},stop(){const e=this;return!!e.autoplay.running&&(void 0!==e.autoplay.timeout&&(e.autoplay.timeout&&(clearTimeout(e.autoplay.timeout),e.autoplay.timeout=void 0),e.autoplay.running=!1,e.emit("autoplayStop"),!0))},pause(e){const t=this;t.autoplay.running&&(t.autoplay.paused||(t.autoplay.timeout&&clearTimeout(t.autoplay.timeout),t.autoplay.paused=!0,0!==e&&t.params.autoplay.waitForTransition?(t.$wrapperEl[0].addEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].addEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd)):(t.autoplay.paused=!1,t.autoplay.run())))}};const se={setTranslate(){const e=this,{slides:t}=e;for(let i=0;i<t.length;i+=1){const t=e.slides.eq(i);let n=-t[0].swiperSlideOffset;e.params.virtualTranslate||(n-=e.translate);let s=0;e.isHorizontal()||(s=n,n=0);const a=e.params.fadeEffect.crossFade?Math.max(1-Math.abs(t[0].progress),0):1+Math.min(Math.max(t[0].progress,-1),0);t.css({opacity:a}).transform(`translate3d(${n}px, ${s}px, 0px)`)}},setTransition(e){const t=this,{slides:i,$wrapperEl:n}=t;if(i.transition(e),t.params.virtualTranslate&&0!==e){let e=!1;i.transitionEnd(()=>{if(e)return;if(!t||t.destroyed)return;e=!0,t.animating=!1;const i=["webkitTransitionEnd","transitionend"];for(let e=0;e<i.length;e+=1)n.trigger(i[e])})}}};const ae={setTranslate(){const{$el:e,$wrapperEl:t,slides:i,width:n,height:s,rtlTranslate:a,size:r}=this,o=this.params.cubeEffect,l=this.isHorizontal(),p=this.virtual&&this.params.virtual.enabled;let c,u=0;o.shadow&&(l?(c=t.find(".swiper-cube-shadow"),0===c.length&&(c=d('<div class="swiper-cube-shadow"></div>'),t.append(c)),c.css({height:n+"px"})):(c=e.find(".swiper-cube-shadow"),0===c.length&&(c=d('<div class="swiper-cube-shadow"></div>'),e.append(c))));for(let e=0;e<i.length;e+=1){const t=i.eq(e);let n=e;p&&(n=parseInt(t.attr("data-swiper-slide-index"),10));let s=90*n,c=Math.floor(s/360);a&&(s=-s,c=Math.floor(-s/360));const h=Math.max(Math.min(t[0].progress,1),-1);let m=0,f=0,g=0;n%4==0?(m=4*-c*r,g=0):(n-1)%4==0?(m=0,g=4*-c*r):(n-2)%4==0?(m=r+4*c*r,g=r):(n-3)%4==0&&(m=-r,g=3*r+4*r*c),a&&(m=-m),l||(f=m,m=0);const b=`rotateX(${l?0:-s}deg) rotateY(${l?s:0}deg) translate3d(${m}px, ${f}px, ${g}px)`;if(h<=1&&h>-1&&(u=90*n+90*h,a&&(u=90*-n-90*h)),t.transform(b),o.slideShadows){let e=l?t.find(".swiper-slide-shadow-left"):t.find(".swiper-slide-shadow-top"),i=l?t.find(".swiper-slide-shadow-right"):t.find(".swiper-slide-shadow-bottom");0===e.length&&(e=d(`<div class="swiper-slide-shadow-${l?"left":"top"}"></div>`),t.append(e)),0===i.length&&(i=d(`<div class="swiper-slide-shadow-${l?"right":"bottom"}"></div>`),t.append(i)),e.length&&(e[0].style.opacity=Math.max(-h,0)),i.length&&(i[0].style.opacity=Math.max(h,0))}}if(t.css({"-webkit-transform-origin":`50% 50% -${r/2}px`,"-moz-transform-origin":`50% 50% -${r/2}px`,"-ms-transform-origin":`50% 50% -${r/2}px`,"transform-origin":`50% 50% -${r/2}px`}),o.shadow)if(l)c.transform(`translate3d(0px, ${n/2+o.shadowOffset}px, ${-n/2}px) rotateX(90deg) rotateZ(0deg) scale(${o.shadowScale})`);else{const e=Math.abs(u)-90*Math.floor(Math.abs(u)/90),t=1.5-(Math.sin(2*e*Math.PI/360)/2+Math.cos(2*e*Math.PI/360)/2),i=o.shadowScale,n=o.shadowScale/t,a=o.shadowOffset;c.transform(`scale3d(${i}, 1, ${n}) translate3d(0px, ${s/2+a}px, ${-s/2/n}px) rotateX(-90deg)`)}const h=G.isSafari||G.isWebView?-r/2:0;t.transform(`translate3d(0px,0,${h}px) rotateX(${this.isHorizontal()?0:u}deg) rotateY(${this.isHorizontal()?-u:0}deg)`)},setTransition(e){const{$el:t,slides:i}=this;i.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),this.params.cubeEffect.shadow&&!this.isHorizontal()&&t.find(".swiper-cube-shadow").transition(e)}};const re={setTranslate(){const e=this,{slides:t,rtlTranslate:i}=e;for(let n=0;n<t.length;n+=1){const s=t.eq(n);let a=s[0].progress;e.params.flipEffect.limitRotation&&(a=Math.max(Math.min(s[0].progress,1),-1));let r=-180*a,o=0,l=-s[0].swiperSlideOffset,p=0;if(e.isHorizontal()?i&&(r=-r):(p=l,l=0,o=-r,r=0),s[0].style.zIndex=-Math.abs(Math.round(a))+t.length,e.params.flipEffect.slideShadows){let t=e.isHorizontal()?s.find(".swiper-slide-shadow-left"):s.find(".swiper-slide-shadow-top"),i=e.isHorizontal()?s.find(".swiper-slide-shadow-right"):s.find(".swiper-slide-shadow-bottom");0===t.length&&(t=d(`<div class="swiper-slide-shadow-${e.isHorizontal()?"left":"top"}"></div>`),s.append(t)),0===i.length&&(i=d(`<div class="swiper-slide-shadow-${e.isHorizontal()?"right":"bottom"}"></div>`),s.append(i)),t.length&&(t[0].style.opacity=Math.max(-a,0)),i.length&&(i[0].style.opacity=Math.max(a,0))}s.transform(`translate3d(${l}px, ${p}px, 0px) rotateX(${o}deg) rotateY(${r}deg)`)}},setTransition(e){const t=this,{slides:i,activeIndex:n,$wrapperEl:s}=t;if(i.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),t.params.virtualTranslate&&0!==e){let e=!1;i.eq(n).transitionEnd((function(){if(e)return;if(!t||t.destroyed)return;e=!0,t.animating=!1;const i=["webkitTransitionEnd","transitionend"];for(let e=0;e<i.length;e+=1)s.trigger(i[e])}))}}};const oe={setTranslate(){const{width:e,height:t,slides:i,$wrapperEl:n,slidesSizesGrid:s}=this,a=this.params.coverflowEffect,r=this.isHorizontal(),o=this.translate,l=r?e/2-o:t/2-o,p=r?a.rotate:-a.rotate,c=a.depth;for(let e=0,t=i.length;e<t;e+=1){const t=i.eq(e),n=s[e],o=(l-t[0].swiperSlideOffset-n/2)/n*a.modifier;let u=r?p*o:0,h=r?0:p*o,m=-c*Math.abs(o),f=a.stretch;"string"==typeof f&&-1!==f.indexOf("%")&&(f=parseFloat(a.stretch)/100*n);let g=r?0:f*o,b=r?f*o:0,w=1-(1-a.scale)*Math.abs(o);Math.abs(b)<.001&&(b=0),Math.abs(g)<.001&&(g=0),Math.abs(m)<.001&&(m=0),Math.abs(u)<.001&&(u=0),Math.abs(h)<.001&&(h=0),Math.abs(w)<.001&&(w=0);const v=`translate3d(${b}px,${g}px,${m}px)  rotateX(${h}deg) rotateY(${u}deg) scale(${w})`;if(t.transform(v),t[0].style.zIndex=1-Math.abs(Math.round(o)),a.slideShadows){let e=r?t.find(".swiper-slide-shadow-left"):t.find(".swiper-slide-shadow-top"),i=r?t.find(".swiper-slide-shadow-right"):t.find(".swiper-slide-shadow-bottom");0===e.length&&(e=d(`<div class="swiper-slide-shadow-${r?"left":"top"}"></div>`),t.append(e)),0===i.length&&(i=d(`<div class="swiper-slide-shadow-${r?"right":"bottom"}"></div>`),t.append(i)),e.length&&(e[0].style.opacity=o>0?o:0),i.length&&(i[0].style.opacity=-o>0?-o:0)}}if(h.pointerEvents||h.prefixedPointerEvents){n[0].style.perspectiveOrigin=l+"px 50%"}},setTransition(e){this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}};const le={init(){const e=this,{thumbs:t}=e.params,i=e.constructor;t.swiper instanceof i?(e.thumbs.swiper=t.swiper,u.extend(e.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),u.extend(e.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1})):u.isObject(t.swiper)&&(e.thumbs.swiper=new i(u.extend({},t.swiper,{watchSlidesVisibility:!0,watchSlidesProgress:!0,slideToClickedSlide:!1})),e.thumbs.swiperCreated=!0),e.thumbs.swiper.$el.addClass(e.params.thumbs.thumbsContainerClass),e.thumbs.swiper.on("tap",e.thumbs.onThumbClick)},onThumbClick(){const e=this,t=e.thumbs.swiper;if(!t)return;const i=t.clickedIndex,n=t.clickedSlide;if(n&&d(n).hasClass(e.params.thumbs.slideThumbActiveClass))return;if(null==i)return;let s;if(s=t.params.loop?parseInt(d(t.clickedSlide).attr("data-swiper-slide-index"),10):i,e.params.loop){let t=e.activeIndex;e.slides.eq(t).hasClass(e.params.slideDuplicateClass)&&(e.loopFix(),e._clientLeft=e.$wrapperEl[0].clientLeft,t=e.activeIndex);const i=e.slides.eq(t).prevAll(`[data-swiper-slide-index="${s}"]`).eq(0).index(),n=e.slides.eq(t).nextAll(`[data-swiper-slide-index="${s}"]`).eq(0).index();s=void 0===i?n:void 0===n?i:n-t<t-i?n:i}e.slideTo(s)},update(e){const t=this,i=t.thumbs.swiper;if(!i)return;const n="auto"===i.params.slidesPerView?i.slidesPerViewDynamic():i.params.slidesPerView,s=t.params.thumbs.autoScrollOffset,a=s&&!i.params.loop;if(t.realIndex!==i.realIndex||a){let r,o,l=i.activeIndex;if(i.params.loop){i.slides.eq(l).hasClass(i.params.slideDuplicateClass)&&(i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft,l=i.activeIndex);const e=i.slides.eq(l).prevAll(`[data-swiper-slide-index="${t.realIndex}"]`).eq(0).index(),n=i.slides.eq(l).nextAll(`[data-swiper-slide-index="${t.realIndex}"]`).eq(0).index();r=void 0===e?n:void 0===n?e:n-l==l-e?l:n-l<l-e?n:e,o=t.activeIndex>t.previousIndex?"next":"prev"}else r=t.realIndex,o=r>t.previousIndex?"next":"prev";a&&(r+="next"===o?s:-1*s),i.visibleSlidesIndexes&&i.visibleSlidesIndexes.indexOf(r)<0&&(i.params.centeredSlides?r=r>l?r-Math.floor(n/2)+1:r+Math.floor(n/2)-1:r>l&&(r=r-n+1),i.slideTo(r,e?0:void 0))}let r=1;const o=t.params.thumbs.slideThumbActiveClass;if(t.params.slidesPerView>1&&!t.params.centeredSlides&&(r=t.params.slidesPerView),t.params.thumbs.multipleActiveThumbs||(r=1),r=Math.floor(r),i.slides.removeClass(o),i.params.loop||i.params.virtual&&i.params.virtual.enabled)for(let e=0;e<r;e+=1)i.$wrapperEl.children(`[data-swiper-slide-index="${t.realIndex+e}"]`).addClass(o);else for(let e=0;e<r;e+=1)i.slides.eq(t.realIndex+e).addClass(o)}};const de=[O,B,Y,N,H,j,q,{name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarged:"container"}},create(){u.extend(this,{mousewheel:{enabled:!1,enable:R.enable.bind(this),disable:R.disable.bind(this),handle:R.handle.bind(this),handleMouseEnter:R.handleMouseEnter.bind(this),handleMouseLeave:R.handleMouseLeave.bind(this),animateSlider:R.animateSlider.bind(this),releaseScroll:R.releaseScroll.bind(this),lastScrollTime:u.now(),lastEventBeforeSnap:void 0,recentWheelEvents:[]}})},on:{init(){const e=this;!e.params.mousewheel.enabled&&e.params.cssMode&&e.mousewheel.disable(),e.params.mousewheel.enabled&&e.mousewheel.enable()},destroy(){const e=this;e.params.cssMode&&e.mousewheel.enable(),e.mousewheel.enabled&&e.mousewheel.disable()}}},{name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create(){u.extend(this,{navigation:{init:W.init.bind(this),update:W.update.bind(this),destroy:W.destroy.bind(this),onNextClick:W.onNextClick.bind(this),onPrevClick:W.onPrevClick.bind(this)}})},on:{init(){this.navigation.init(),this.navigation.update()},toEdge(){this.navigation.update()},fromEdge(){this.navigation.update()},destroy(){this.navigation.destroy()},click(e){const t=this,{$nextEl:i,$prevEl:n}=t.navigation;if(t.params.navigation.hideOnClick&&!d(e.target).is(n)&&!d(e.target).is(i)){let e;i?e=i.hasClass(t.params.navigation.hiddenClass):n&&(e=n.hasClass(t.params.navigation.hiddenClass)),!0===e?t.emit("navigationShow",t):t.emit("navigationHide",t),i&&i.toggleClass(t.params.navigation.hiddenClass),n&&n.toggleClass(t.params.navigation.hiddenClass)}}}},{name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create(){u.extend(this,{pagination:{init:U.init.bind(this),render:U.render.bind(this),update:U.update.bind(this),destroy:U.destroy.bind(this),dynamicBulletIndex:0}})},on:{init(){this.pagination.init(),this.pagination.render(),this.pagination.update()},activeIndexChange(){const e=this;(e.params.loop||void 0===e.snapIndex)&&e.pagination.update()},snapIndexChange(){const e=this;e.params.loop||e.pagination.update()},slidesLengthChange(){const e=this;e.params.loop&&(e.pagination.render(),e.pagination.update())},snapGridLengthChange(){const e=this;e.params.loop||(e.pagination.render(),e.pagination.update())},destroy(){this.pagination.destroy()},click(e){const t=this;if(t.params.pagination.el&&t.params.pagination.hideOnClick&&t.pagination.$el.length>0&&!d(e.target).hasClass(t.params.pagination.bulletClass)){!0===t.pagination.$el.hasClass(t.params.pagination.hiddenClass)?t.emit("paginationShow",t):t.emit("paginationHide",t),t.pagination.$el.toggleClass(t.params.pagination.hiddenClass)}}}},{name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}},create(){u.extend(this,{scrollbar:{init:Q.init.bind(this),destroy:Q.destroy.bind(this),updateSize:Q.updateSize.bind(this),setTranslate:Q.setTranslate.bind(this),setTransition:Q.setTransition.bind(this),enableDraggable:Q.enableDraggable.bind(this),disableDraggable:Q.disableDraggable.bind(this),setDragPosition:Q.setDragPosition.bind(this),getPointerPosition:Q.getPointerPosition.bind(this),onDragStart:Q.onDragStart.bind(this),onDragMove:Q.onDragMove.bind(this),onDragEnd:Q.onDragEnd.bind(this),isTouched:!1,timeout:null,dragTimeout:null}})},on:{init(){this.scrollbar.init(),this.scrollbar.updateSize(),this.scrollbar.setTranslate()},update(){this.scrollbar.updateSize()},resize(){this.scrollbar.updateSize()},observerUpdate(){this.scrollbar.updateSize()},setTranslate(){this.scrollbar.setTranslate()},setTransition(e){this.scrollbar.setTransition(e)},destroy(){this.scrollbar.destroy()}}},{name:"parallax",params:{parallax:{enabled:!1}},create(){u.extend(this,{parallax:{setTransform:K.setTransform.bind(this),setTranslate:K.setTranslate.bind(this),setTransition:K.setTransition.bind(this)}})},on:{beforeInit(){this.params.parallax.enabled&&(this.params.watchSlidesProgress=!0,this.originalParams.watchSlidesProgress=!0)},init(){this.params.parallax.enabled&&this.parallax.setTranslate()},setTranslate(){this.params.parallax.enabled&&this.parallax.setTranslate()},setTransition(e){this.params.parallax.enabled&&this.parallax.setTransition(e)}}},{name:"zoom",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}},create(){const e=this,t={enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}};"onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out".split(" ").forEach(i=>{t[i]=Z[i].bind(e)}),u.extend(e,{zoom:t});let i=1;Object.defineProperty(e.zoom,"scale",{get:()=>i,set(t){if(i!==t){const i=e.zoom.gesture.$imageEl?e.zoom.gesture.$imageEl[0]:void 0,n=e.zoom.gesture.$slideEl?e.zoom.gesture.$slideEl[0]:void 0;e.emit("zoomChange",t,i,n)}i=t}})},on:{init(){const e=this;e.params.zoom.enabled&&e.zoom.enable()},destroy(){this.zoom.disable()},touchStart(e){this.zoom.enabled&&this.zoom.onTouchStart(e)},touchEnd(e){this.zoom.enabled&&this.zoom.onTouchEnd(e)},doubleTap(e){const t=this;t.params.zoom.enabled&&t.zoom.enabled&&t.params.zoom.toggle&&t.zoom.toggle(e)},transitionEnd(){const e=this;e.zoom.enabled&&e.params.zoom.enabled&&e.zoom.onTransitionEnd()},slideChange(){const e=this;e.zoom.enabled&&e.params.zoom.enabled&&e.params.cssMode&&e.zoom.onTransitionEnd()}}},{name:"lazy",params:{lazy:{enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}},create(){u.extend(this,{lazy:{initialImageLoaded:!1,load:J.load.bind(this),loadInSlide:J.loadInSlide.bind(this)}})},on:{beforeInit(){const e=this;e.params.lazy.enabled&&e.params.preloadImages&&(e.params.preloadImages=!1)},init(){const e=this;e.params.lazy.enabled&&!e.params.loop&&0===e.params.initialSlide&&e.lazy.load()},scroll(){const e=this;e.params.freeMode&&!e.params.freeModeSticky&&e.lazy.load()},resize(){const e=this;e.params.lazy.enabled&&e.lazy.load()},scrollbarDragMove(){const e=this;e.params.lazy.enabled&&e.lazy.load()},transitionStart(){const e=this;e.params.lazy.enabled&&(e.params.lazy.loadOnTransitionStart||!e.params.lazy.loadOnTransitionStart&&!e.lazy.initialImageLoaded)&&e.lazy.load()},transitionEnd(){const e=this;e.params.lazy.enabled&&!e.params.lazy.loadOnTransitionStart&&e.lazy.load()},slideChange(){const e=this;e.params.lazy.enabled&&e.params.cssMode&&e.lazy.load()}}},{name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create(){u.extend(this,{controller:{control:this.params.controller.control,getInterpolateFunction:_.getInterpolateFunction.bind(this),setTranslate:_.setTranslate.bind(this),setTransition:_.setTransition.bind(this)}})},on:{update(){const e=this;e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},resize(){const e=this;e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},observerUpdate(){const e=this;e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},setTranslate(e,t){this.controller.control&&this.controller.setTranslate(e,t)},setTransition(e,t){this.controller.control&&this.controller.setTransition(e,t)}}},{name:"a11y",params:{a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}"}},create(){const e=this;u.extend(e,{a11y:{liveRegion:d(`<span class="${e.params.a11y.notificationClass}" aria-live="assertive" aria-atomic="true"></span>`)}}),Object.keys(ee).forEach(t=>{e.a11y[t]=ee[t].bind(e)})},on:{init(){this.params.a11y.enabled&&(this.a11y.init(),this.a11y.updateNavigation())},toEdge(){this.params.a11y.enabled&&this.a11y.updateNavigation()},fromEdge(){this.params.a11y.enabled&&this.a11y.updateNavigation()},paginationUpdate(){this.params.a11y.enabled&&this.a11y.updatePagination()},destroy(){this.params.a11y.enabled&&this.a11y.destroy()}}},{name:"history",params:{history:{enabled:!1,replaceState:!1,key:"slides"}},create(){u.extend(this,{history:{init:te.init.bind(this),setHistory:te.setHistory.bind(this),setHistoryPopState:te.setHistoryPopState.bind(this),scrollToSlide:te.scrollToSlide.bind(this),destroy:te.destroy.bind(this)}})},on:{init(){const e=this;e.params.history.enabled&&e.history.init()},destroy(){const e=this;e.params.history.enabled&&e.history.destroy()},transitionEnd(){const e=this;e.history.initialized&&e.history.setHistory(e.params.history.key,e.activeIndex)},slideChange(){const e=this;e.history.initialized&&e.params.cssMode&&e.history.setHistory(e.params.history.key,e.activeIndex)}}},{name:"hash-navigation",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create(){u.extend(this,{hashNavigation:{initialized:!1,init:ie.init.bind(this),destroy:ie.destroy.bind(this),setHash:ie.setHash.bind(this),onHashCange:ie.onHashCange.bind(this)}})},on:{init(){const e=this;e.params.hashNavigation.enabled&&e.hashNavigation.init()},destroy(){const e=this;e.params.hashNavigation.enabled&&e.hashNavigation.destroy()},transitionEnd(){const e=this;e.hashNavigation.initialized&&e.hashNavigation.setHash()},slideChange(){const e=this;e.hashNavigation.initialized&&e.params.cssMode&&e.hashNavigation.setHash()}}},{name:"autoplay",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create(){const e=this;u.extend(e,{autoplay:{running:!1,paused:!1,run:ne.run.bind(e),start:ne.start.bind(e),stop:ne.stop.bind(e),pause:ne.pause.bind(e),onVisibilityChange(){"hidden"===document.visibilityState&&e.autoplay.running&&e.autoplay.pause(),"visible"===document.visibilityState&&e.autoplay.paused&&(e.autoplay.run(),e.autoplay.paused=!1)},onTransitionEnd(t){e&&!e.destroyed&&e.$wrapperEl&&t.target===this&&(e.$wrapperEl[0].removeEventListener("transitionend",e.autoplay.onTransitionEnd),e.$wrapperEl[0].removeEventListener("webkitTransitionEnd",e.autoplay.onTransitionEnd),e.autoplay.paused=!1,e.autoplay.running?e.autoplay.run():e.autoplay.stop())}}})},on:{init(){const e=this;e.params.autoplay.enabled&&(e.autoplay.start(),document.addEventListener("visibilitychange",e.autoplay.onVisibilityChange))},beforeTransitionStart(e,t){const i=this;i.autoplay.running&&(t||!i.params.autoplay.disableOnInteraction?i.autoplay.pause(e):i.autoplay.stop())},sliderFirstMove(){const e=this;e.autoplay.running&&(e.params.autoplay.disableOnInteraction?e.autoplay.stop():e.autoplay.pause())},touchEnd(){const e=this;e.params.cssMode&&e.autoplay.paused&&!e.params.autoplay.disableOnInteraction&&e.autoplay.run()},destroy(){const e=this;e.autoplay.running&&e.autoplay.stop(),document.removeEventListener("visibilitychange",e.autoplay.onVisibilityChange)}}},{name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create(){u.extend(this,{fadeEffect:{setTranslate:se.setTranslate.bind(this),setTransition:se.setTransition.bind(this)}})},on:{beforeInit(){if("fade"!==this.params.effect)return;this.classNames.push(this.params.containerModifierClass+"fade");const e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};u.extend(this.params,e),u.extend(this.originalParams,e)},setTranslate(){"fade"===this.params.effect&&this.fadeEffect.setTranslate()},setTransition(e){"fade"===this.params.effect&&this.fadeEffect.setTransition(e)}}},{name:"effect-cube",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create(){u.extend(this,{cubeEffect:{setTranslate:ae.setTranslate.bind(this),setTransition:ae.setTransition.bind(this)}})},on:{beforeInit(){if("cube"!==this.params.effect)return;this.classNames.push(this.params.containerModifierClass+"cube"),this.classNames.push(this.params.containerModifierClass+"3d");const e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0};u.extend(this.params,e),u.extend(this.originalParams,e)},setTranslate(){"cube"===this.params.effect&&this.cubeEffect.setTranslate()},setTransition(e){"cube"===this.params.effect&&this.cubeEffect.setTransition(e)}}},{name:"effect-flip",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create(){u.extend(this,{flipEffect:{setTranslate:re.setTranslate.bind(this),setTransition:re.setTransition.bind(this)}})},on:{beforeInit(){if("flip"!==this.params.effect)return;this.classNames.push(this.params.containerModifierClass+"flip"),this.classNames.push(this.params.containerModifierClass+"3d");const e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};u.extend(this.params,e),u.extend(this.originalParams,e)},setTranslate(){"flip"===this.params.effect&&this.flipEffect.setTranslate()},setTransition(e){"flip"===this.params.effect&&this.flipEffect.setTransition(e)}}},{name:"effect-coverflow",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0}},create(){u.extend(this,{coverflowEffect:{setTranslate:oe.setTranslate.bind(this),setTransition:oe.setTransition.bind(this)}})},on:{beforeInit(){"coverflow"===this.params.effect&&(this.classNames.push(this.params.containerModifierClass+"coverflow"),this.classNames.push(this.params.containerModifierClass+"3d"),this.params.watchSlidesProgress=!0,this.originalParams.watchSlidesProgress=!0)},setTranslate(){"coverflow"===this.params.effect&&this.coverflowEffect.setTranslate()},setTransition(e){"coverflow"===this.params.effect&&this.coverflowEffect.setTransition(e)}}},{name:"thumbs",params:{thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-container-thumbs"}},create(){u.extend(this,{thumbs:{swiper:null,init:le.init.bind(this),update:le.update.bind(this),onThumbClick:le.onThumbClick.bind(this)}})},on:{beforeInit(){const{thumbs:e}=this.params;e&&e.swiper&&(this.thumbs.init(),this.thumbs.update(!0))},slideChange(){this.thumbs.swiper&&this.thumbs.update()},update(){this.thumbs.swiper&&this.thumbs.update()},resize(){this.thumbs.swiper&&this.thumbs.update()},observerUpdate(){this.thumbs.swiper&&this.thumbs.update()},setTransition(e){const t=this.thumbs.swiper;t&&t.setTransition(e)},beforeDestroy(){const e=this.thumbs.swiper;e&&this.thumbs.swiperCreated&&e&&e.destroy()}}}];void 0===D.use&&(D.use=D.Class.use,D.installModule=D.Class.installModule),D.use(de);var pe=D,ce=i.p+"images/309451f3924d458cbbf9f89664d747a1.png",ue=i.p+"images/d8c5630d7510965c7200ace700047590.png",he=i.p+"images/c00a7838aff9ae14e1671bc0c54e5938.png",me=i.p+"images/538cfa4f3057156d1b0a98fc750b9e2d.png",fe=i.p+"images/88541ec0a7b246787e25041a77e46fd6.png",ge=i.p+"images/f67587912c1109a3dac37254912ab6e7.png",be=i(2),we=i.p+"images/84a4b2c98d0f976c383b67bfeb79dbaa.png",ve=i.p+"images/a178c94e0bbac64b4724e991f5ccf232.png",xe=i.p+"images/82024b1def2196139dc798aefdd543b4.png",ye=i.p+"images/a77818113a4699dfb32c10f008280bb9.png",Ee=i(1),Te=i.p+"images/16d118d21f014e5ad80c630e4ede5613.png",Se=i.p+"images/8a3a0c8a2700d40f73270c286d113951.png",Ce=i.p+"images/90609c38ef9dc05de457d58fd788ae0f.png",ke=i(0),Ae=i.p+"images/10421d17db6bc3bbd887266fea4eb2cd.png";i(5),i(16);var Me=[{title:"Budget Planner",date_dev:"2020",stack:"Ionic, Angular",description:'\n          A simple budget planner that I made using <a href="https://ionicframework.com/" class="underline">Ionic</a>\n          / <a href="https://angular.io/" class="underline">Angular</a> stack. While starting to learn about Ionic, \n          it has come to my idea to make a relatively simple budget planner/tracking app targeted for highschool\n          students that hopefully, they can use to track their allowances and expenses, and might encourage them\n          to save some of their money.\n        ',features:["Day-to-day tracking of allowances and expenses","Generate monthly summary, provide basic insight of expenditures and income","Able to backup data to a file for later recovery","Has a Help & Feedback feature that answers FAQs and provides an email box for suggestions"],prefix:"budget",images:[{url:ce,label:"Swipe to right for more images!"},{url:ue,label:"Supports dark mode"},{url:he,label:"Generate montly overview"},{url:me,label:"View your expenses"},{url:fe,label:"Track your savings"},{url:ge,label:"Never feel clueless! I'm here."},{url:be.default,label:"Even supports local backup!"}],links:[{site:"github",url:"#",disabled:!0},{site:"open",url:"#",disabled:!0}]},{title:"School Online Content System",date_dev:"2020",stack:"Django, Python",description:'\n        A yet another simple website using <a href="https://www.djangoproject.com/" class="underline">Django</a>\n        / <a href="https://www.python.org/" class="underline">Python</a> stack. As I have been eager to learn Python, \n        I have stumbled upon the Django framework and has integrated it with \n        <a href="https://django-googledrive-storage.readthedocs.io/en/latest/" class="underline">Google Drive API</a> \n        to host uploaded files by the users.\n    ',features:["Has basic user registration","Also supports email password reset through Gmail's SMTP","Supports uploads of files online using Google Drive API (using a service account)","Limits access of students signed up to access only those lessons they are enrolled to","Targeted for use on small-scale schools only"],prefix:"schoolcms",images:[{url:Se,label:"Login Page"},{url:Ce,label:"Responsive design"},{url:ke.default,label:"Download lessons hosted online"},{url:Ae,label:"View your subjects depending on your course"}],links:[{site:"github",url:"#",disabled:!0}]},{title:"Edzer Studio Schedule Management System",date_dev:"2019",stack:"C#, MySQL",description:'\n        This is a group project that I made together with a team, as a requirement for one of my \n        database-related subjects on my 2nd year. Along with a planned database schema, an interview \n        with <a href="https://www.facebook.com/EDZERSTUDIO/" class="underline">Edzer Music Studio</a>, this WPF application (C# and MySQL served on XAMPP) features a scheduling \n        system with fees computation based on hours and intrument rentals, intrument management, and a \n        user panel for the administrator to assign other users with less privileges to the system.\n    ',features:["Schedule management that enables system user to create, update, and delete schedule records","Notifies the system user (admin or an employee), on upcoming schedules about to start","Able to calculate rental fee based on duration of rent, as well as add-ons (instrument rentals)","Management of instruments available for rental","User account control with two (2) levels of privileges (administrator and basic user)."],prefix:"edzer",images:[{url:we,label:"A Recording Studio Scheduling System"},{url:Ee.default,label:"Login"},{url:xe,label:"Dashboard Overview"},{url:ve,label:"Add Schedules"},{url:Te,label:"Be reminded of who's next"},{url:ye,label:"Manage Instruments"}],links:[{site:"github",url:"#",disabled:!0}]}],$e=[{language:"javascript",name:"Javascript",progress:50,projectExample:"budget"},{language:"sql",name:"SQL",progress:55,projectExample:"schoolcms"},{language:"python",name:"Python",progress:40,projectExample:"schoolcms"},{language:"csharp",name:"C#",progress:40,projectExample:"edzer"},{language:"java",name:"Java",progress:30}];if("content"in document.createElement("template")){if(null!=document.querySelector("#work-template")){var ze=document.querySelector("#works"),Pe=document.querySelector("#work-template");Me.forEach(e=>{let t=Pe.content.cloneNode(!0);t.querySelector(".w-col").id=e.prefix+"-col";let i=t.querySelector(".swiper-container");i.classList.add(e.prefix+"-slider");let n=i.querySelector(".swiper-wrapper"),s=document.createElement("div");s.classList.add("swiper-slide");let a=document.createElement("img"),r=document.createElement("div");r.classList.add("img-label"),s.appendChild(a),s.appendChild(r),e.images.forEach(e=>{let t=s.cloneNode(!0);t.querySelector("img").src=e.url,t.querySelector(".img-label").innerText=e.label,n.appendChild(t)}),i.querySelector(".swiper-pagination").classList.add(e.prefix+"-pagination"),t.querySelector(".w-title").innerText=e.title,t.querySelector(".w-stack").innerText=`${e.stack} | ${e.date_dev}`;let o=t.querySelector(".w-p"),l=o.querySelector("p");if(l.innerHTML=e.description,e.features){let t=document.createElement("ol");e.features.forEach(e=>{let i=document.createElement("li");i.innerText=e,t.append(i)}),l.appendChild(t)}let d=t.querySelector(".w-links"),p=document.createElement("li");p.appendChild(document.createElement("a")).appendChild(document.createElement("img")),e.links.forEach(e=>{let t=p.cloneNode(!0);t.querySelector("a").href=e.url,e.disabled&&t.querySelector("a").classList.add("disabled"),t.querySelector("img").classList.add(e.site),d.appendChild(t)});let c=t.querySelector(".w-toggle");c.addEventListener("click",()=>{o.classList.contains("show-p")?(o.classList.remove("show-p"),c.innerText="Show More"):(o.classList.add("show-p"),c.innerText="Hide")}),console.log(t),ze.appendChild(t)})}if(null!=document.querySelector("#skill-template")){var Le=document.querySelector("#ul-skillset");Pe=document.querySelector("#skill-template");$e.forEach(e=>{let t=Pe.content.cloneNode(!0),i=t.querySelector(".skill-name"),n=i.querySelector("a");n.innerText=e.name,n.href=e.projectExample?`./works.html#${e.projectExample}-col`:"#",i.querySelector("span").id=e.language+"-value",t.querySelector(".progress-bar-container").style.width=e.progress+"%",Le.appendChild(t)});let e=500,t=e+100;setTimeout(()=>{$e.forEach(e=>{!function(e,t,i){var n=document.getElementById(e),s=Math.floor(i/t),a=0;let r=setInterval(()=>{n.innerText=a+"%",a+1<=t?a+=1:clearInterval(r)},s)}(e.language+"-value",e.progress,t)})},e+500)}}var Ie={direction:"horizontal",slidesPerView:1,freeMode:!0,freeModeMomentum:!0,freeModeMomentumRatio:.3};new pe(".budget-slider",{...Ie,pagination:{el:".budget-pagination",type:"bullets"}}),new pe(".schoolcms-slider",{...Ie,pagination:{el:".schoolcms-pagination",type:"bullets"}}),new pe(".edzer-slider",{...Ie,pagination:{el:".edzer-pagination",type:"bullets"}}),new pe(".self-swiper",{pagination:{el:".self-swiper-pagination",type:"bullets"},initialSlide:1,breakpoints:{576:{slidesPerView:2},768:{slidesPerView:3}}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,